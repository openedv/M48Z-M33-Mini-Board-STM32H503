
10_TFTLCD_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d98  08000258  08000258  00010258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004c78  08007ff0  08007ff0  00017ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc68  0800cc68  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc68  0800cc68  0001cc68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc70  0800cc70  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc70  0800cc70  0001cc70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc74  0800cc74  0001cc74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800cc78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e4  2000006c  0800cce4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000850  0800cce4  00020850  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011b5a  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029d7  00000000  00000000  00031c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  00034618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a97  00000000  00000000  00035408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000225c4  00000000  00000000  00035e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001631e  00000000  00000000  00058463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd082  00000000  00000000  0006e781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ebc  00000000  00000000  0013b804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0013f6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	; (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	; (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000006c 	.word	0x2000006c
 8000274:	00000000 	.word	0x00000000
 8000278:	08007fd8 	.word	0x08007fd8

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	; (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	; (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000070 	.word	0x20000070
 8000294:	08007fd8 	.word	0x08007fd8

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b982 	b.w	80005b4 <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ce:	460d      	mov	r5, r1
 80002d0:	4604      	mov	r4, r0
 80002d2:	460f      	mov	r7, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d146      	bne.n	8000366 <__udivmoddi4+0x9e>
 80002d8:	428a      	cmp	r2, r1
 80002da:	4694      	mov	ip, r2
 80002dc:	d95e      	bls.n	800039c <__udivmoddi4+0xd4>
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	b143      	cbz	r3, 80002f6 <__udivmoddi4+0x2e>
 80002e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	409c      	lsls	r4, r3
 80002f0:	fa20 f202 	lsr.w	r2, r0, r2
 80002f4:	4317      	orrs	r7, r2
 80002f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002fa:	fa1f f58c 	uxth.w	r5, ip
 80002fe:	0c22      	lsrs	r2, r4, #16
 8000300:	fbb7 f1fe 	udiv	r1, r7, lr
 8000304:	fb0e 7711 	mls	r7, lr, r1, r7
 8000308:	fb01 f005 	mul.w	r0, r1, r5
 800030c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000310:	4290      	cmp	r0, r2
 8000312:	d908      	bls.n	8000326 <__udivmoddi4+0x5e>
 8000314:	eb1c 0202 	adds.w	r2, ip, r2
 8000318:	f101 37ff 	add.w	r7, r1, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x5c>
 800031e:	4290      	cmp	r0, r2
 8000320:	f200 8134 	bhi.w	800058c <__udivmoddi4+0x2c4>
 8000324:	4639      	mov	r1, r7
 8000326:	1a12      	subs	r2, r2, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	fbb2 f0fe 	udiv	r0, r2, lr
 800032e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033a:	42a5      	cmp	r5, r4
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x88>
 800033e:	eb1c 0404 	adds.w	r4, ip, r4
 8000342:	f100 32ff 	add.w	r2, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x86>
 8000348:	42a5      	cmp	r5, r4
 800034a:	f200 8119 	bhi.w	8000580 <__udivmoddi4+0x2b8>
 800034e:	4610      	mov	r0, r2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0x9a>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xb4>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80fc 	beq.w	8000568 <__udivmoddi4+0x2a0>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d14c      	bne.n	800041e <__udivmoddi4+0x156>
 8000384:	42ab      	cmp	r3, r5
 8000386:	f0c0 80f2 	bcc.w	800056e <__udivmoddi4+0x2a6>
 800038a:	4282      	cmp	r2, r0
 800038c:	f240 80ef 	bls.w	800056e <__udivmoddi4+0x2a6>
 8000390:	4608      	mov	r0, r1
 8000392:	2e00      	cmp	r6, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0x9a>
 8000396:	e9c6 4700 	strd	r4, r7, [r6]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0x9a>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xd8>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f382 	clz	r3, r2
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f040 809f 	bne.w	80004e8 <__udivmoddi4+0x220>
 80003aa:	1a8a      	subs	r2, r1, r2
 80003ac:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b0:	fa1f f78c 	uxth.w	r7, ip
 80003b4:	2101      	movs	r1, #1
 80003b6:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ba:	fb0e 2015 	mls	r0, lr, r5, r2
 80003be:	0c22      	lsrs	r2, r4, #16
 80003c0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c4:	fb07 f005 	mul.w	r0, r7, r5
 80003c8:	4290      	cmp	r0, r2
 80003ca:	d90f      	bls.n	80003ec <__udivmoddi4+0x124>
 80003cc:	eb1c 0202 	adds.w	r2, ip, r2
 80003d0:	f105 38ff 	add.w	r8, r5, #4294967295
 80003d4:	bf2c      	ite	cs
 80003d6:	f04f 0901 	movcs.w	r9, #1
 80003da:	f04f 0900 	movcc.w	r9, #0
 80003de:	4290      	cmp	r0, r2
 80003e0:	d903      	bls.n	80003ea <__udivmoddi4+0x122>
 80003e2:	f1b9 0f00 	cmp.w	r9, #0
 80003e6:	f000 80ce 	beq.w	8000586 <__udivmoddi4+0x2be>
 80003ea:	4645      	mov	r5, r8
 80003ec:	1a12      	subs	r2, r2, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb2 f0fe 	udiv	r0, r2, lr
 80003f4:	fb0e 2210 	mls	r2, lr, r0, r2
 80003f8:	fb00 f707 	mul.w	r7, r0, r7
 80003fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000400:	42a7      	cmp	r7, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x14e>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 32ff 	add.w	r2, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x14c>
 800040e:	42a7      	cmp	r7, r4
 8000410:	f200 80b3 	bhi.w	800057a <__udivmoddi4+0x2b2>
 8000414:	4610      	mov	r0, r2
 8000416:	1be4      	subs	r4, r4, r7
 8000418:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800041c:	e79c      	b.n	8000358 <__udivmoddi4+0x90>
 800041e:	f1c1 0420 	rsb	r4, r1, #32
 8000422:	408b      	lsls	r3, r1
 8000424:	fa05 fc01 	lsl.w	ip, r5, r1
 8000428:	fa22 f704 	lsr.w	r7, r2, r4
 800042c:	40e5      	lsrs	r5, r4
 800042e:	408a      	lsls	r2, r1
 8000430:	431f      	orrs	r7, r3
 8000432:	fa20 f304 	lsr.w	r3, r0, r4
 8000436:	4088      	lsls	r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea43 030c 	orr.w	r3, r3, ip
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000448:	fbb5 fef8 	udiv	lr, r5, r8
 800044c:	fb08 551e 	mls	r5, r8, lr, r5
 8000450:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a9      	cmp	r9, r5
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1b2>
 800045c:	197d      	adds	r5, r7, r5
 800045e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a9      	cmp	r9, r5
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b0>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 808d 	beq.w	8000592 <__udivmoddi4+0x2ca>
 8000478:	46d6      	mov	lr, sl
 800047a:	eba5 0509 	sub.w	r5, r5, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb5 f3f8 	udiv	r3, r5, r8
 8000486:	fb08 5513 	mls	r5, r8, r3, r5
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000492:	45ac      	cmp	ip, r5
 8000494:	d906      	bls.n	80004a4 <__udivmoddi4+0x1dc>
 8000496:	197d      	adds	r5, r7, r5
 8000498:	f103 38ff 	add.w	r8, r3, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x1da>
 800049e:	45ac      	cmp	ip, r5
 80004a0:	d87e      	bhi.n	80005a0 <__udivmoddi4+0x2d8>
 80004a2:	4643      	mov	r3, r8
 80004a4:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004a8:	eba5 050c 	sub.w	r5, r5, ip
 80004ac:	fba3 9802 	umull	r9, r8, r3, r2
 80004b0:	4545      	cmp	r5, r8
 80004b2:	46ce      	mov	lr, r9
 80004b4:	46c4      	mov	ip, r8
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0x1f6>
 80004b8:	d106      	bne.n	80004c8 <__udivmoddi4+0x200>
 80004ba:	4548      	cmp	r0, r9
 80004bc:	d204      	bcs.n	80004c8 <__udivmoddi4+0x200>
 80004be:	3b01      	subs	r3, #1
 80004c0:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c4:	eb68 0c07 	sbc.w	ip, r8, r7
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d06f      	beq.n	80005ac <__udivmoddi4+0x2e4>
 80004cc:	ebb0 020e 	subs.w	r2, r0, lr
 80004d0:	eb65 050c 	sbc.w	r5, r5, ip
 80004d4:	40ca      	lsrs	r2, r1
 80004d6:	fa05 f404 	lsl.w	r4, r5, r4
 80004da:	40cd      	lsrs	r5, r1
 80004dc:	4618      	mov	r0, r3
 80004de:	4314      	orrs	r4, r2
 80004e0:	2100      	movs	r1, #0
 80004e2:	e9c6 4500 	strd	r4, r5, [r6]
 80004e6:	e73c      	b.n	8000362 <__udivmoddi4+0x9a>
 80004e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ec:	f1c3 0220 	rsb	r2, r3, #32
 80004f0:	4099      	lsls	r1, r3
 80004f2:	409c      	lsls	r4, r3
 80004f4:	40d5      	lsrs	r5, r2
 80004f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004fa:	fa20 f202 	lsr.w	r2, r0, r2
 80004fe:	fa1f f78c 	uxth.w	r7, ip
 8000502:	fbb5 f0fe 	udiv	r0, r5, lr
 8000506:	430a      	orrs	r2, r1
 8000508:	fb0e 5510 	mls	r5, lr, r0, r5
 800050c:	0c11      	lsrs	r1, r2, #16
 800050e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000512:	fb00 f507 	mul.w	r5, r0, r7
 8000516:	428d      	cmp	r5, r1
 8000518:	d90e      	bls.n	8000538 <__udivmoddi4+0x270>
 800051a:	eb1c 0101 	adds.w	r1, ip, r1
 800051e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000522:	bf2c      	ite	cs
 8000524:	f04f 0901 	movcs.w	r9, #1
 8000528:	f04f 0900 	movcc.w	r9, #0
 800052c:	428d      	cmp	r5, r1
 800052e:	d902      	bls.n	8000536 <__udivmoddi4+0x26e>
 8000530:	f1b9 0f00 	cmp.w	r9, #0
 8000534:	d031      	beq.n	800059a <__udivmoddi4+0x2d2>
 8000536:	4640      	mov	r0, r8
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5fe 	udiv	r5, r1, lr
 8000540:	fb0e 1115 	mls	r1, lr, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f107 	mul.w	r1, r5, r7
 800054c:	4291      	cmp	r1, r2
 800054e:	d907      	bls.n	8000560 <__udivmoddi4+0x298>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d201      	bcs.n	800055e <__udivmoddi4+0x296>
 800055a:	4291      	cmp	r1, r2
 800055c:	d823      	bhi.n	80005a6 <__udivmoddi4+0x2de>
 800055e:	4645      	mov	r5, r8
 8000560:	1a52      	subs	r2, r2, r1
 8000562:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000566:	e726      	b.n	80003b6 <__udivmoddi4+0xee>
 8000568:	4631      	mov	r1, r6
 800056a:	4630      	mov	r0, r6
 800056c:	e6f9      	b.n	8000362 <__udivmoddi4+0x9a>
 800056e:	1a84      	subs	r4, r0, r2
 8000570:	eb65 0203 	sbc.w	r2, r5, r3
 8000574:	2001      	movs	r0, #1
 8000576:	4617      	mov	r7, r2
 8000578:	e70b      	b.n	8000392 <__udivmoddi4+0xca>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e74a      	b.n	8000416 <__udivmoddi4+0x14e>
 8000580:	4464      	add	r4, ip
 8000582:	3802      	subs	r0, #2
 8000584:	e6e4      	b.n	8000350 <__udivmoddi4+0x88>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	e72f      	b.n	80003ec <__udivmoddi4+0x124>
 800058c:	3902      	subs	r1, #2
 800058e:	4462      	add	r2, ip
 8000590:	e6c9      	b.n	8000326 <__udivmoddi4+0x5e>
 8000592:	f1ae 0e02 	sub.w	lr, lr, #2
 8000596:	443d      	add	r5, r7
 8000598:	e76f      	b.n	800047a <__udivmoddi4+0x1b2>
 800059a:	3802      	subs	r0, #2
 800059c:	4461      	add	r1, ip
 800059e:	e7cb      	b.n	8000538 <__udivmoddi4+0x270>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443d      	add	r5, r7
 80005a4:	e77e      	b.n	80004a4 <__udivmoddi4+0x1dc>
 80005a6:	3d02      	subs	r5, #2
 80005a8:	4462      	add	r2, ip
 80005aa:	e7d9      	b.n	8000560 <__udivmoddi4+0x298>
 80005ac:	4618      	mov	r0, r3
 80005ae:	4631      	mov	r1, r6
 80005b0:	e6d7      	b.n	8000362 <__udivmoddi4+0x9a>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <lcd_gpio_init>:
 * @brief   LCD control interface initialization
 * @param   None.
 * @retval  None.
 */
static void lcd_gpio_init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	LCD_CS(0);
 80005bc:	2200      	movs	r2, #0
 80005be:	2110      	movs	r1, #16
 80005c0:	480c      	ldr	r0, [pc, #48]	; (80005f4 <lcd_gpio_init+0x3c>)
 80005c2:	f001 fc2d 	bl	8001e20 <HAL_GPIO_WritePin>
	LCD_PWR(0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2102      	movs	r1, #2
 80005ca:	480a      	ldr	r0, [pc, #40]	; (80005f4 <lcd_gpio_init+0x3c>)
 80005cc:	f001 fc28 	bl	8001e20 <HAL_GPIO_WritePin>

    LCD_RST(0);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2104      	movs	r1, #4
 80005d4:	4807      	ldr	r0, [pc, #28]	; (80005f4 <lcd_gpio_init+0x3c>)
 80005d6:	f001 fc23 	bl	8001e20 <HAL_GPIO_WritePin>
    HAL_Delay(120);                 /* Delay 120ms */
 80005da:	2078      	movs	r0, #120	; 0x78
 80005dc:	f001 f8f6 	bl	80017cc <HAL_Delay>
    LCD_RST(1);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2104      	movs	r1, #4
 80005e4:	4803      	ldr	r0, [pc, #12]	; (80005f4 <lcd_gpio_init+0x3c>)
 80005e6:	f001 fc1b 	bl	8001e20 <HAL_GPIO_WritePin>

    MX_SPI1_Init();                 /* Initialize the SPI1 interface */
 80005ea:	f000 fccb 	bl	8000f84 <MX_SPI1_Init>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	42020000 	.word	0x42020000

080005f8 <lcd_spi_send>:
 * @param   data : The starting address of the data
 * @param   size : Send data size
 * @retval  None.
 */
static void lcd_spi_send(uint8_t *data, uint32_t size)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t delta;
    LCD_CS(0);                          /* Enable slice selection */
 8000602:	2200      	movs	r2, #0
 8000604:	2110      	movs	r1, #16
 8000606:	481f      	ldr	r0, [pc, #124]	; (8000684 <lcd_spi_send+0x8c>)
 8000608:	f001 fc0a 	bl	8001e20 <HAL_GPIO_WritePin>
    delta = size / 0xFFFF;
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	4a1e      	ldr	r2, [pc, #120]	; (8000688 <lcd_spi_send+0x90>)
 8000610:	fba2 2303 	umull	r2, r3, r2, r3
 8000614:	0bdb      	lsrs	r3, r3, #15
 8000616:	60bb      	str	r3, [r7, #8]

    for (i = 0; i <= delta; i ++)
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	e024      	b.n	8000668 <lcd_spi_send+0x70>
    {
        if ( i == delta )               /* The last frame is sent */
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	429a      	cmp	r2, r3
 8000624:	d112      	bne.n	800064c <lcd_spi_send+0x54>
        {
            spi1_write_data(&data[i * 0xFFFF], size%0xFFFF);
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	4613      	mov	r3, r2
 800062a:	041b      	lsls	r3, r3, #16
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	18d0      	adds	r0, r2, r3
 8000632:	6839      	ldr	r1, [r7, #0]
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <lcd_spi_send+0x90>)
 8000636:	fba3 2301 	umull	r2, r3, r3, r1
 800063a:	0bda      	lsrs	r2, r3, #15
 800063c:	4613      	mov	r3, r2
 800063e:	041b      	lsls	r3, r3, #16
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	1aca      	subs	r2, r1, r3
 8000644:	4611      	mov	r1, r2
 8000646:	f000 fd6f 	bl	8001128 <spi1_write_data>
 800064a:	e00a      	b.n	8000662 <lcd_spi_send+0x6a>
        }
        else                            /* Very-long data sends 0xFFFF bytes of data at a time */
        {
            spi1_write_data(&data[i * 0xFFFF], 0xFFFF);
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	4613      	mov	r3, r2
 8000650:	041b      	lsls	r3, r3, #16
 8000652:	1a9b      	subs	r3, r3, r2
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	4413      	add	r3, r2
 8000658:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fd63 	bl	8001128 <spi1_write_data>
    for (i = 0; i <= delta; i ++)
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	3301      	adds	r3, #1
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	429a      	cmp	r2, r3
 800066e:	d9d6      	bls.n	800061e <lcd_spi_send+0x26>
        }
    }
    LCD_CS(1);                          /* Disable slice selection */
 8000670:	2201      	movs	r2, #1
 8000672:	2110      	movs	r1, #16
 8000674:	4803      	ldr	r0, [pc, #12]	; (8000684 <lcd_spi_send+0x8c>)
 8000676:	f001 fbd3 	bl	8001e20 <HAL_GPIO_WritePin>
}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	42020000 	.word	0x42020000
 8000688:	80008001 	.word	0x80008001

0800068c <lcd_write_cmd>:
 * @brief   Writes commands to LCD
 * @param   cmd : Commands to send
 * @retval  None.
 */
static void lcd_write_cmd(uint8_t cmd)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
    LCD_WR(0);
 8000696:	2200      	movs	r2, #0
 8000698:	2108      	movs	r1, #8
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <lcd_write_cmd+0x28>)
 800069c:	f001 fbc0 	bl	8001e20 <HAL_GPIO_WritePin>

    lcd_spi_send(&cmd, 1);
 80006a0:	1dfb      	adds	r3, r7, #7
 80006a2:	2101      	movs	r1, #1
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ffa7 	bl	80005f8 <lcd_spi_send>
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	42020000 	.word	0x42020000

080006b8 <lcd_write_data>:
 * @brief   Writes data to LCD
 * @param   cmd : data to send
 * @retval  None.
 */
static void lcd_write_data(uint8_t data)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
    LCD_WR(1);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2108      	movs	r1, #8
 80006c6:	4806      	ldr	r0, [pc, #24]	; (80006e0 <lcd_write_data+0x28>)
 80006c8:	f001 fbaa 	bl	8001e20 <HAL_GPIO_WritePin>

    lcd_spi_send(&data, 1);
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	2101      	movs	r1, #1
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff91 	bl	80005f8 <lcd_spi_send>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	42020000 	.word	0x42020000

080006e4 <lcd_write_halfword>:
 * @brief   Writes half a word of data to the LCD
 * @param   cmd : data to send
 * @retval  None.
 */
void lcd_write_halfword(const uint16_t da)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2] = {0};
 80006ee:	2300      	movs	r3, #0
 80006f0:	81bb      	strh	r3, [r7, #12]

    data[0] = da >> 8;
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	733b      	strb	r3, [r7, #12]
    data[1] = da;
 80006fc:	88fb      	ldrh	r3, [r7, #6]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	737b      	strb	r3, [r7, #13]

    LCD_WR(1);
 8000702:	2201      	movs	r2, #1
 8000704:	2108      	movs	r1, #8
 8000706:	4806      	ldr	r0, [pc, #24]	; (8000720 <lcd_write_halfword+0x3c>)
 8000708:	f001 fb8a 	bl	8001e20 <HAL_GPIO_WritePin>
    lcd_spi_send(data, 2);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2102      	movs	r1, #2
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ff70 	bl	80005f8 <lcd_spi_send>
}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	42020000 	.word	0x42020000

08000724 <lcd_address_set>:
 * @param   x1,y1 : starting coordinate
 * @param   x2,y2 : end coordinates
 * @retval  None.
 */
void lcd_address_set(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4604      	mov	r4, r0
 800072c:	4608      	mov	r0, r1
 800072e:	4611      	mov	r1, r2
 8000730:	461a      	mov	r2, r3
 8000732:	4623      	mov	r3, r4
 8000734:	80fb      	strh	r3, [r7, #6]
 8000736:	4603      	mov	r3, r0
 8000738:	80bb      	strh	r3, [r7, #4]
 800073a:	460b      	mov	r3, r1
 800073c:	807b      	strh	r3, [r7, #2]
 800073e:	4613      	mov	r3, r2
 8000740:	803b      	strh	r3, [r7, #0]
    lcd_write_cmd(0x2a);
 8000742:	202a      	movs	r0, #42	; 0x2a
 8000744:	f7ff ffa2 	bl	800068c <lcd_write_cmd>
    lcd_write_data(x1 >> 8);
 8000748:	88fb      	ldrh	r3, [r7, #6]
 800074a:	0a1b      	lsrs	r3, r3, #8
 800074c:	b29b      	uxth	r3, r3
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ffb1 	bl	80006b8 <lcd_write_data>
    lcd_write_data(x1);
 8000756:	88fb      	ldrh	r3, [r7, #6]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ffac 	bl	80006b8 <lcd_write_data>
    lcd_write_data(x2 >> 8);
 8000760:	887b      	ldrh	r3, [r7, #2]
 8000762:	0a1b      	lsrs	r3, r3, #8
 8000764:	b29b      	uxth	r3, r3
 8000766:	b2db      	uxtb	r3, r3
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ffa5 	bl	80006b8 <lcd_write_data>
    lcd_write_data(x2);
 800076e:	887b      	ldrh	r3, [r7, #2]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ffa0 	bl	80006b8 <lcd_write_data>

    lcd_write_cmd(0x2b);
 8000778:	202b      	movs	r0, #43	; 0x2b
 800077a:	f7ff ff87 	bl	800068c <lcd_write_cmd>
    lcd_write_data(y1 >> 8);
 800077e:	88bb      	ldrh	r3, [r7, #4]
 8000780:	0a1b      	lsrs	r3, r3, #8
 8000782:	b29b      	uxth	r3, r3
 8000784:	b2db      	uxtb	r3, r3
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff96 	bl	80006b8 <lcd_write_data>
    lcd_write_data(y1);
 800078c:	88bb      	ldrh	r3, [r7, #4]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff91 	bl	80006b8 <lcd_write_data>
    lcd_write_data(y2 >> 8);
 8000796:	883b      	ldrh	r3, [r7, #0]
 8000798:	0a1b      	lsrs	r3, r3, #8
 800079a:	b29b      	uxth	r3, r3
 800079c:	b2db      	uxtb	r3, r3
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff8a 	bl	80006b8 <lcd_write_data>
    lcd_write_data(y2);
 80007a4:	883b      	ldrh	r3, [r7, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff85 	bl	80006b8 <lcd_write_data>

    lcd_write_cmd(0x2C);
 80007ae:	202c      	movs	r0, #44	; 0x2c
 80007b0:	f7ff ff6c 	bl	800068c <lcd_write_cmd>
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd90      	pop	{r4, r7, pc}

080007bc <lcd_clear>:
 * @brief   Clears the LCD screen in one color
 * @param   Color : Clear screen color
 * @retval  None.
 */
void lcd_clear(uint16_t color)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	80fb      	strh	r3, [r7, #6]
    uint16_t i, j;
    uint8_t data[2] = {0};
 80007c6:	2300      	movs	r3, #0
 80007c8:	813b      	strh	r3, [r7, #8]

    data[0] = color >> 8;
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	0a1b      	lsrs	r3, r3, #8
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	723b      	strb	r3, [r7, #8]
    data[1] = color;
 80007d4:	88fb      	ldrh	r3, [r7, #6]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	727b      	strb	r3, [r7, #9]

    lcd_address_set(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 80007da:	23ef      	movs	r3, #239	; 0xef
 80007dc:	22ef      	movs	r2, #239	; 0xef
 80007de:	2100      	movs	r1, #0
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff ff9f 	bl	8000724 <lcd_address_set>

    for (j = 0; j < LCD_BUF_SIZE / 2; j++)
 80007e6:	2300      	movs	r3, #0
 80007e8:	81bb      	strh	r3, [r7, #12]
 80007ea:	e00d      	b.n	8000808 <lcd_clear+0x4c>
    {
        lcd_buf[j * 2] =  data[0];
 80007ec:	89bb      	ldrh	r3, [r7, #12]
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	7a39      	ldrb	r1, [r7, #8]
 80007f2:	4a13      	ldr	r2, [pc, #76]	; (8000840 <lcd_clear+0x84>)
 80007f4:	54d1      	strb	r1, [r2, r3]
        lcd_buf[j * 2 + 1] =  data[1];
 80007f6:	89bb      	ldrh	r3, [r7, #12]
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	3301      	adds	r3, #1
 80007fc:	7a79      	ldrb	r1, [r7, #9]
 80007fe:	4a10      	ldr	r2, [pc, #64]	; (8000840 <lcd_clear+0x84>)
 8000800:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < LCD_BUF_SIZE / 2; j++)
 8000802:	89bb      	ldrh	r3, [r7, #12]
 8000804:	3301      	adds	r3, #1
 8000806:	81bb      	strh	r3, [r7, #12]
 8000808:	89bb      	ldrh	r3, [r7, #12]
 800080a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800080e:	d3ed      	bcc.n	80007ec <lcd_clear+0x30>
    }

    LCD_WR(1);
 8000810:	2201      	movs	r2, #1
 8000812:	2108      	movs	r1, #8
 8000814:	480b      	ldr	r0, [pc, #44]	; (8000844 <lcd_clear+0x88>)
 8000816:	f001 fb03 	bl	8001e20 <HAL_GPIO_WritePin>

    for (i = 0; i < (LCD_TOTAL_BUF_SIZE / LCD_BUF_SIZE); i++)
 800081a:	2300      	movs	r3, #0
 800081c:	81fb      	strh	r3, [r7, #14]
 800081e:	e007      	b.n	8000830 <lcd_clear+0x74>
    {
        lcd_spi_send(lcd_buf, LCD_BUF_SIZE);
 8000820:	f44f 6190 	mov.w	r1, #1152	; 0x480
 8000824:	4806      	ldr	r0, [pc, #24]	; (8000840 <lcd_clear+0x84>)
 8000826:	f7ff fee7 	bl	80005f8 <lcd_spi_send>
    for (i = 0; i < (LCD_TOTAL_BUF_SIZE / LCD_BUF_SIZE); i++)
 800082a:	89fb      	ldrh	r3, [r7, #14]
 800082c:	3301      	adds	r3, #1
 800082e:	81fb      	strh	r3, [r7, #14]
 8000830:	89fb      	ldrh	r3, [r7, #14]
 8000832:	2b63      	cmp	r3, #99	; 0x63
 8000834:	d9f4      	bls.n	8000820 <lcd_clear+0x64>
    }
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000088 	.word	0x20000088
 8000844:	42020000 	.word	0x42020000

08000848 <lcd_show_char>:
 * @param   chr  : The character to display
 * @param   size : Font size (16/24/32 point font supported)
 * @retval  None.
 */
void lcd_show_char(uint16_t x, uint16_t y, char chr, uint8_t size, uint8_t mode ,uint16_t color)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b087      	sub	sp, #28
 800084c:	af00      	add	r7, sp, #0
 800084e:	4604      	mov	r4, r0
 8000850:	4608      	mov	r0, r1
 8000852:	4611      	mov	r1, r2
 8000854:	461a      	mov	r2, r3
 8000856:	4623      	mov	r3, r4
 8000858:	80fb      	strh	r3, [r7, #6]
 800085a:	4603      	mov	r3, r0
 800085c:	80bb      	strh	r3, [r7, #4]
 800085e:	460b      	mov	r3, r1
 8000860:	70fb      	strb	r3, [r7, #3]
 8000862:	4613      	mov	r3, r2
 8000864:	70bb      	strb	r3, [r7, #2]
    uint8_t temp = 0, t1 = 0, t = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	75fb      	strb	r3, [r7, #23]
 800086a:	2300      	movs	r3, #0
 800086c:	75bb      	strb	r3, [r7, #22]
 800086e:	2300      	movs	r3, #0
 8000870:	757b      	strb	r3, [r7, #21]
    uint8_t *pfont = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
    uint8_t csize = 0;                            /* Get the number of bytes of a font character corresponding to the dot matrix set */
 8000876:	2300      	movs	r3, #0
 8000878:	733b      	strb	r3, [r7, #12]
    uint16_t colortemp = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	81fb      	strh	r3, [r7, #14]
    uint8_t sta = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	737b      	strb	r3, [r7, #13]

    chr = chr - ' ';                              /* Get the offset value (ASCII fonts start modulo Spaces, so - "is the font for the corresponding character) */
 8000882:	78fb      	ldrb	r3, [r7, #3]
 8000884:	3b20      	subs	r3, #32
 8000886:	70fb      	strb	r3, [r7, #3]

    if ((x > (LCD_WIDTH - size / 2)) || (y > (LCD_HEIGHT - size)))
 8000888:	88fa      	ldrh	r2, [r7, #6]
 800088a:	78bb      	ldrb	r3, [r7, #2]
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	b2db      	uxtb	r3, r3
 8000890:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000894:	429a      	cmp	r2, r3
 8000896:	f300 80f6 	bgt.w	8000a86 <lcd_show_char+0x23e>
 800089a:	88ba      	ldrh	r2, [r7, #4]
 800089c:	78bb      	ldrb	r3, [r7, #2]
 800089e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80008a2:	429a      	cmp	r2, r3
 80008a4:	f300 80ef 	bgt.w	8000a86 <lcd_show_char+0x23e>
    {
        return;
    }

    lcd_address_set(x, y, x + size / 2 - 1, y + size - 1); /* (x,y,x+8-1,y+16-1) */
 80008a8:	78bb      	ldrb	r3, [r7, #2]
 80008aa:	085b      	lsrs	r3, r3, #1
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	4413      	add	r3, r2
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	3b01      	subs	r3, #1
 80008b8:	b29c      	uxth	r4, r3
 80008ba:	78bb      	ldrb	r3, [r7, #2]
 80008bc:	b29a      	uxth	r2, r3
 80008be:	88bb      	ldrh	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	3b01      	subs	r3, #1
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	88b9      	ldrh	r1, [r7, #4]
 80008ca:	88f8      	ldrh	r0, [r7, #6]
 80008cc:	4622      	mov	r2, r4
 80008ce:	f7ff ff29 	bl	8000724 <lcd_address_set>

    switch (size)
 80008d2:	78bb      	ldrb	r3, [r7, #2]
 80008d4:	3b0c      	subs	r3, #12
 80008d6:	2b14      	cmp	r3, #20
 80008d8:	f200 80d7 	bhi.w	8000a8a <lcd_show_char+0x242>
 80008dc:	a201      	add	r2, pc, #4	; (adr r2, 80008e4 <lcd_show_char+0x9c>)
 80008de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e2:	bf00      	nop
 80008e4:	08000939 	.word	0x08000939
 80008e8:	08000a8b 	.word	0x08000a8b
 80008ec:	08000a8b 	.word	0x08000a8b
 80008f0:	08000a8b 	.word	0x08000a8b
 80008f4:	0800094b 	.word	0x0800094b
 80008f8:	08000a8b 	.word	0x08000a8b
 80008fc:	08000a8b 	.word	0x08000a8b
 8000900:	08000a8b 	.word	0x08000a8b
 8000904:	08000a8b 	.word	0x08000a8b
 8000908:	08000a8b 	.word	0x08000a8b
 800090c:	08000a8b 	.word	0x08000a8b
 8000910:	08000a8b 	.word	0x08000a8b
 8000914:	08000957 	.word	0x08000957
 8000918:	08000a8b 	.word	0x08000a8b
 800091c:	08000a8b 	.word	0x08000a8b
 8000920:	08000a8b 	.word	0x08000a8b
 8000924:	08000a8b 	.word	0x08000a8b
 8000928:	08000a8b 	.word	0x08000a8b
 800092c:	08000a8b 	.word	0x08000a8b
 8000930:	08000a8b 	.word	0x08000a8b
 8000934:	08000969 	.word	0x08000969
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[(uint8_t)chr];             /* 1206 font */
 8000938:	78fa      	ldrb	r2, [r7, #3]
 800093a:	4613      	mov	r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	4413      	add	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4a54      	ldr	r2, [pc, #336]	; (8000a94 <lcd_show_char+0x24c>)
 8000944:	4413      	add	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
            break;
 8000948:	e014      	b.n	8000974 <lcd_show_char+0x12c>

        case 16:
            pfont = (uint8_t *)asc2_1608[(uint8_t)chr];             /* 1608 font */
 800094a:	78fb      	ldrb	r3, [r7, #3]
 800094c:	011b      	lsls	r3, r3, #4
 800094e:	4a52      	ldr	r2, [pc, #328]	; (8000a98 <lcd_show_char+0x250>)
 8000950:	4413      	add	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
            break;
 8000954:	e00e      	b.n	8000974 <lcd_show_char+0x12c>

        case 24:
            pfont = (uint8_t *)asc2_2412[(uint8_t)chr];             /* 2412 font */
 8000956:	78fa      	ldrb	r2, [r7, #3]
 8000958:	4613      	mov	r3, r2
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	4413      	add	r3, r2
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	4a4e      	ldr	r2, [pc, #312]	; (8000a9c <lcd_show_char+0x254>)
 8000962:	4413      	add	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
            break;
 8000966:	e005      	b.n	8000974 <lcd_show_char+0x12c>

        case 32:
            pfont = (uint8_t *)asc2_3216[(uint8_t)chr];             /* 3216 font */
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	01db      	lsls	r3, r3, #7
 800096c:	4a4c      	ldr	r2, [pc, #304]	; (8000aa0 <lcd_show_char+0x258>)
 800096e:	4413      	add	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
            break;
 8000972:	bf00      	nop

        default:
            return ;
    }

    if (size != 24)
 8000974:	78bb      	ldrb	r3, [r7, #2]
 8000976:	2b18      	cmp	r3, #24
 8000978:	d042      	beq.n	8000a00 <lcd_show_char+0x1b8>
    {
        csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);
 800097a:	78bb      	ldrb	r3, [r7, #2]
 800097c:	08db      	lsrs	r3, r3, #3
 800097e:	b2db      	uxtb	r3, r3
 8000980:	461a      	mov	r2, r3
 8000982:	78bb      	ldrb	r3, [r7, #2]
 8000984:	f003 0307 	and.w	r3, r3, #7
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	bf14      	ite	ne
 800098e:	2301      	movne	r3, #1
 8000990:	2300      	moveq	r3, #0
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4413      	add	r3, r2
 8000996:	b2da      	uxtb	r2, r3
 8000998:	78bb      	ldrb	r3, [r7, #2]
 800099a:	085b      	lsrs	r3, r3, #1
 800099c:	b2db      	uxtb	r3, r3
 800099e:	fb12 f303 	smulbb	r3, r2, r3
 80009a2:	733b      	strb	r3, [r7, #12]

        for (t = 0; t < csize; t++)
 80009a4:	2300      	movs	r3, #0
 80009a6:	757b      	strb	r3, [r7, #21]
 80009a8:	e025      	b.n	80009f6 <lcd_show_char+0x1ae>
        {
            temp = pfont[t];                               /* Retrieves the dot matrix data of the character */
 80009aa:	7d7b      	ldrb	r3, [r7, #21]
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4413      	add	r3, r2
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	75fb      	strb	r3, [r7, #23]

            for (t1 = 0; t1 < 8; t1++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	75bb      	strb	r3, [r7, #22]
 80009b8:	e017      	b.n	80009ea <lcd_show_char+0x1a2>
            {
                    if (temp & 0x80)
 80009ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	da02      	bge.n	80009c8 <lcd_show_char+0x180>
                    {
                        colortemp = color;
 80009c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80009c4:	81fb      	strh	r3, [r7, #14]
 80009c6:	e006      	b.n	80009d6 <lcd_show_char+0x18e>
                    }
                    else if (mode == 0)                    /* Invalid point, not shown */
 80009c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d102      	bne.n	80009d6 <lcd_show_char+0x18e>
                    {
                        colortemp = g_back_color;
 80009d0:	4b34      	ldr	r3, [pc, #208]	; (8000aa4 <lcd_show_char+0x25c>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	81fb      	strh	r3, [r7, #14]
                    }

                    lcd_write_halfword(colortemp);
 80009d6:	89fb      	ldrh	r3, [r7, #14]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fe83 	bl	80006e4 <lcd_write_halfword>
                    temp <<= 1;
 80009de:	7dfb      	ldrb	r3, [r7, #23]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	75fb      	strb	r3, [r7, #23]
            for (t1 = 0; t1 < 8; t1++)
 80009e4:	7dbb      	ldrb	r3, [r7, #22]
 80009e6:	3301      	adds	r3, #1
 80009e8:	75bb      	strb	r3, [r7, #22]
 80009ea:	7dbb      	ldrb	r3, [r7, #22]
 80009ec:	2b07      	cmp	r3, #7
 80009ee:	d9e4      	bls.n	80009ba <lcd_show_char+0x172>
        for (t = 0; t < csize; t++)
 80009f0:	7d7b      	ldrb	r3, [r7, #21]
 80009f2:	3301      	adds	r3, #1
 80009f4:	757b      	strb	r3, [r7, #21]
 80009f6:	7d7a      	ldrb	r2, [r7, #21]
 80009f8:	7b3b      	ldrb	r3, [r7, #12]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d3d5      	bcc.n	80009aa <lcd_show_char+0x162>
 80009fe:	e045      	b.n	8000a8c <lcd_show_char+0x244>
            }
        }
    }
    else
    {
        csize = (size * 16) / 8;
 8000a00:	78bb      	ldrb	r3, [r7, #2]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	733b      	strb	r3, [r7, #12]

        for (t = 0; t < csize; t++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	757b      	strb	r3, [r7, #21]
 8000a0a:	e037      	b.n	8000a7c <lcd_show_char+0x234>
        {
            temp = asc2_2412[(uint8_t)chr][t];
 8000a0c:	78fa      	ldrb	r2, [r7, #3]
 8000a0e:	7d79      	ldrb	r1, [r7, #21]
 8000a10:	4822      	ldr	r0, [pc, #136]	; (8000a9c <lcd_show_char+0x254>)
 8000a12:	4613      	mov	r3, r2
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	011b      	lsls	r3, r3, #4
 8000a1a:	4403      	add	r3, r0
 8000a1c:	440b      	add	r3, r1
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	75fb      	strb	r3, [r7, #23]

            if (t % 2 == 0)
 8000a22:	7d7b      	ldrb	r3, [r7, #21]
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d102      	bne.n	8000a34 <lcd_show_char+0x1ec>
            {
                sta = 8;
 8000a2e:	2308      	movs	r3, #8
 8000a30:	737b      	strb	r3, [r7, #13]
 8000a32:	e001      	b.n	8000a38 <lcd_show_char+0x1f0>
            }
            else
            {
                sta = 4;
 8000a34:	2304      	movs	r3, #4
 8000a36:	737b      	strb	r3, [r7, #13]
            }

            for (t1 = 0; t1 < sta; t1++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	75bb      	strb	r3, [r7, #22]
 8000a3c:	e017      	b.n	8000a6e <lcd_show_char+0x226>
            {
                if(temp & 0x80)
 8000a3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	da02      	bge.n	8000a4c <lcd_show_char+0x204>
                {
                    colortemp = color;
 8000a46:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000a48:	81fb      	strh	r3, [r7, #14]
 8000a4a:	e006      	b.n	8000a5a <lcd_show_char+0x212>
                }
                else if (mode == 0)                                 /* Invalid point, not shown */
 8000a4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d102      	bne.n	8000a5a <lcd_show_char+0x212>
                {
                    colortemp = g_back_color;
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <lcd_show_char+0x25c>)
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	81fb      	strh	r3, [r7, #14]
                }

                lcd_write_halfword(colortemp);
 8000a5a:	89fb      	ldrh	r3, [r7, #14]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fe41 	bl	80006e4 <lcd_write_halfword>
                temp <<= 1;
 8000a62:	7dfb      	ldrb	r3, [r7, #23]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	75fb      	strb	r3, [r7, #23]
            for (t1 = 0; t1 < sta; t1++)
 8000a68:	7dbb      	ldrb	r3, [r7, #22]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	75bb      	strb	r3, [r7, #22]
 8000a6e:	7dba      	ldrb	r2, [r7, #22]
 8000a70:	7b7b      	ldrb	r3, [r7, #13]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d3e3      	bcc.n	8000a3e <lcd_show_char+0x1f6>
        for (t = 0; t < csize; t++)
 8000a76:	7d7b      	ldrb	r3, [r7, #21]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	757b      	strb	r3, [r7, #21]
 8000a7c:	7d7a      	ldrb	r2, [r7, #21]
 8000a7e:	7b3b      	ldrb	r3, [r7, #12]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d3c3      	bcc.n	8000a0c <lcd_show_char+0x1c4>
 8000a84:	e002      	b.n	8000a8c <lcd_show_char+0x244>
        return;
 8000a86:	bf00      	nop
 8000a88:	e000      	b.n	8000a8c <lcd_show_char+0x244>
            return ;
 8000a8a:	bf00      	nop
            }
        }
    }
}
 8000a8c:	371c      	adds	r7, #28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd90      	pop	{r4, r7, pc}
 8000a92:	bf00      	nop
 8000a94:	08008074 	.word	0x08008074
 8000a98:	080084e8 	.word	0x080084e8
 8000a9c:	08008ad8 	.word	0x08008ad8
 8000aa0:	08009ca8 	.word	0x08009ca8
 8000aa4:	20000000 	.word	0x20000000

08000aa8 <lcd_show_string>:
 * @param   size        : Choose 12/16/24/32
 * @param   p           : The first address of the string
 * @retval  None.
 */
void lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af02      	add	r7, sp, #8
 8000aae:	4604      	mov	r4, r0
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4623      	mov	r3, r4
 8000ab8:	80fb      	strh	r3, [r7, #6]
 8000aba:	4603      	mov	r3, r0
 8000abc:	80bb      	strh	r3, [r7, #4]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	807b      	strh	r3, [r7, #2]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 8000ac6:	88fb      	ldrh	r3, [r7, #6]
 8000ac8:	73fb      	strb	r3, [r7, #15]
    width += x;
 8000aca:	887a      	ldrh	r2, [r7, #2]
 8000acc:	88fb      	ldrh	r3, [r7, #6]
 8000ace:	4413      	add	r3, r2
 8000ad0:	807b      	strh	r3, [r7, #2]
    height += y;
 8000ad2:	883a      	ldrh	r2, [r7, #0]
 8000ad4:	88bb      	ldrh	r3, [r7, #4]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))   /* Check whether it is an illegal character! */
 8000ada:	e027      	b.n	8000b2c <lcd_show_string+0x84>
    {
        if (x >= width)
 8000adc:	88fa      	ldrh	r2, [r7, #6]
 8000ade:	887b      	ldrh	r3, [r7, #2]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d307      	bcc.n	8000af4 <lcd_show_string+0x4c>
        {
            x = x0;
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	80fb      	strh	r3, [r7, #6]
            y += size;
 8000ae8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	88bb      	ldrh	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break;           /* Quit */
 8000af4:	88ba      	ldrh	r2, [r7, #4]
 8000af6:	883b      	ldrh	r3, [r7, #0]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d220      	bcs.n	8000b3e <lcd_show_string+0x96>

        lcd_show_char(x, y, *p, size, 0, color);
 8000afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afe:	781a      	ldrb	r2, [r3, #0]
 8000b00:	f897 4020 	ldrb.w	r4, [r7, #32]
 8000b04:	88b9      	ldrh	r1, [r7, #4]
 8000b06:	88f8      	ldrh	r0, [r7, #6]
 8000b08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	4623      	mov	r3, r4
 8000b12:	f7ff fe99 	bl	8000848 <lcd_show_char>
        x += size / 2;
 8000b16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b1a:	085b      	lsrs	r3, r3, #1
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	4413      	add	r3, r2
 8000b24:	80fb      	strh	r3, [r7, #6]
        p++;
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	3301      	adds	r3, #1
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
    while ((*p <= '~') && (*p >= ' '))   /* Check whether it is an illegal character! */
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b7e      	cmp	r3, #126	; 0x7e
 8000b32:	d805      	bhi.n	8000b40 <lcd_show_string+0x98>
 8000b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b1f      	cmp	r3, #31
 8000b3a:	d8cf      	bhi.n	8000adc <lcd_show_string+0x34>
    }
}
 8000b3c:	e000      	b.n	8000b40 <lcd_show_string+0x98>
        if (y >= height)break;           /* Quit */
 8000b3e:	bf00      	nop
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd90      	pop	{r4, r7, pc}

08000b48 <lcd_init>:
 * @brief   LCD initialization
 * @remark  None.
 * @retval  None.
 */
void lcd_init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
    lcd_gpio_init();            /* Hardware interface initialization */
 8000b4c:	f7ff fd34 	bl	80005b8 <lcd_gpio_init>

    HAL_Delay(120);
 8000b50:	2078      	movs	r0, #120	; 0x78
 8000b52:	f000 fe3b 	bl	80017cc <HAL_Delay>
    /* Sleep Out */
    lcd_write_cmd(0x11);
 8000b56:	2011      	movs	r0, #17
 8000b58:	f7ff fd98 	bl	800068c <lcd_write_cmd>
    /* wait for power stability */
    HAL_Delay(120);
 8000b5c:	2078      	movs	r0, #120	; 0x78
 8000b5e:	f000 fe35 	bl	80017cc <HAL_Delay>

    /* Memory Data Access Control */
    lcd_write_cmd(0x36);
 8000b62:	2036      	movs	r0, #54	; 0x36
 8000b64:	f7ff fd92 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0x00);
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f7ff fda5 	bl	80006b8 <lcd_write_data>

    /* RGB 5-6-5-bit  */
    lcd_write_cmd(0x3A);
 8000b6e:	203a      	movs	r0, #58	; 0x3a
 8000b70:	f7ff fd8c 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0x65);
 8000b74:	2065      	movs	r0, #101	; 0x65
 8000b76:	f7ff fd9f 	bl	80006b8 <lcd_write_data>

    /* Porch Setting */
    lcd_write_cmd(0xB2);
 8000b7a:	20b2      	movs	r0, #178	; 0xb2
 8000b7c:	f7ff fd86 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0x0C);
 8000b80:	200c      	movs	r0, #12
 8000b82:	f7ff fd99 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x0C);
 8000b86:	200c      	movs	r0, #12
 8000b88:	f7ff fd96 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x00);
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f7ff fd93 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x33);
 8000b92:	2033      	movs	r0, #51	; 0x33
 8000b94:	f7ff fd90 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x33);
 8000b98:	2033      	movs	r0, #51	; 0x33
 8000b9a:	f7ff fd8d 	bl	80006b8 <lcd_write_data>

    /*  Gate Control */
    lcd_write_cmd(0xB7);
 8000b9e:	20b7      	movs	r0, #183	; 0xb7
 8000ba0:	f7ff fd74 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0x72);
 8000ba4:	2072      	movs	r0, #114	; 0x72
 8000ba6:	f7ff fd87 	bl	80006b8 <lcd_write_data>

    /* VCOM Setting */
    lcd_write_cmd(0xBB);
 8000baa:	20bb      	movs	r0, #187	; 0xbb
 8000bac:	f7ff fd6e 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0x3D);
 8000bb0:	203d      	movs	r0, #61	; 0x3d
 8000bb2:	f7ff fd81 	bl	80006b8 <lcd_write_data>

    /* LCM Control */
    lcd_write_cmd(0xC0);
 8000bb6:	20c0      	movs	r0, #192	; 0xc0
 8000bb8:	f7ff fd68 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0x2C);
 8000bbc:	202c      	movs	r0, #44	; 0x2c
 8000bbe:	f7ff fd7b 	bl	80006b8 <lcd_write_data>

    /* VDV and VRH Command Enable */
    lcd_write_cmd(0xC2);
 8000bc2:	20c2      	movs	r0, #194	; 0xc2
 8000bc4:	f7ff fd62 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0x01);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f7ff fd75 	bl	80006b8 <lcd_write_data>

    /* VRH Set */
    lcd_write_cmd(0xC3);
 8000bce:	20c3      	movs	r0, #195	; 0xc3
 8000bd0:	f7ff fd5c 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0x19);
 8000bd4:	2019      	movs	r0, #25
 8000bd6:	f7ff fd6f 	bl	80006b8 <lcd_write_data>

    /* VDV Set */
    lcd_write_cmd(0xC4);
 8000bda:	20c4      	movs	r0, #196	; 0xc4
 8000bdc:	f7ff fd56 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0x20);
 8000be0:	2020      	movs	r0, #32
 8000be2:	f7ff fd69 	bl	80006b8 <lcd_write_data>

    /* Frame Rate Control in Normal Mode */
    lcd_write_cmd(0xC6);
 8000be6:	20c6      	movs	r0, #198	; 0xc6
 8000be8:	f7ff fd50 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0x0F);
 8000bec:	200f      	movs	r0, #15
 8000bee:	f7ff fd63 	bl	80006b8 <lcd_write_data>

    /* Power Control 1 */
    lcd_write_cmd(0xD0);
 8000bf2:	20d0      	movs	r0, #208	; 0xd0
 8000bf4:	f7ff fd4a 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0xA4);
 8000bf8:	20a4      	movs	r0, #164	; 0xa4
 8000bfa:	f7ff fd5d 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0xA1);
 8000bfe:	20a1      	movs	r0, #161	; 0xa1
 8000c00:	f7ff fd5a 	bl	80006b8 <lcd_write_data>

    /* Positive Voltage Gamma Control */
    lcd_write_cmd(0xE0);
 8000c04:	20e0      	movs	r0, #224	; 0xe0
 8000c06:	f7ff fd41 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0xD0);
 8000c0a:	20d0      	movs	r0, #208	; 0xd0
 8000c0c:	f7ff fd54 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x04);
 8000c10:	2004      	movs	r0, #4
 8000c12:	f7ff fd51 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x0D);
 8000c16:	200d      	movs	r0, #13
 8000c18:	f7ff fd4e 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x11);
 8000c1c:	2011      	movs	r0, #17
 8000c1e:	f7ff fd4b 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x13);
 8000c22:	2013      	movs	r0, #19
 8000c24:	f7ff fd48 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x2B);
 8000c28:	202b      	movs	r0, #43	; 0x2b
 8000c2a:	f7ff fd45 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x3F);
 8000c2e:	203f      	movs	r0, #63	; 0x3f
 8000c30:	f7ff fd42 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x54);
 8000c34:	2054      	movs	r0, #84	; 0x54
 8000c36:	f7ff fd3f 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x4C);
 8000c3a:	204c      	movs	r0, #76	; 0x4c
 8000c3c:	f7ff fd3c 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x18);
 8000c40:	2018      	movs	r0, #24
 8000c42:	f7ff fd39 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x0D);
 8000c46:	200d      	movs	r0, #13
 8000c48:	f7ff fd36 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x0B);
 8000c4c:	200b      	movs	r0, #11
 8000c4e:	f7ff fd33 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x1F);
 8000c52:	201f      	movs	r0, #31
 8000c54:	f7ff fd30 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x23);
 8000c58:	2023      	movs	r0, #35	; 0x23
 8000c5a:	f7ff fd2d 	bl	80006b8 <lcd_write_data>

    /* Negative Voltage Gamma Control */
    lcd_write_cmd(0xE1);
 8000c5e:	20e1      	movs	r0, #225	; 0xe1
 8000c60:	f7ff fd14 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0xD0);
 8000c64:	20d0      	movs	r0, #208	; 0xd0
 8000c66:	f7ff fd27 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x04);
 8000c6a:	2004      	movs	r0, #4
 8000c6c:	f7ff fd24 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x0C);
 8000c70:	200c      	movs	r0, #12
 8000c72:	f7ff fd21 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x11);
 8000c76:	2011      	movs	r0, #17
 8000c78:	f7ff fd1e 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x13);
 8000c7c:	2013      	movs	r0, #19
 8000c7e:	f7ff fd1b 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x2C);
 8000c82:	202c      	movs	r0, #44	; 0x2c
 8000c84:	f7ff fd18 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x3F);
 8000c88:	203f      	movs	r0, #63	; 0x3f
 8000c8a:	f7ff fd15 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x44);
 8000c8e:	2044      	movs	r0, #68	; 0x44
 8000c90:	f7ff fd12 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x51);
 8000c94:	2051      	movs	r0, #81	; 0x51
 8000c96:	f7ff fd0f 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x2F);
 8000c9a:	202f      	movs	r0, #47	; 0x2f
 8000c9c:	f7ff fd0c 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x1F);
 8000ca0:	201f      	movs	r0, #31
 8000ca2:	f7ff fd09 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x1F);
 8000ca6:	201f      	movs	r0, #31
 8000ca8:	f7ff fd06 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x20);
 8000cac:	2020      	movs	r0, #32
 8000cae:	f7ff fd03 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x23);
 8000cb2:	2023      	movs	r0, #35	; 0x23
 8000cb4:	f7ff fd00 	bl	80006b8 <lcd_write_data>

    /* Display Inversion On */
    lcd_write_cmd(0x21);
 8000cb8:	2021      	movs	r0, #33	; 0x21
 8000cba:	f7ff fce7 	bl	800068c <lcd_write_cmd>

    lcd_write_cmd(0x29);
 8000cbe:	2029      	movs	r0, #41	; 0x29
 8000cc0:	f7ff fce4 	bl	800068c <lcd_write_cmd>

    lcd_address_set(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 8000cc4:	23ef      	movs	r3, #239	; 0xef
 8000cc6:	22ef      	movs	r2, #239	; 0xef
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fd2a 	bl	8000724 <lcd_address_set>

    lcd_clear(WHITE);
 8000cd0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000cd4:	f7ff fd72 	bl	80007bc <lcd_clear>

    LCD_PWR(1);                 /* Enable display */
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2102      	movs	r1, #2
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <lcd_init+0x1a0>)
 8000cde:	f001 f89f 	bl	8001e20 <HAL_GPIO_WritePin>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	42020000 	.word	0x42020000

08000cec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d02:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <MX_GPIO_Init+0xc0>)
 8000d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d08:	4a28      	ldr	r2, [pc, #160]	; (8000dac <MX_GPIO_Init+0xc0>)
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d12:	4b26      	ldr	r3, [pc, #152]	; (8000dac <MX_GPIO_Init+0xc0>)
 8000d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d18:	f003 0304 	and.w	r3, r3, #4
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <MX_GPIO_Init+0xc0>)
 8000d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d26:	4a21      	ldr	r2, [pc, #132]	; (8000dac <MX_GPIO_Init+0xc0>)
 8000d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <MX_GPIO_Init+0xc0>)
 8000d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <MX_GPIO_Init+0xc0>)
 8000d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d44:	4a19      	ldr	r2, [pc, #100]	; (8000dac <MX_GPIO_Init+0xc0>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <MX_GPIO_Init+0xc0>)
 8000d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_PWR_Pin|LCD_RST_Pin|LCD_WR_Pin|LCD_CS_Pin
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8000d62:	4813      	ldr	r0, [pc, #76]	; (8000db0 <MX_GPIO_Init+0xc4>)
 8000d64:	f001 f85c 	bl	8001e20 <HAL_GPIO_WritePin>
                          |LED_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_PWR_Pin|LCD_RST_Pin|LCD_WR_Pin|LCD_CS_Pin;
 8000d68:	231e      	movs	r3, #30
 8000d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480c      	ldr	r0, [pc, #48]	; (8000db0 <MX_GPIO_Init+0xc4>)
 8000d80:	f000 fefc 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <MX_GPIO_Init+0xc4>)
 8000d9e:	f000 feed 	bl	8001b7c <HAL_GPIO_Init>

}
 8000da2:	bf00      	nop
 8000da4:	3720      	adds	r7, #32
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	44020c00 	.word	0x44020c00
 8000db0:	42020000 	.word	0x42020000

08000db4 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000db8:	f001 f864 	bl	8001e84 <HAL_ICACHE_Enable>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000dc2:	f000 f8d9 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <stm32h503cb_show_mesg>:
 * @brief   Displays information about the experiment
 * @param   None
 * @retval  None
 */
void stm32h503cb_show_mesg(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	/* The serial port outputs the experimental information */
	printf("\n");
 8000dd0:	200a      	movs	r0, #10
 8000dd2:	f006 fcdd 	bl	8007790 <putchar>
	printf("********************************\r\n");
 8000dd6:	480a      	ldr	r0, [pc, #40]	; (8000e00 <stm32h503cb_show_mesg+0x34>)
 8000dd8:	f006 fd36 	bl	8007848 <puts>
	printf("STM32H503\r\n");
 8000ddc:	4809      	ldr	r0, [pc, #36]	; (8000e04 <stm32h503cb_show_mesg+0x38>)
 8000dde:	f006 fd33 	bl	8007848 <puts>
	printf("ATK-MD0130 Test\r\n");
 8000de2:	4809      	ldr	r0, [pc, #36]	; (8000e08 <stm32h503cb_show_mesg+0x3c>)
 8000de4:	f006 fd30 	bl	8007848 <puts>
	printf("ATOM@ALIENTEK\r\n");
 8000de8:	4808      	ldr	r0, [pc, #32]	; (8000e0c <stm32h503cb_show_mesg+0x40>)
 8000dea:	f006 fd2d 	bl	8007848 <puts>
	printf("********************************\r\n");
 8000dee:	4804      	ldr	r0, [pc, #16]	; (8000e00 <stm32h503cb_show_mesg+0x34>)
 8000df0:	f006 fd2a 	bl	8007848 <puts>
	printf("\r\n");
 8000df4:	4806      	ldr	r0, [pc, #24]	; (8000e10 <stm32h503cb_show_mesg+0x44>)
 8000df6:	f006 fd27 	bl	8007848 <puts>
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	08007ff0 	.word	0x08007ff0
 8000e04:	08008014 	.word	0x08008014
 8000e08:	08008020 	.word	0x08008020
 8000e0c:	08008034 	.word	0x08008034
 8000e10:	08008044 	.word	0x08008044

08000e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1a:	f000 fc5b 	bl	80016d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1e:	f000 f845 	bl	8000eac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e22:	f7ff ff63 	bl	8000cec <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000e26:	f7ff ffc5 	bl	8000db4 <MX_ICACHE_Init>
  MX_SPI1_Init();
 8000e2a:	f000 f8ab 	bl	8000f84 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000e2e:	f000 faf3 	bl	8001418 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  stm32h503cb_show_mesg();
 8000e32:	f7ff ffcb 	bl	8000dcc <stm32h503cb_show_mesg>
  lcd_init();
 8000e36:	f7ff fe87 	bl	8000b48 <lcd_init>
  lcd_show_string(0, 5, 240, 32, 32, "STM32H503CBT6", RED);
 8000e3a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e3e:	9302      	str	r3, [sp, #8]
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <main+0x88>)
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	2320      	movs	r3, #32
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2320      	movs	r3, #32
 8000e4a:	22f0      	movs	r2, #240	; 0xf0
 8000e4c:	2105      	movs	r1, #5
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fe2a 	bl	8000aa8 <lcd_show_string>
  lcd_show_string(0, 34, 240, 24, 24, "ATK-MD0130", RED);
 8000e54:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e58:	9302      	str	r3, [sp, #8]
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <main+0x8c>)
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	2318      	movs	r3, #24
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2318      	movs	r3, #24
 8000e64:	22f0      	movs	r2, #240	; 0xf0
 8000e66:	2122      	movs	r1, #34	; 0x22
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f7ff fe1d 	bl	8000aa8 <lcd_show_string>
  lcd_show_string(0, 60, 240, 16, 16, "ATOM@ALIENTEK", RED);
 8000e6e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e72:	9302      	str	r3, [sp, #8]
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <main+0x90>)
 8000e76:	9301      	str	r3, [sp, #4]
 8000e78:	2310      	movs	r3, #16
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	22f0      	movs	r2, #240	; 0xf0
 8000e80:	213c      	movs	r1, #60	; 0x3c
 8000e82:	2000      	movs	r0, #0
 8000e84:	f7ff fe10 	bl	8000aa8 <lcd_show_string>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LED_TOGGLE();       /* LED state is flipped */
 8000e88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e8c:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <main+0x94>)
 8000e8e:	f000 ffdf 	bl	8001e50 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000e92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e96:	f000 fc99 	bl	80017cc <HAL_Delay>
	  LED_TOGGLE();       /* LED state is flipped */
 8000e9a:	e7f5      	b.n	8000e88 <main+0x74>
 8000e9c:	08008048 	.word	0x08008048
 8000ea0:	08008058 	.word	0x08008058
 8000ea4:	08008064 	.word	0x08008064
 8000ea8:	42020000 	.word	0x42020000

08000eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b09c      	sub	sp, #112	; 0x70
 8000eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb2:	f107 0320 	add.w	r3, r7, #32
 8000eb6:	2250      	movs	r2, #80	; 0x50
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f006 fda4 	bl	8007a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
 8000ed0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ed2:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <SystemClock_Config+0xc8>)
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	4a27      	ldr	r2, [pc, #156]	; (8000f74 <SystemClock_Config+0xc8>)
 8000ed8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000edc:	6113      	str	r3, [r2, #16]
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <SystemClock_Config+0xc8>)
 8000ee0:	691b      	ldr	r3, [r3, #16]
 8000ee2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000eea:	bf00      	nop
 8000eec:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <SystemClock_Config+0xc8>)
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	f003 0308 	and.w	r3, r3, #8
 8000ef4:	2b08      	cmp	r3, #8
 8000ef6:	d1f9      	bne.n	8000eec <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000efc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f02:	2302      	movs	r3, #2
 8000f04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000f06:	2303      	movs	r3, #3
 8000f08:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000f0e:	23fa      	movs	r3, #250	; 0xfa
 8000f10:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f16:	2302      	movs	r3, #2
 8000f18:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000f1e:	2304      	movs	r3, #4
 8000f20:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 ffb8 	bl	8001ea4 <HAL_RCC_OscConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f3a:	f000 f81d 	bl	8000f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3e:	231f      	movs	r3, #31
 8000f40:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f42:	2303      	movs	r3, #3
 8000f44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	2105      	movs	r1, #5
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f001 fbd9 	bl	8002714 <HAL_RCC_ClockConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f68:	f000 f806 	bl	8000f78 <Error_Handler>
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3770      	adds	r7, #112	; 0x70
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	44020800 	.word	0x44020800

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <Error_Handler+0x8>
	...

08000f84 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f88:	4b27      	ldr	r3, [pc, #156]	; (8001028 <MX_SPI1_Init+0xa4>)
 8000f8a:	4a28      	ldr	r2, [pc, #160]	; (800102c <MX_SPI1_Init+0xa8>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f8e:	4b26      	ldr	r3, [pc, #152]	; (8001028 <MX_SPI1_Init+0xa4>)
 8000f90:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f96:	4b24      	ldr	r3, [pc, #144]	; (8001028 <MX_SPI1_Init+0xa4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f9c:	4b22      	ldr	r3, [pc, #136]	; (8001028 <MX_SPI1_Init+0xa4>)
 8000f9e:	2207      	movs	r2, #7
 8000fa0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fa2:	4b21      	ldr	r3, [pc, #132]	; (8001028 <MX_SPI1_Init+0xa4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <MX_SPI1_Init+0xa4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fae:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <MX_SPI1_Init+0xa4>)
 8000fb0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <MX_SPI1_Init+0xa4>)
 8000fb8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000fbc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <MX_SPI1_Init+0xa4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <MX_SPI1_Init+0xa4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MX_SPI1_Init+0xa4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <MX_SPI1_Init+0xa4>)
 8000fd2:	2207      	movs	r2, #7
 8000fd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_SPI1_Init+0xa4>)
 8000fd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fdc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_SPI1_Init+0xa4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <MX_SPI1_Init+0xa4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_SPI1_Init+0xa4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <MX_SPI1_Init+0xa4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_SPI1_Init+0xa4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <MX_SPI1_Init+0xa4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_SPI1_Init+0xa4>)
 8001004:	2200      	movs	r2, #0
 8001006:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <MX_SPI1_Init+0xa4>)
 800100a:	2200      	movs	r2, #0
 800100c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_SPI1_Init+0xa4>)
 8001010:	2200      	movs	r2, #0
 8001012:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_SPI1_Init+0xa4>)
 8001016:	f003 ff8d 	bl	8004f34 <HAL_SPI_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001020:	f7ff ffaa 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000508 	.word	0x20000508
 800102c:	40013000 	.word	0x40013000

08001030 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b0ac      	sub	sp, #176	; 0xb0
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	2288      	movs	r2, #136	; 0x88
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f006 fcd9 	bl	8007a08 <memset>
  if(spiHandle->Instance==SPI1)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a30      	ldr	r2, [pc, #192]	; (800111c <HAL_SPI_MspInit+0xec>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d159      	bne.n	8001114 <HAL_SPI_MspInit+0xe4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001060:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 800106c:	2300      	movs	r3, #0
 800106e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	4618      	mov	r0, r3
 8001076:	f001 fe8f 	bl	8002d98 <HAL_RCCEx_PeriphCLKConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001080:	f7ff ff7a 	bl	8000f78 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001084:	4b26      	ldr	r3, [pc, #152]	; (8001120 <HAL_SPI_MspInit+0xf0>)
 8001086:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800108a:	4a25      	ldr	r2, [pc, #148]	; (8001120 <HAL_SPI_MspInit+0xf0>)
 800108c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001090:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001094:	4b22      	ldr	r3, [pc, #136]	; (8001120 <HAL_SPI_MspInit+0xf0>)
 8001096:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800109a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <HAL_SPI_MspInit+0xf0>)
 80010a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010a8:	4a1d      	ldr	r2, [pc, #116]	; (8001120 <HAL_SPI_MspInit+0xf0>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <HAL_SPI_MspInit+0xf0>)
 80010b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA0     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010c0:	2301      	movs	r3, #1
 80010c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SPI1;
 80010d8:	230c      	movs	r3, #12
 80010da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010e2:	4619      	mov	r1, r3
 80010e4:	480f      	ldr	r0, [pc, #60]	; (8001124 <HAL_SPI_MspInit+0xf4>)
 80010e6:	f000 fd49 	bl	8001b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 80010ea:	23a0      	movs	r3, #160	; 0xa0
 80010ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001102:	2305      	movs	r3, #5
 8001104:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800110c:	4619      	mov	r1, r3
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <HAL_SPI_MspInit+0xf4>)
 8001110:	f000 fd34 	bl	8001b7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001114:	bf00      	nop
 8001116:	37b0      	adds	r7, #176	; 0xb0
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40013000 	.word	0x40013000
 8001120:	44020c00 	.word	0x44020c00
 8001124:	42020000 	.word	0x42020000

08001128 <spi1_write_data>:
  * @param  tx_data: pointer to data buffer
  * @param  Size   : amount of data to be sent
  * @retval None.
  */
void spi1_write_data(uint8_t *tx_data, uint16_t size)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, tx_data, size, HAL_MAX_DELAY);
 8001134:	887a      	ldrh	r2, [r7, #2]
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <spi1_write_data+0x24>)
 800113e:	f003 fff5 	bl	800512c <HAL_SPI_Transmit>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000508 	.word	0x20000508

08001150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001162:	e7fe      	b.n	8001162 <NMI_Handler+0x4>

08001164 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <HardFault_Handler+0x4>

0800116a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <MemManage_Handler+0x4>

08001170 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <BusFault_Handler+0x4>

08001176 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <UsageFault_Handler+0x4>

0800117c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011aa:	f000 faef 	bl	800178c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <USART1_IRQHandler+0x10>)
 80011ba:	f004 fbf9 	bl	80059b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000066c 	.word	0x2000066c

080011c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	e00a      	b.n	80011f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011da:	f3af 8000 	nop.w
 80011de:	4601      	mov	r1, r0
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	60ba      	str	r2, [r7, #8]
 80011e6:	b2ca      	uxtb	r2, r1
 80011e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	3301      	adds	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	dbf0      	blt.n	80011da <_read+0x12>
  }

  return len;
 80011f8:	687b      	ldr	r3, [r7, #4]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	e009      	b.n	8001228 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	60ba      	str	r2, [r7, #8]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f000 f8e9 	bl	80013f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3301      	adds	r3, #1
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	429a      	cmp	r2, r3
 800122e:	dbf1      	blt.n	8001214 <_write+0x12>
  }
  return len;
 8001230:	687b      	ldr	r3, [r7, #4]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <_close>:

int _close(int file)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001262:	605a      	str	r2, [r3, #4]
  return 0;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <_isatty>:

int _isatty(int file)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <_sbrk+0x5c>)
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <_sbrk+0x60>)
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <_sbrk+0x64>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <_sbrk+0x68>)
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d207      	bcs.n	80012e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d4:	f006 fbe6 	bl	8007aa4 <__errno>
 80012d8:	4603      	mov	r3, r0
 80012da:	220c      	movs	r2, #12
 80012dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	e009      	b.n	80012f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <_sbrk+0x64>)
 80012f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20008000 	.word	0x20008000
 8001304:	00000400 	.word	0x00000400
 8001308:	20000598 	.word	0x20000598
 800130c:	20000850 	.word	0x20000850

08001310 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001316:	4b30      	ldr	r3, [pc, #192]	; (80013d8 <SystemInit+0xc8>)
 8001318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131c:	4a2e      	ldr	r2, [pc, #184]	; (80013d8 <SystemInit+0xc8>)
 800131e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001322:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001326:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <SystemInit+0xcc>)
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800132c:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <SystemInit+0xcc>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001332:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <SystemInit+0xcc>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001338:	4b28      	ldr	r3, [pc, #160]	; (80013dc <SystemInit+0xcc>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4927      	ldr	r1, [pc, #156]	; (80013dc <SystemInit+0xcc>)
 800133e:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <SystemInit+0xd0>)
 8001340:	4013      	ands	r3, r2
 8001342:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001344:	4b25      	ldr	r3, [pc, #148]	; (80013dc <SystemInit+0xcc>)
 8001346:	2200      	movs	r2, #0
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 800134a:	4b24      	ldr	r3, [pc, #144]	; (80013dc <SystemInit+0xcc>)
 800134c:	2200      	movs	r2, #0
 800134e:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <SystemInit+0xcc>)
 8001352:	4a24      	ldr	r2, [pc, #144]	; (80013e4 <SystemInit+0xd4>)
 8001354:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <SystemInit+0xcc>)
 8001358:	2200      	movs	r2, #0
 800135a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <SystemInit+0xcc>)
 800135e:	4a21      	ldr	r2, [pc, #132]	; (80013e4 <SystemInit+0xd4>)
 8001360:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001362:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <SystemInit+0xcc>)
 8001364:	2200      	movs	r2, #0
 8001366:	641a      	str	r2, [r3, #64]	; 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <SystemInit+0xcc>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a1b      	ldr	r2, [pc, #108]	; (80013dc <SystemInit+0xcc>)
 800136e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001372:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <SystemInit+0xcc>)
 8001376:	2200      	movs	r2, #0
 8001378:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <SystemInit+0xc8>)
 800137c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001380:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <SystemInit+0xd8>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800138a:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8001392:	d003      	beq.n	800139c <SystemInit+0x8c>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800139a:	d117      	bne.n	80013cc <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <SystemInit+0xd8>)
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d005      	beq.n	80013b4 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <SystemInit+0xd8>)
 80013aa:	4a10      	ldr	r2, [pc, #64]	; (80013ec <SystemInit+0xdc>)
 80013ac:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <SystemInit+0xd8>)
 80013b0:	4a0f      	ldr	r2, [pc, #60]	; (80013f0 <SystemInit+0xe0>)
 80013b2:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <SystemInit+0xd8>)
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <SystemInit+0xd8>)
 80013ba:	f043 0302 	orr.w	r3, r3, #2
 80013be:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <SystemInit+0xd8>)
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <SystemInit+0xd8>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	61d3      	str	r3, [r2, #28]
  }
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00
 80013dc:	44020c00 	.word	0x44020c00
 80013e0:	fae2eae3 	.word	0xfae2eae3
 80013e4:	01010280 	.word	0x01010280
 80013e8:	40022000 	.word	0x40022000
 80013ec:	08192a3b 	.word	0x08192a3b
 80013f0:	4c5d6e7f 	.word	0x4c5d6e7f

080013f4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80013fc:	1d39      	adds	r1, r7, #4
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	2201      	movs	r2, #1
 8001404:	4803      	ldr	r0, [pc, #12]	; (8001414 <__io_putchar+0x20>)
 8001406:	f004 f9da 	bl	80057be <HAL_UART_Transmit>
	return ch;
 800140a:	687b      	ldr	r3, [r7, #4]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	2000066c 	.word	0x2000066c

08001418 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800141c:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <MX_USART1_UART_Init+0x9c>)
 800141e:	4a26      	ldr	r2, [pc, #152]	; (80014b8 <MX_USART1_UART_Init+0xa0>)
 8001420:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001422:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <MX_USART1_UART_Init+0x9c>)
 8001424:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001428:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <MX_USART1_UART_Init+0x9c>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001430:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <MX_USART1_UART_Init+0x9c>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001436:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <MX_USART1_UART_Init+0x9c>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <MX_USART1_UART_Init+0x9c>)
 800143e:	220c      	movs	r2, #12
 8001440:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <MX_USART1_UART_Init+0x9c>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <MX_USART1_UART_Init+0x9c>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <MX_USART1_UART_Init+0x9c>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_USART1_UART_Init+0x9c>)
 8001456:	2200      	movs	r2, #0
 8001458:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MX_USART1_UART_Init+0x9c>)
 800145c:	2200      	movs	r2, #0
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001460:	4814      	ldr	r0, [pc, #80]	; (80014b4 <MX_USART1_UART_Init+0x9c>)
 8001462:	f004 f95c 	bl	800571e <HAL_UART_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800146c:	f7ff fd84 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001470:	2100      	movs	r1, #0
 8001472:	4810      	ldr	r0, [pc, #64]	; (80014b4 <MX_USART1_UART_Init+0x9c>)
 8001474:	f005 ffff 	bl	8007476 <HAL_UARTEx_SetTxFifoThreshold>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800147e:	f7ff fd7b 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001482:	2100      	movs	r1, #0
 8001484:	480b      	ldr	r0, [pc, #44]	; (80014b4 <MX_USART1_UART_Init+0x9c>)
 8001486:	f006 f834 	bl	80074f2 <HAL_UARTEx_SetRxFifoThreshold>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001490:	f7ff fd72 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001494:	4807      	ldr	r0, [pc, #28]	; (80014b4 <MX_USART1_UART_Init+0x9c>)
 8001496:	f005 ffb5 	bl	8007404 <HAL_UARTEx_DisableFifoMode>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80014a0:	f7ff fd6a 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* This function enables the receive interrupt: flag UART_IT_RXNE and sets
   * the receive buffer and the maximum amount of data the receive buffer can receive */
    HAL_UART_Receive_IT(&huart1, (uint8_t *)g_rx_buffer, RXBUFFERSIZE);
 80014a4:	2201      	movs	r2, #1
 80014a6:	4905      	ldr	r1, [pc, #20]	; (80014bc <MX_USART1_UART_Init+0xa4>)
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <MX_USART1_UART_Init+0x9c>)
 80014aa:	f004 fa27 	bl	80058fc <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	2000066c 	.word	0x2000066c
 80014b8:	40013800 	.word	0x40013800
 80014bc:	20000668 	.word	0x20000668

080014c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b0ac      	sub	sp, #176	; 0xb0
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	2288      	movs	r2, #136	; 0x88
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f006 fa91 	bl	8007a08 <memset>
  if(uartHandle->Instance==USART1)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a35      	ldr	r2, [pc, #212]	; (80015c0 <HAL_UART_MspInit+0x100>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d163      	bne.n	80015b8 <HAL_UART_MspInit+0xf8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014f0:	f04f 0201 	mov.w	r2, #1
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014fc:	2300      	movs	r3, #0
 80014fe:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	4618      	mov	r0, r3
 8001506:	f001 fc47 	bl	8002d98 <HAL_RCCEx_PeriphCLKConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001510:	f7ff fd32 	bl	8000f78 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001514:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <HAL_UART_MspInit+0x104>)
 8001516:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800151a:	4a2a      	ldr	r2, [pc, #168]	; (80015c4 <HAL_UART_MspInit+0x104>)
 800151c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001520:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001524:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <HAL_UART_MspInit+0x104>)
 8001526:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800152a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <HAL_UART_MspInit+0x104>)
 8001534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001538:	4a22      	ldr	r2, [pc, #136]	; (80015c4 <HAL_UART_MspInit+0x104>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001542:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <HAL_UART_MspInit+0x104>)
 8001544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001554:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001564:	2302      	movs	r3, #2
 8001566:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800156a:	2307      	movs	r3, #7
 800156c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001574:	4619      	mov	r1, r3
 8001576:	4814      	ldr	r0, [pc, #80]	; (80015c8 <HAL_UART_MspInit+0x108>)
 8001578:	f000 fb00 	bl	8001b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800157c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001580:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001596:	2307      	movs	r3, #7
 8001598:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015a0:	4619      	mov	r1, r3
 80015a2:	4809      	ldr	r0, [pc, #36]	; (80015c8 <HAL_UART_MspInit+0x108>)
 80015a4:	f000 faea 	bl	8001b7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2103      	movs	r1, #3
 80015ac:	203a      	movs	r0, #58	; 0x3a
 80015ae:	f000 fa0c 	bl	80019ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015b2:	203a      	movs	r0, #58	; 0x3a
 80015b4:	f000 fa23 	bl	80019fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015b8:	bf00      	nop
 80015ba:	37b0      	adds	r7, #176	; 0xb0
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40013800 	.word	0x40013800
 80015c4:	44020c00 	.word	0x44020c00
 80015c8:	42020000 	.word	0x42020000

080015cc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)                      /* if it is serial port USART1 */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a24      	ldr	r2, [pc, #144]	; (800166c <HAL_UART_RxCpltCallback+0xa0>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d142      	bne.n	8001664 <HAL_UART_RxCpltCallback+0x98>
    {
        if ((g_usart_rx_sta & 0x8000) == 0)             /* receipt not completed */
 80015de:	4b24      	ldr	r3, [pc, #144]	; (8001670 <HAL_UART_RxCpltCallback+0xa4>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db38      	blt.n	800165a <HAL_UART_RxCpltCallback+0x8e>
        {
            if (g_usart_rx_sta & 0x4000)                /* 0x0d has been received (the Enter key). */
 80015e8:	4b21      	ldr	r3, [pc, #132]	; (8001670 <HAL_UART_RxCpltCallback+0xa4>)
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d011      	beq.n	8001618 <HAL_UART_RxCpltCallback+0x4c>
            {
                if (g_rx_buffer[0] != 0x0a)             /* this is not 0x0a (that is, not a newline key) */
 80015f4:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <HAL_UART_RxCpltCallback+0xa8>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b0a      	cmp	r3, #10
 80015fa:	d003      	beq.n	8001604 <HAL_UART_RxCpltCallback+0x38>
                {
                    g_usart_rx_sta = 0;                 /* receive error,restart */
 80015fc:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <HAL_UART_RxCpltCallback+0xa4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	801a      	strh	r2, [r3, #0]
 8001602:	e02a      	b.n	800165a <HAL_UART_RxCpltCallback+0x8e>
                }
                else                                    /* it gets 0x0a (the newline key) */
                {
                    g_usart_rx_sta |= 0x8000;           /* the reception is complete */
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <HAL_UART_RxCpltCallback+0xa4>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800160c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001610:	b29a      	uxth	r2, r3
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_UART_RxCpltCallback+0xa4>)
 8001614:	801a      	strh	r2, [r3, #0]
 8001616:	e020      	b.n	800165a <HAL_UART_RxCpltCallback+0x8e>
                }
            }
            else                                        /* 0X0d has not been reached yet (the Enter key) */
            {
                if (g_rx_buffer[0] == 0x0d)
 8001618:	4b16      	ldr	r3, [pc, #88]	; (8001674 <HAL_UART_RxCpltCallback+0xa8>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b0d      	cmp	r3, #13
 800161e:	d107      	bne.n	8001630 <HAL_UART_RxCpltCallback+0x64>
                    g_usart_rx_sta |= 0x4000;
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <HAL_UART_RxCpltCallback+0xa4>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001628:	b29a      	uxth	r2, r3
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_UART_RxCpltCallback+0xa4>)
 800162c:	801a      	strh	r2, [r3, #0]
 800162e:	e014      	b.n	800165a <HAL_UART_RxCpltCallback+0x8e>
                else
                {
                    g_usart_rx_buf[g_usart_rx_sta & 0X3FFF] = g_rx_buffer[0];
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_UART_RxCpltCallback+0xa4>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001638:	4a0e      	ldr	r2, [pc, #56]	; (8001674 <HAL_UART_RxCpltCallback+0xa8>)
 800163a:	7811      	ldrb	r1, [r2, #0]
 800163c:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <HAL_UART_RxCpltCallback+0xac>)
 800163e:	54d1      	strb	r1, [r2, r3]
                    g_usart_rx_sta++;
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_UART_RxCpltCallback+0xa4>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	b29a      	uxth	r2, r3
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_UART_RxCpltCallback+0xa4>)
 800164a:	801a      	strh	r2, [r3, #0]

                    if (g_usart_rx_sta > (USART_REC_LEN - 1))
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_UART_RxCpltCallback+0xa4>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	2bc7      	cmp	r3, #199	; 0xc7
 8001652:	d902      	bls.n	800165a <HAL_UART_RxCpltCallback+0x8e>
                    {
                        g_usart_rx_sta = 0;             /* receive data error, start receive again */
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_UART_RxCpltCallback+0xa4>)
 8001656:	2200      	movs	r2, #0
 8001658:	801a      	strh	r2, [r3, #0]
                    }
                }
            }
        }

        HAL_UART_Receive_IT(&huart1, (uint8_t *)g_rx_buffer, RXBUFFERSIZE);
 800165a:	2201      	movs	r2, #1
 800165c:	4905      	ldr	r1, [pc, #20]	; (8001674 <HAL_UART_RxCpltCallback+0xa8>)
 800165e:	4807      	ldr	r0, [pc, #28]	; (800167c <HAL_UART_RxCpltCallback+0xb0>)
 8001660:	f004 f94c 	bl	80058fc <HAL_UART_Receive_IT>
    }
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40013800 	.word	0x40013800
 8001670:	20000664 	.word	0x20000664
 8001674:	20000668 	.word	0x20000668
 8001678:	2000059c 	.word	0x2000059c
 800167c:	2000066c 	.word	0x2000066c

08001680 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001684:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001686:	e003      	b.n	8001690 <LoopCopyDataInit>

08001688 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800168a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800168c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800168e:	3104      	adds	r1, #4

08001690 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001690:	480b      	ldr	r0, [pc, #44]	; (80016c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001694:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001696:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001698:	d3f6      	bcc.n	8001688 <CopyDataInit>
	ldr	r2, =_sbss
 800169a:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800169c:	e002      	b.n	80016a4 <LoopFillZerobss>

0800169e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800169e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016a0:	f842 3b04 	str.w	r3, [r2], #4

080016a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <LoopForever+0x16>)
	cmp	r2, r3
 80016a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016a8:	d3f9      	bcc.n	800169e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016aa:	f7ff fe31 	bl	8001310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ae:	f006 f9ff 	bl	8007ab0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016b2:	f7ff fbaf 	bl	8000e14 <main>

080016b6 <LoopForever>:

LoopForever:
    b LoopForever
 80016b6:	e7fe      	b.n	80016b6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80016b8:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 80016bc:	0800cc78 	.word	0x0800cc78
	ldr	r0, =_sdata
 80016c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016c4:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 80016c8:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 80016cc:	20000850 	.word	0x20000850

080016d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016d0:	e7fe      	b.n	80016d0 <ADC1_IRQHandler>
	...

080016d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d8:	2003      	movs	r0, #3
 80016da:	f000 f96b 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80016de:	f001 f9d1 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 80016e2:	4602      	mov	r2, r0
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_Init+0x40>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	490a      	ldr	r1, [pc, #40]	; (8001718 <HAL_Init+0x44>)
 80016ee:	5ccb      	ldrb	r3, [r1, r3]
 80016f0:	fa22 f303 	lsr.w	r3, r2, r3
 80016f4:	4a09      	ldr	r2, [pc, #36]	; (800171c <HAL_Init+0x48>)
 80016f6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016f8:	2001      	movs	r0, #1
 80016fa:	f000 f811 	bl	8001720 <HAL_InitTick>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e002      	b.n	800170e <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001708:	f7ff fd22 	bl	8001150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	44020c00 	.word	0x44020c00
 8001718:	0800cc28 	.word	0x0800cc28
 800171c:	20000004 	.word	0x20000004

08001720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_InitTick+0x60>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e021      	b.n	8001778 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <HAL_InitTick+0x64>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_InitTick+0x60>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001742:	fbb3 f3f1 	udiv	r3, r3, r1
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f965 	bl	8001a1a <HAL_SYSTICK_Config>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e00e      	b.n	8001778 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d80a      	bhi.n	8001776 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001760:	2200      	movs	r2, #0
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	f04f 30ff 	mov.w	r0, #4294967295
 8001768:	f000 f92f 	bl	80019ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800176c:	4a06      	ldr	r2, [pc, #24]	; (8001788 <HAL_InitTick+0x68>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e000      	b.n	8001778 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000000c 	.word	0x2000000c
 8001784:	20000004 	.word	0x20000004
 8001788:	20000008 	.word	0x20000008

0800178c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x20>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_IncTick+0x24>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4413      	add	r3, r2
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_IncTick+0x24>)
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	2000000c 	.word	0x2000000c
 80017b0:	20000700 	.word	0x20000700

080017b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return uwTick;
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_GetTick+0x14>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000700 	.word	0x20000700

080017cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff ffee 	bl	80017b4 <HAL_GetTick>
 80017d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e4:	d005      	beq.n	80017f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_Delay+0x44>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017f2:	bf00      	nop
 80017f4:	f7ff ffde 	bl	80017b4 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	429a      	cmp	r2, r3
 8001802:	d8f7      	bhi.n	80017f4 <HAL_Delay+0x28>
  {
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000000c 	.word	0x2000000c

08001814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001830:	4013      	ands	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800183c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <__NVIC_GetPriorityGrouping+0x18>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	f003 0307 	and.w	r3, r3, #7
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001886:	2b00      	cmp	r3, #0
 8001888:	db0b      	blt.n	80018a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	f003 021f 	and.w	r2, r3, #31
 8001890:	4907      	ldr	r1, [pc, #28]	; (80018b0 <__NVIC_EnableIRQ+0x38>)
 8001892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001896:	095b      	lsrs	r3, r3, #5
 8001898:	2001      	movs	r0, #1
 800189a:	fa00 f202 	lsl.w	r2, r0, r2
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000e100 	.word	0xe000e100

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	; (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001980:	d301      	bcc.n	8001986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001982:	2301      	movs	r3, #1
 8001984:	e00f      	b.n	80019a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <SysTick_Config+0x40>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198e:	210f      	movs	r1, #15
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f7ff ff8e 	bl	80018b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SysTick_Config+0x40>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SysTick_Config+0x40>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff29 	bl	8001814 <__NVIC_SetPriorityGrouping>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019d8:	f7ff ff40 	bl	800185c <__NVIC_GetPriorityGrouping>
 80019dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	6978      	ldr	r0, [r7, #20]
 80019e4:	f7ff ff90 	bl	8001908 <NVIC_EncodePriority>
 80019e8:	4602      	mov	r2, r0
 80019ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff5f 	bl	80018b4 <__NVIC_SetPriority>
}
 80019f6:	bf00      	nop
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff33 	bl	8001878 <__NVIC_EnableIRQ>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ffa4 	bl	8001970 <SysTick_Config>
 8001a28:	4603      	mov	r3, r0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001a3a:	f7ff febb 	bl	80017b4 <HAL_GetTick>
 8001a3e:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e06b      	b.n	8001b22 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d008      	beq.n	8001a68 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2220      	movs	r2, #32
 8001a5a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e05c      	b.n	8001b22 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0204 	orr.w	r2, r2, #4
 8001a76:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2205      	movs	r2, #5
 8001a7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001a80:	e020      	b.n	8001ac4 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001a82:	f7ff fe97 	bl	80017b4 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d919      	bls.n	8001ac4 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a94:	f043 0210 	orr.w	r2, r3, #16
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e02e      	b.n	8001b22 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0d7      	beq.n	8001a82 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695a      	ldr	r2, [r3, #20]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0202 	orr.w	r2, r2, #2
 8001ae0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8001af2:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d007      	beq.n	8001b18 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2200      	movs	r2, #0
 8001b16:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e019      	b.n	8001b70 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d004      	beq.n	8001b52 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00e      	b.n	8001b70 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2204      	movs	r2, #4
 8001b56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b68:	f043 0304 	orr.w	r3, r3, #4
 8001b6c:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001b8a:	e136      	b.n	8001dfa <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2101      	movs	r1, #1
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8128 	beq.w	8001df4 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d003      	beq.n	8001bb4 <HAL_GPIO_Init+0x38>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b12      	cmp	r3, #18
 8001bb2:	d125      	bne.n	8001c00 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	08da      	lsrs	r2, r3, #3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3208      	adds	r2, #8
 8001bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	220f      	movs	r2, #15
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	f003 020f 	and.w	r2, r3, #15
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	08da      	lsrs	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3208      	adds	r2, #8
 8001bfa:	6979      	ldr	r1, [r7, #20]
 8001bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	4013      	ands	r3, r2
 8001c16:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0203 	and.w	r2, r3, #3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d00b      	beq.n	8001c54 <HAL_GPIO_Init+0xd8>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d007      	beq.n	8001c54 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c48:	2b11      	cmp	r3, #17
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b12      	cmp	r3, #18
 8001c52:	d130      	bne.n	8001cb6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	4013      	ands	r3, r2
 8001c98:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	091b      	lsrs	r3, r3, #4
 8001ca0:	f003 0201 	and.w	r2, r3, #1
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d017      	beq.n	8001cee <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	2203      	movs	r2, #3
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d07c      	beq.n	8001df4 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001cfa:	4a47      	ldr	r2, [pc, #284]	; (8001e18 <HAL_GPIO_Init+0x29c>)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	089b      	lsrs	r3, r3, #2
 8001d00:	3318      	adds	r3, #24
 8001d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d06:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	220f      	movs	r2, #15
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	0a9a      	lsrs	r2, r3, #10
 8001d22:	4b3e      	ldr	r3, [pc, #248]	; (8001e1c <HAL_GPIO_Init+0x2a0>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	f002 0203 	and.w	r2, r2, #3
 8001d2c:	00d2      	lsls	r2, r2, #3
 8001d2e:	4093      	lsls	r3, r2
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001d36:	4938      	ldr	r1, [pc, #224]	; (8001e18 <HAL_GPIO_Init+0x29c>)
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3318      	adds	r3, #24
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001d44:	4b34      	ldr	r3, [pc, #208]	; (8001e18 <HAL_GPIO_Init+0x29c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	4013      	ands	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001d68:	4a2b      	ldr	r2, [pc, #172]	; (8001e18 <HAL_GPIO_Init+0x29c>)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001d6e:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <HAL_GPIO_Init+0x29c>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001d92:	4a21      	ldr	r2, [pc, #132]	; (8001e18 <HAL_GPIO_Init+0x29c>)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001d98:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <HAL_GPIO_Init+0x29c>)
 8001d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d9e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	4013      	ands	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001dbe:	4a16      	ldr	r2, [pc, #88]	; (8001e18 <HAL_GPIO_Init+0x29c>)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001dc6:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <HAL_GPIO_Init+0x29c>)
 8001dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dcc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001dec:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <HAL_GPIO_Init+0x29c>)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	3301      	adds	r3, #1
 8001df8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	fa22 f303 	lsr.w	r3, r2, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f47f aec1 	bne.w	8001b8c <HAL_GPIO_Init+0x10>
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	bf00      	nop
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	44022000 	.word	0x44022000
 8001e1c:	002f7f7f 	.word	0x002f7f7f

08001e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	807b      	strh	r3, [r7, #2]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e30:	787b      	ldrb	r3, [r7, #1]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e36:	887a      	ldrh	r2, [r7, #2]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e3c:	e002      	b.n	8001e44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e3e:	887a      	ldrh	r2, [r7, #2]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e62:	887a      	ldrh	r2, [r7, #2]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4013      	ands	r3, r2
 8001e68:	041a      	lsls	r2, r3, #16
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	43d9      	mvns	r1, r3
 8001e6e:	887b      	ldrh	r3, [r7, #2]
 8001e70:	400b      	ands	r3, r1
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	619a      	str	r2, [r3, #24]
}
 8001e78:	bf00      	nop
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_ICACHE_Enable+0x1c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a04      	ldr	r2, [pc, #16]	; (8001ea0 <HAL_ICACHE_Enable+0x1c>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	40030400 	.word	0x40030400

08001ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d102      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f000 bc28 	b.w	8002708 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eb8:	4b94      	ldr	r3, [pc, #592]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	f003 0318 	and.w	r3, r3, #24
 8001ec0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001ec2:	4b92      	ldr	r3, [pc, #584]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d05b      	beq.n	8001f90 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d005      	beq.n	8001eea <HAL_RCC_OscConfig+0x46>
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	2b18      	cmp	r3, #24
 8001ee2:	d114      	bne.n	8001f0e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d111      	bne.n	8001f0e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d102      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	f000 bc08 	b.w	8002708 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001ef8:	4b84      	ldr	r3, [pc, #528]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	041b      	lsls	r3, r3, #16
 8001f06:	4981      	ldr	r1, [pc, #516]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001f0c:	e040      	b.n	8001f90 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d023      	beq.n	8001f5e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f16:	4b7d      	ldr	r3, [pc, #500]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a7c      	ldr	r2, [pc, #496]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8001f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f22:	f7ff fc47 	bl	80017b4 <HAL_GetTick>
 8001f26:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001f2a:	f7ff fc43 	bl	80017b4 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e3e5      	b.n	8002708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001f3c:	4b73      	ldr	r3, [pc, #460]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001f48:	4b70      	ldr	r3, [pc, #448]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	041b      	lsls	r3, r3, #16
 8001f56:	496d      	ldr	r1, [pc, #436]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	618b      	str	r3, [r1, #24]
 8001f5c:	e018      	b.n	8001f90 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f5e:	4b6b      	ldr	r3, [pc, #428]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a6a      	ldr	r2, [pc, #424]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8001f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6a:	f7ff fc23 	bl	80017b4 <HAL_GetTick>
 8001f6e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001f72:	f7ff fc1f 	bl	80017b4 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e3c1      	b.n	8002708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001f84:	4b61      	ldr	r3, [pc, #388]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f0      	bne.n	8001f72 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80a0 	beq.w	80020de <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	2b10      	cmp	r3, #16
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x10c>
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	2b18      	cmp	r3, #24
 8001fa8:	d109      	bne.n	8001fbe <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d106      	bne.n	8001fbe <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f040 8092 	bne.w	80020de <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e3a4      	b.n	8002708 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc6:	d106      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x132>
 8001fc8:	4b50      	ldr	r3, [pc, #320]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a4f      	ldr	r2, [pc, #316]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8001fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	e058      	b.n	8002088 <HAL_RCC_OscConfig+0x1e4>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d112      	bne.n	8002004 <HAL_RCC_OscConfig+0x160>
 8001fde:	4b4b      	ldr	r3, [pc, #300]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a4a      	ldr	r2, [pc, #296]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8001fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b48      	ldr	r3, [pc, #288]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a47      	ldr	r2, [pc, #284]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8001ff0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b45      	ldr	r3, [pc, #276]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a44      	ldr	r2, [pc, #272]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8001ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e041      	b.n	8002088 <HAL_RCC_OscConfig+0x1e4>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800200c:	d112      	bne.n	8002034 <HAL_RCC_OscConfig+0x190>
 800200e:	4b3f      	ldr	r3, [pc, #252]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a3e      	ldr	r2, [pc, #248]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8002014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b3c      	ldr	r3, [pc, #240]	; (800210c <HAL_RCC_OscConfig+0x268>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a3b      	ldr	r2, [pc, #236]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8002020:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b39      	ldr	r3, [pc, #228]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a38      	ldr	r2, [pc, #224]	; (800210c <HAL_RCC_OscConfig+0x268>)
 800202c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e029      	b.n	8002088 <HAL_RCC_OscConfig+0x1e4>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800203c:	d112      	bne.n	8002064 <HAL_RCC_OscConfig+0x1c0>
 800203e:	4b33      	ldr	r3, [pc, #204]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a32      	ldr	r2, [pc, #200]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8002044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	4b30      	ldr	r3, [pc, #192]	; (800210c <HAL_RCC_OscConfig+0x268>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a2f      	ldr	r2, [pc, #188]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8002050:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	4b2d      	ldr	r3, [pc, #180]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a2c      	ldr	r2, [pc, #176]	; (800210c <HAL_RCC_OscConfig+0x268>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e011      	b.n	8002088 <HAL_RCC_OscConfig+0x1e4>
 8002064:	4b29      	ldr	r3, [pc, #164]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a28      	ldr	r2, [pc, #160]	; (800210c <HAL_RCC_OscConfig+0x268>)
 800206a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	4b26      	ldr	r3, [pc, #152]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a25      	ldr	r2, [pc, #148]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8002076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	4b23      	ldr	r3, [pc, #140]	; (800210c <HAL_RCC_OscConfig+0x268>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a22      	ldr	r2, [pc, #136]	; (800210c <HAL_RCC_OscConfig+0x268>)
 8002082:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d013      	beq.n	80020b8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7ff fb90 	bl	80017b4 <HAL_GetTick>
 8002094:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002098:	f7ff fb8c 	bl	80017b4 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	; 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e32e      	b.n	8002708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020aa:	4b18      	ldr	r3, [pc, #96]	; (800210c <HAL_RCC_OscConfig+0x268>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x1f4>
 80020b6:	e012      	b.n	80020de <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff fb7c 	bl	80017b4 <HAL_GetTick>
 80020bc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80020c0:	f7ff fb78 	bl	80017b4 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	; 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e31a      	b.n	8002708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <HAL_RCC_OscConfig+0x268>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 809a 	beq.w	8002220 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_RCC_OscConfig+0x25a>
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	2b18      	cmp	r3, #24
 80020f6:	d149      	bne.n	800218c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d146      	bne.n	800218c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d104      	bne.n	8002110 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e2fe      	b.n	8002708 <HAL_RCC_OscConfig+0x864>
 800210a:	bf00      	nop
 800210c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d11c      	bne.n	8002150 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002116:	4b9a      	ldr	r3, [pc, #616]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0218 	and.w	r2, r3, #24
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	429a      	cmp	r2, r3
 8002124:	d014      	beq.n	8002150 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002126:	4b96      	ldr	r3, [pc, #600]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 0218 	bic.w	r2, r3, #24
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	4993      	ldr	r1, [pc, #588]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 8002134:	4313      	orrs	r3, r2
 8002136:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002138:	f000 fdd0 	bl	8002cdc <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800213c:	4b91      	ldr	r3, [pc, #580]	; (8002384 <HAL_RCC_OscConfig+0x4e0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff faed 	bl	8001720 <HAL_InitTick>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e2db      	b.n	8002708 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7ff fb30 	bl	80017b4 <HAL_GetTick>
 8002154:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002158:	f7ff fb2c 	bl	80017b4 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e2ce      	b.n	8002708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800216a:	4b85      	ldr	r3, [pc, #532]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002176:	4b82      	ldr	r3, [pc, #520]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	041b      	lsls	r3, r3, #16
 8002184:	497e      	ldr	r1, [pc, #504]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 8002186:	4313      	orrs	r3, r2
 8002188:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800218a:	e049      	b.n	8002220 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d02c      	beq.n	80021ee <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002194:	4b7a      	ldr	r3, [pc, #488]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f023 0218 	bic.w	r2, r3, #24
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	4977      	ldr	r1, [pc, #476]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80021a6:	4b76      	ldr	r3, [pc, #472]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a75      	ldr	r2, [pc, #468]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7ff faff 	bl	80017b4 <HAL_GetTick>
 80021b6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80021ba:	f7ff fafb 	bl	80017b4 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e29d      	b.n	8002708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021cc:	4b6c      	ldr	r3, [pc, #432]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80021d8:	4b69      	ldr	r3, [pc, #420]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	041b      	lsls	r3, r3, #16
 80021e6:	4966      	ldr	r1, [pc, #408]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	610b      	str	r3, [r1, #16]
 80021ec:	e018      	b.n	8002220 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ee:	4b64      	ldr	r3, [pc, #400]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a63      	ldr	r2, [pc, #396]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fa:	f7ff fadb 	bl	80017b4 <HAL_GetTick>
 80021fe:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002202:	f7ff fad7 	bl	80017b4 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e279      	b.n	8002708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002214:	4b5a      	ldr	r3, [pc, #360]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f0      	bne.n	8002202 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b00      	cmp	r3, #0
 800222a:	d03c      	beq.n	80022a6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01c      	beq.n	800226e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002234:	4b52      	ldr	r3, [pc, #328]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 8002236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800223a:	4a51      	ldr	r2, [pc, #324]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 800223c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002240:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002244:	f7ff fab6 	bl	80017b4 <HAL_GetTick>
 8002248:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800224c:	f7ff fab2 	bl	80017b4 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e254      	b.n	8002708 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800225e:	4b48      	ldr	r3, [pc, #288]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 8002260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0ef      	beq.n	800224c <HAL_RCC_OscConfig+0x3a8>
 800226c:	e01b      	b.n	80022a6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800226e:	4b44      	ldr	r3, [pc, #272]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 8002270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002274:	4a42      	ldr	r2, [pc, #264]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 8002276:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800227a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227e:	f7ff fa99 	bl	80017b4 <HAL_GetTick>
 8002282:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002286:	f7ff fa95 	bl	80017b4 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e237      	b.n	8002708 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002298:	4b39      	ldr	r3, [pc, #228]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 800229a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800229e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1ef      	bne.n	8002286 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 80d2 	beq.w	8002458 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80022b4:	4b34      	ldr	r3, [pc, #208]	; (8002388 <HAL_RCC_OscConfig+0x4e4>)
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d118      	bne.n	80022f2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80022c0:	4b31      	ldr	r3, [pc, #196]	; (8002388 <HAL_RCC_OscConfig+0x4e4>)
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	4a30      	ldr	r2, [pc, #192]	; (8002388 <HAL_RCC_OscConfig+0x4e4>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022cc:	f7ff fa72 	bl	80017b4 <HAL_GetTick>
 80022d0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d4:	f7ff fa6e 	bl	80017b4 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e210      	b.n	8002708 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80022e6:	4b28      	ldr	r3, [pc, #160]	; (8002388 <HAL_RCC_OscConfig+0x4e4>)
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d108      	bne.n	800230c <HAL_RCC_OscConfig+0x468>
 80022fa:	4b21      	ldr	r3, [pc, #132]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 80022fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002300:	4a1f      	ldr	r2, [pc, #124]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800230a:	e074      	b.n	80023f6 <HAL_RCC_OscConfig+0x552>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d118      	bne.n	8002346 <HAL_RCC_OscConfig+0x4a2>
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 8002316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800231a:	4a19      	ldr	r2, [pc, #100]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002324:	4b16      	ldr	r3, [pc, #88]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 8002326:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800232a:	4a15      	ldr	r2, [pc, #84]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 800232c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002330:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 8002336:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800233a:	4a11      	ldr	r2, [pc, #68]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 800233c:	f023 0304 	bic.w	r3, r3, #4
 8002340:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002344:	e057      	b.n	80023f6 <HAL_RCC_OscConfig+0x552>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b05      	cmp	r3, #5
 800234c:	d11e      	bne.n	800238c <HAL_RCC_OscConfig+0x4e8>
 800234e:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 8002350:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002354:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 8002356:	f043 0304 	orr.w	r3, r3, #4
 800235a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 8002360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002364:	4a06      	ldr	r2, [pc, #24]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 8002366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800236a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800236e:	4b04      	ldr	r3, [pc, #16]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 8002370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002374:	4a02      	ldr	r2, [pc, #8]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800237e:	e03a      	b.n	80023f6 <HAL_RCC_OscConfig+0x552>
 8002380:	44020c00 	.word	0x44020c00
 8002384:	20000008 	.word	0x20000008
 8002388:	44020800 	.word	0x44020800
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b85      	cmp	r3, #133	; 0x85
 8002392:	d118      	bne.n	80023c6 <HAL_RCC_OscConfig+0x522>
 8002394:	4ba2      	ldr	r3, [pc, #648]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 8002396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800239a:	4aa1      	ldr	r2, [pc, #644]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 800239c:	f043 0304 	orr.w	r3, r3, #4
 80023a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023a4:	4b9e      	ldr	r3, [pc, #632]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80023a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023aa:	4a9d      	ldr	r2, [pc, #628]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80023ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023b4:	4b9a      	ldr	r3, [pc, #616]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80023b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023ba:	4a99      	ldr	r2, [pc, #612]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023c4:	e017      	b.n	80023f6 <HAL_RCC_OscConfig+0x552>
 80023c6:	4b96      	ldr	r3, [pc, #600]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80023c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023cc:	4a94      	ldr	r2, [pc, #592]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80023ce:	f023 0301 	bic.w	r3, r3, #1
 80023d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023d6:	4b92      	ldr	r3, [pc, #584]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80023d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023dc:	4a90      	ldr	r2, [pc, #576]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80023de:	f023 0304 	bic.w	r3, r3, #4
 80023e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023e6:	4b8e      	ldr	r3, [pc, #568]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80023e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023ec:	4a8c      	ldr	r2, [pc, #560]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80023ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d016      	beq.n	800242c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fe:	f7ff f9d9 	bl	80017b4 <HAL_GetTick>
 8002402:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002404:	e00a      	b.n	800241c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002406:	f7ff f9d5 	bl	80017b4 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	f241 3288 	movw	r2, #5000	; 0x1388
 8002414:	4293      	cmp	r3, r2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e175      	b.n	8002708 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800241c:	4b80      	ldr	r3, [pc, #512]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 800241e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0ed      	beq.n	8002406 <HAL_RCC_OscConfig+0x562>
 800242a:	e015      	b.n	8002458 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242c:	f7ff f9c2 	bl	80017b4 <HAL_GetTick>
 8002430:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002432:	e00a      	b.n	800244a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7ff f9be 	bl	80017b4 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e15e      	b.n	8002708 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800244a:	4b75      	ldr	r3, [pc, #468]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 800244c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1ed      	bne.n	8002434 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b00      	cmp	r3, #0
 8002462:	d036      	beq.n	80024d2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	2b00      	cmp	r3, #0
 800246a:	d019      	beq.n	80024a0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800246c:	4b6c      	ldr	r3, [pc, #432]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a6b      	ldr	r2, [pc, #428]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 8002472:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002476:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002478:	f7ff f99c 	bl	80017b4 <HAL_GetTick>
 800247c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002480:	f7ff f998 	bl	80017b4 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e13a      	b.n	8002708 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002492:	4b63      	ldr	r3, [pc, #396]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x5dc>
 800249e:	e018      	b.n	80024d2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024a0:	4b5f      	ldr	r3, [pc, #380]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a5e      	ldr	r2, [pc, #376]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80024a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ac:	f7ff f982 	bl	80017b4 <HAL_GetTick>
 80024b0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80024b4:	f7ff f97e 	bl	80017b4 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e120      	b.n	8002708 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80024c6:	4b56      	ldr	r3, [pc, #344]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8115 	beq.w	8002706 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	2b18      	cmp	r3, #24
 80024e0:	f000 80af 	beq.w	8002642 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	f040 8086 	bne.w	80025fa <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80024ee:	4b4c      	ldr	r3, [pc, #304]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a4b      	ldr	r2, [pc, #300]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80024f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fa:	f7ff f95b 	bl	80017b4 <HAL_GetTick>
 80024fe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002502:	f7ff f957 	bl	80017b4 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e0f9      	b.n	8002708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002514:	4b42      	ldr	r3, [pc, #264]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1f0      	bne.n	8002502 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002520:	4b3f      	ldr	r3, [pc, #252]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002528:	f023 0303 	bic.w	r3, r3, #3
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002534:	0212      	lsls	r2, r2, #8
 8002536:	430a      	orrs	r2, r1
 8002538:	4939      	ldr	r1, [pc, #228]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 800253a:	4313      	orrs	r3, r2
 800253c:	628b      	str	r3, [r1, #40]	; 0x28
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002542:	3b01      	subs	r3, #1
 8002544:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254c:	3b01      	subs	r3, #1
 800254e:	025b      	lsls	r3, r3, #9
 8002550:	b29b      	uxth	r3, r3
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002558:	3b01      	subs	r3, #1
 800255a:	041b      	lsls	r3, r3, #16
 800255c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	3b01      	subs	r3, #1
 8002568:	061b      	lsls	r3, r3, #24
 800256a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800256e:	492c      	ldr	r1, [pc, #176]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 8002570:	4313      	orrs	r3, r2
 8002572:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002574:	4b2a      	ldr	r3, [pc, #168]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	4a29      	ldr	r2, [pc, #164]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 800257a:	f023 0310 	bic.w	r3, r3, #16
 800257e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002584:	4a26      	ldr	r2, [pc, #152]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800258a:	4b25      	ldr	r3, [pc, #148]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	4a24      	ldr	r2, [pc, #144]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 8002590:	f043 0310 	orr.w	r3, r3, #16
 8002594:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002596:	4b22      	ldr	r3, [pc, #136]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259a:	f023 020c 	bic.w	r2, r3, #12
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	491f      	ldr	r1, [pc, #124]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80025a8:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	f023 0220 	bic.w	r2, r3, #32
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b4:	491a      	ldr	r1, [pc, #104]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80025ba:	4b19      	ldr	r3, [pc, #100]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	4a18      	ldr	r2, [pc, #96]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80025c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80025c6:	4b16      	ldr	r3, [pc, #88]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a15      	ldr	r2, [pc, #84]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80025cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d2:	f7ff f8ef 	bl	80017b4 <HAL_GetTick>
 80025d6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80025da:	f7ff f8eb 	bl	80017b4 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e08d      	b.n	8002708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x736>
 80025f8:	e085      	b.n	8002706 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a08      	ldr	r2, [pc, #32]	; (8002620 <HAL_RCC_OscConfig+0x77c>)
 8002600:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002606:	f7ff f8d5 	bl	80017b4 <HAL_GetTick>
 800260a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800260c:	e00a      	b.n	8002624 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800260e:	f7ff f8d1 	bl	80017b4 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d903      	bls.n	8002624 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e073      	b.n	8002708 <HAL_RCC_OscConfig+0x864>
 8002620:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002624:	4b3a      	ldr	r3, [pc, #232]	; (8002710 <HAL_RCC_OscConfig+0x86c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1ee      	bne.n	800260e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002630:	4b37      	ldr	r3, [pc, #220]	; (8002710 <HAL_RCC_OscConfig+0x86c>)
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	4a36      	ldr	r2, [pc, #216]	; (8002710 <HAL_RCC_OscConfig+0x86c>)
 8002636:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800263a:	f023 0303 	bic.w	r3, r3, #3
 800263e:	6293      	str	r3, [r2, #40]	; 0x28
 8002640:	e061      	b.n	8002706 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002642:	4b33      	ldr	r3, [pc, #204]	; (8002710 <HAL_RCC_OscConfig+0x86c>)
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002648:	4b31      	ldr	r3, [pc, #196]	; (8002710 <HAL_RCC_OscConfig+0x86c>)
 800264a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002652:	2b01      	cmp	r3, #1
 8002654:	d031      	beq.n	80026ba <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f003 0203 	and.w	r2, r3, #3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002660:	429a      	cmp	r2, r3
 8002662:	d12a      	bne.n	80026ba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	0a1b      	lsrs	r3, r3, #8
 8002668:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002670:	429a      	cmp	r2, r3
 8002672:	d122      	bne.n	80026ba <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002680:	429a      	cmp	r2, r3
 8002682:	d11a      	bne.n	80026ba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	0a5b      	lsrs	r3, r3, #9
 8002688:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002690:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d111      	bne.n	80026ba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	0c1b      	lsrs	r3, r3, #16
 800269a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d108      	bne.n	80026ba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	0e1b      	lsrs	r3, r3, #24
 80026ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d001      	beq.n	80026be <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e024      	b.n	8002708 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80026be:	4b14      	ldr	r3, [pc, #80]	; (8002710 <HAL_RCC_OscConfig+0x86c>)
 80026c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c2:	08db      	lsrs	r3, r3, #3
 80026c4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d01a      	beq.n	8002706 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80026d0:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <HAL_RCC_OscConfig+0x86c>)
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	4a0e      	ldr	r2, [pc, #56]	; (8002710 <HAL_RCC_OscConfig+0x86c>)
 80026d6:	f023 0310 	bic.w	r3, r3, #16
 80026da:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7ff f86a 	bl	80017b4 <HAL_GetTick>
 80026e0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80026e2:	bf00      	nop
 80026e4:	f7ff f866 	bl	80017b4 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d0f9      	beq.n	80026e4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f4:	4a06      	ldr	r2, [pc, #24]	; (8002710 <HAL_RCC_OscConfig+0x86c>)
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_RCC_OscConfig+0x86c>)
 80026fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fe:	4a04      	ldr	r2, [pc, #16]	; (8002710 <HAL_RCC_OscConfig+0x86c>)
 8002700:	f043 0310 	orr.w	r3, r3, #16
 8002704:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	44020c00 	.word	0x44020c00

08002714 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e19e      	b.n	8002a66 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002728:	4b83      	ldr	r3, [pc, #524]	; (8002938 <HAL_RCC_ClockConfig+0x224>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d910      	bls.n	8002758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b80      	ldr	r3, [pc, #512]	; (8002938 <HAL_RCC_ClockConfig+0x224>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 020f 	bic.w	r2, r3, #15
 800273e:	497e      	ldr	r1, [pc, #504]	; (8002938 <HAL_RCC_ClockConfig+0x224>)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b7c      	ldr	r3, [pc, #496]	; (8002938 <HAL_RCC_ClockConfig+0x224>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e186      	b.n	8002a66 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b00      	cmp	r3, #0
 8002762:	d012      	beq.n	800278a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	4b74      	ldr	r3, [pc, #464]	; (800293c <HAL_RCC_ClockConfig+0x228>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002772:	429a      	cmp	r2, r3
 8002774:	d909      	bls.n	800278a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002776:	4b71      	ldr	r3, [pc, #452]	; (800293c <HAL_RCC_ClockConfig+0x228>)
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	496d      	ldr	r1, [pc, #436]	; (800293c <HAL_RCC_ClockConfig+0x228>)
 8002786:	4313      	orrs	r3, r2
 8002788:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d012      	beq.n	80027bc <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	4b68      	ldr	r3, [pc, #416]	; (800293c <HAL_RCC_ClockConfig+0x228>)
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	091b      	lsrs	r3, r3, #4
 80027a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d909      	bls.n	80027bc <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80027a8:	4b64      	ldr	r3, [pc, #400]	; (800293c <HAL_RCC_ClockConfig+0x228>)
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	4961      	ldr	r1, [pc, #388]	; (800293c <HAL_RCC_ClockConfig+0x228>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d010      	beq.n	80027ea <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	4b5b      	ldr	r3, [pc, #364]	; (800293c <HAL_RCC_ClockConfig+0x228>)
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d908      	bls.n	80027ea <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80027d8:	4b58      	ldr	r3, [pc, #352]	; (800293c <HAL_RCC_ClockConfig+0x228>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4955      	ldr	r1, [pc, #340]	; (800293c <HAL_RCC_ClockConfig+0x228>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d010      	beq.n	8002818 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	4b50      	ldr	r3, [pc, #320]	; (800293c <HAL_RCC_ClockConfig+0x228>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	429a      	cmp	r2, r3
 8002804:	d908      	bls.n	8002818 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002806:	4b4d      	ldr	r3, [pc, #308]	; (800293c <HAL_RCC_ClockConfig+0x228>)
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	f023 020f 	bic.w	r2, r3, #15
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	494a      	ldr	r1, [pc, #296]	; (800293c <HAL_RCC_ClockConfig+0x228>)
 8002814:	4313      	orrs	r3, r2
 8002816:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 8093 	beq.w	800294c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b03      	cmp	r3, #3
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800282e:	4b43      	ldr	r3, [pc, #268]	; (800293c <HAL_RCC_ClockConfig+0x228>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d121      	bne.n	800287e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e113      	b.n	8002a66 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002846:	4b3d      	ldr	r3, [pc, #244]	; (800293c <HAL_RCC_ClockConfig+0x228>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d115      	bne.n	800287e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e107      	b.n	8002a66 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d107      	bne.n	800286e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800285e:	4b37      	ldr	r3, [pc, #220]	; (800293c <HAL_RCC_ClockConfig+0x228>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002866:	2b00      	cmp	r3, #0
 8002868:	d109      	bne.n	800287e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e0fb      	b.n	8002a66 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800286e:	4b33      	ldr	r3, [pc, #204]	; (800293c <HAL_RCC_ClockConfig+0x228>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e0f3      	b.n	8002a66 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800287e:	4b2f      	ldr	r3, [pc, #188]	; (800293c <HAL_RCC_ClockConfig+0x228>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f023 0203 	bic.w	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	492c      	ldr	r1, [pc, #176]	; (800293c <HAL_RCC_ClockConfig+0x228>)
 800288c:	4313      	orrs	r3, r2
 800288e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002890:	f7fe ff90 	bl	80017b4 <HAL_GetTick>
 8002894:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b03      	cmp	r3, #3
 800289c:	d112      	bne.n	80028c4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800289e:	e00a      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80028a0:	f7fe ff88 	bl	80017b4 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e0d7      	b.n	8002a66 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028b6:	4b21      	ldr	r3, [pc, #132]	; (800293c <HAL_RCC_ClockConfig+0x228>)
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f003 0318 	and.w	r3, r3, #24
 80028be:	2b18      	cmp	r3, #24
 80028c0:	d1ee      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x18c>
 80028c2:	e043      	b.n	800294c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d112      	bne.n	80028f2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028cc:	e00a      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80028ce:	f7fe ff71 	bl	80017b4 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028dc:	4293      	cmp	r3, r2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e0c0      	b.n	8002a66 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028e4:	4b15      	ldr	r3, [pc, #84]	; (800293c <HAL_RCC_ClockConfig+0x228>)
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	f003 0318 	and.w	r3, r3, #24
 80028ec:	2b10      	cmp	r3, #16
 80028ee:	d1ee      	bne.n	80028ce <HAL_RCC_ClockConfig+0x1ba>
 80028f0:	e02c      	b.n	800294c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d122      	bne.n	8002940 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80028fc:	f7fe ff5a 	bl	80017b4 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	; 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e0a9      	b.n	8002a66 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <HAL_RCC_ClockConfig+0x228>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f003 0318 	and.w	r3, r3, #24
 800291a:	2b08      	cmp	r3, #8
 800291c:	d1ee      	bne.n	80028fc <HAL_RCC_ClockConfig+0x1e8>
 800291e:	e015      	b.n	800294c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002920:	f7fe ff48 	bl	80017b4 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	; 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d906      	bls.n	8002940 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e097      	b.n	8002a66 <HAL_RCC_ClockConfig+0x352>
 8002936:	bf00      	nop
 8002938:	40022000 	.word	0x40022000
 800293c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002940:	4b4b      	ldr	r3, [pc, #300]	; (8002a70 <HAL_RCC_ClockConfig+0x35c>)
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	f003 0318 	and.w	r3, r3, #24
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1e9      	bne.n	8002920 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d010      	beq.n	800297a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	4b44      	ldr	r3, [pc, #272]	; (8002a70 <HAL_RCC_ClockConfig+0x35c>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	429a      	cmp	r2, r3
 8002966:	d208      	bcs.n	800297a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002968:	4b41      	ldr	r3, [pc, #260]	; (8002a70 <HAL_RCC_ClockConfig+0x35c>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f023 020f 	bic.w	r2, r3, #15
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	493e      	ldr	r1, [pc, #248]	; (8002a70 <HAL_RCC_ClockConfig+0x35c>)
 8002976:	4313      	orrs	r3, r2
 8002978:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800297a:	4b3e      	ldr	r3, [pc, #248]	; (8002a74 <HAL_RCC_ClockConfig+0x360>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d210      	bcs.n	80029aa <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002988:	4b3a      	ldr	r3, [pc, #232]	; (8002a74 <HAL_RCC_ClockConfig+0x360>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f023 020f 	bic.w	r2, r3, #15
 8002990:	4938      	ldr	r1, [pc, #224]	; (8002a74 <HAL_RCC_ClockConfig+0x360>)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	4313      	orrs	r3, r2
 8002996:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002998:	4b36      	ldr	r3, [pc, #216]	; (8002a74 <HAL_RCC_ClockConfig+0x360>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d001      	beq.n	80029aa <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e05d      	b.n	8002a66 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d010      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	4b2d      	ldr	r3, [pc, #180]	; (8002a70 <HAL_RCC_ClockConfig+0x35c>)
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d208      	bcs.n	80029d8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80029c6:	4b2a      	ldr	r3, [pc, #168]	; (8002a70 <HAL_RCC_ClockConfig+0x35c>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	4927      	ldr	r1, [pc, #156]	; (8002a70 <HAL_RCC_ClockConfig+0x35c>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d012      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	4b21      	ldr	r3, [pc, #132]	; (8002a70 <HAL_RCC_ClockConfig+0x35c>)
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d209      	bcs.n	8002a0a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80029f6:	4b1e      	ldr	r3, [pc, #120]	; (8002a70 <HAL_RCC_ClockConfig+0x35c>)
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	491a      	ldr	r1, [pc, #104]	; (8002a70 <HAL_RCC_ClockConfig+0x35c>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d012      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <HAL_RCC_ClockConfig+0x35c>)
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d209      	bcs.n	8002a3c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002a28:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <HAL_RCC_ClockConfig+0x35c>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	490e      	ldr	r1, [pc, #56]	; (8002a70 <HAL_RCC_ClockConfig+0x35c>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002a3c:	f000 f822 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8002a40:	4602      	mov	r2, r0
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_RCC_ClockConfig+0x35c>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	490b      	ldr	r1, [pc, #44]	; (8002a78 <HAL_RCC_ClockConfig+0x364>)
 8002a4c:	5ccb      	ldrb	r3, [r1, r3]
 8002a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a52:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <HAL_RCC_ClockConfig+0x368>)
 8002a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002a56:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <HAL_RCC_ClockConfig+0x36c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fe fe60 	bl	8001720 <HAL_InitTick>
 8002a60:	4603      	mov	r3, r0
 8002a62:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002a64:	7afb      	ldrb	r3, [r7, #11]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	44020c00 	.word	0x44020c00
 8002a74:	40022000 	.word	0x40022000
 8002a78:	0800cc28 	.word	0x0800cc28
 8002a7c:	20000004 	.word	0x20000004
 8002a80:	20000008 	.word	0x20000008

08002a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b089      	sub	sp, #36	; 0x24
 8002a88:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002a8a:	4b8c      	ldr	r3, [pc, #560]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	f003 0318 	and.w	r3, r3, #24
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d102      	bne.n	8002a9c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002a96:	4b8a      	ldr	r3, [pc, #552]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	e107      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a9c:	4b87      	ldr	r3, [pc, #540]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	f003 0318 	and.w	r3, r3, #24
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d112      	bne.n	8002ace <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002aa8:	4b84      	ldr	r3, [pc, #528]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d009      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002ab4:	4b81      	ldr	r3, [pc, #516]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	08db      	lsrs	r3, r3, #3
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	4a81      	ldr	r2, [pc, #516]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x240>)
 8002ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	e0f1      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002ac8:	4b7e      	ldr	r3, [pc, #504]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x240>)
 8002aca:	61fb      	str	r3, [r7, #28]
 8002acc:	e0ee      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ace:	4b7b      	ldr	r3, [pc, #492]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f003 0318 	and.w	r3, r3, #24
 8002ad6:	2b10      	cmp	r3, #16
 8002ad8:	d102      	bne.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ada:	4b7b      	ldr	r3, [pc, #492]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x244>)
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	e0e5      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ae0:	4b76      	ldr	r3, [pc, #472]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	f003 0318 	and.w	r3, r3, #24
 8002ae8:	2b18      	cmp	r3, #24
 8002aea:	f040 80dd 	bne.w	8002ca8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002aee:	4b73      	ldr	r3, [pc, #460]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8002af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002af8:	4b70      	ldr	r3, [pc, #448]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8002afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afc:	0a1b      	lsrs	r3, r3, #8
 8002afe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b02:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002b04:	4b6d      	ldr	r3, [pc, #436]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8002b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002b10:	4b6a      	ldr	r3, [pc, #424]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8002b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002b14:	08db      	lsrs	r3, r3, #3
 8002b16:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	fb02 f303 	mul.w	r3, r2, r3
 8002b20:	ee07 3a90 	vmov	s15, r3
 8002b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b28:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80b7 	beq.w	8002ca2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d003      	beq.n	8002b42 <HAL_RCC_GetSysClockFreq+0xbe>
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d056      	beq.n	8002bee <HAL_RCC_GetSysClockFreq+0x16a>
 8002b40:	e077      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002b42:	4b5e      	ldr	r3, [pc, #376]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d02d      	beq.n	8002baa <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002b4e:	4b5b      	ldr	r3, [pc, #364]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	08db      	lsrs	r3, r3, #3
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	4a5a      	ldr	r2, [pc, #360]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x240>)
 8002b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	ee07 3a90 	vmov	s15, r3
 8002b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	ee07 3a90 	vmov	s15, r3
 8002b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b78:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b80:	ee07 3a90 	vmov	s15, r3
 8002b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b88:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b8c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002ccc <HAL_RCC_GetSysClockFreq+0x248>
 8002b90:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b94:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002ba8:	e065      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	ee07 3a90 	vmov	s15, r3
 8002bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bb4:	eddf 6a46 	vldr	s13, [pc, #280]	; 8002cd0 <HAL_RCC_GetSysClockFreq+0x24c>
 8002bb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bbc:	4b3f      	ldr	r3, [pc, #252]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8002bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc4:	ee07 3a90 	vmov	s15, r3
 8002bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bcc:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bd0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002ccc <HAL_RCC_GetSysClockFreq+0x248>
 8002bd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002be0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002bec:	e043      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	ee07 3a90 	vmov	s15, r3
 8002bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bf8:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002cd4 <HAL_RCC_GetSysClockFreq+0x250>
 8002bfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c00:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8002c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c08:	ee07 3a90 	vmov	s15, r3
 8002c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c10:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c14:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002ccc <HAL_RCC_GetSysClockFreq+0x248>
 8002c18:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c24:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002c30:	e021      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	ee07 3a90 	vmov	s15, r3
 8002c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c3c:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002cd8 <HAL_RCC_GetSysClockFreq+0x254>
 8002c40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c44:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8002c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c4c:	ee07 3a90 	vmov	s15, r3
 8002c50:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c54:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c58:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002ccc <HAL_RCC_GetSysClockFreq+0x248>
 8002c5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c60:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c68:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c70:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002c74:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002c76:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8002c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7a:	0a5b      	lsrs	r3, r3, #9
 8002c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c80:	3301      	adds	r3, #1
 8002c82:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	ee07 3a90 	vmov	s15, r3
 8002c8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c8e:	edd7 6a06 	vldr	s13, [r7, #24]
 8002c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c9a:	ee17 3a90 	vmov	r3, s15
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	e004      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	e001      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002ca8:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x240>)
 8002caa:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002cac:	69fb      	ldr	r3, [r7, #28]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3724      	adds	r7, #36	; 0x24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	44020c00 	.word	0x44020c00
 8002cc0:	003d0900 	.word	0x003d0900
 8002cc4:	03d09000 	.word	0x03d09000
 8002cc8:	007a1200 	.word	0x007a1200
 8002ccc:	46000000 	.word	0x46000000
 8002cd0:	4c742400 	.word	0x4c742400
 8002cd4:	4af42400 	.word	0x4af42400
 8002cd8:	4a742400 	.word	0x4a742400

08002cdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002ce0:	f7ff fed0 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002cea:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002cee:	4907      	ldr	r1, [pc, #28]	; (8002d0c <HAL_RCC_GetHCLKFreq+0x30>)
 8002cf0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002cf2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfa:	4a05      	ldr	r2, [pc, #20]	; (8002d10 <HAL_RCC_GetHCLKFreq+0x34>)
 8002cfc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002cfe:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <HAL_RCC_GetHCLKFreq+0x34>)
 8002d00:	681b      	ldr	r3, [r3, #0]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	44020c00 	.word	0x44020c00
 8002d0c:	0800cc28 	.word	0x0800cc28
 8002d10:	20000004 	.word	0x20000004

08002d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002d18:	f7ff ffe0 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	091b      	lsrs	r3, r3, #4
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	4904      	ldr	r1, [pc, #16]	; (8002d3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d2a:	5ccb      	ldrb	r3, [r1, r3]
 8002d2c:	f003 031f 	and.w	r3, r3, #31
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	44020c00 	.word	0x44020c00
 8002d3c:	0800cc38 	.word	0x0800cc38

08002d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002d44:	f7ff ffca 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	0a1b      	lsrs	r3, r3, #8
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	4904      	ldr	r1, [pc, #16]	; (8002d68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d56:	5ccb      	ldrb	r3, [r1, r3]
 8002d58:	f003 031f 	and.w	r3, r3, #31
 8002d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	44020c00 	.word	0x44020c00
 8002d68:	0800cc38 	.word	0x0800cc38

08002d6c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002d70:	f7ff ffb4 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002d74:	4602      	mov	r2, r0
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	0b1b      	lsrs	r3, r3, #12
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	4904      	ldr	r1, [pc, #16]	; (8002d94 <HAL_RCC_GetPCLK3Freq+0x28>)
 8002d82:	5ccb      	ldrb	r3, [r1, r3]
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	44020c00 	.word	0x44020c00
 8002d94:	0800cc38 	.word	0x0800cc38

08002d98 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d9c:	b0aa      	sub	sp, #168	; 0xa8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002da4:	2300      	movs	r3, #0
 8002da6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002daa:	2300      	movs	r3, #0
 8002dac:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002db0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db8:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8002dbc:	2500      	movs	r5, #0
 8002dbe:	ea54 0305 	orrs.w	r3, r4, r5
 8002dc2:	d00b      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002dc4:	4bb8      	ldr	r3, [pc, #736]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002dc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dca:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8002dce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	4ab4      	ldr	r2, [pc, #720]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002dd6:	430b      	orrs	r3, r1
 8002dd8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ddc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de4:	f002 0801 	and.w	r8, r2, #1
 8002de8:	f04f 0900 	mov.w	r9, #0
 8002dec:	ea58 0309 	orrs.w	r3, r8, r9
 8002df0:	d038      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002df2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df8:	2b05      	cmp	r3, #5
 8002dfa:	d819      	bhi.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002dfc:	a201      	add	r2, pc, #4	; (adr r2, 8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e02:	bf00      	nop
 8002e04:	08002e39 	.word	0x08002e39
 8002e08:	08002e1d 	.word	0x08002e1d
 8002e0c:	08002e31 	.word	0x08002e31
 8002e10:	08002e39 	.word	0x08002e39
 8002e14:	08002e39 	.word	0x08002e39
 8002e18:	08002e39 	.word	0x08002e39
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e20:	3308      	adds	r3, #8
 8002e22:	4618      	mov	r0, r3
 8002e24:	f001 ffee 	bl	8004e04 <RCCEx_PLL2_Config>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8002e2e:	e004      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002e36:	e000      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8002e38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e3a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10c      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002e42:	4b99      	ldr	r3, [pc, #612]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e48:	f023 0107 	bic.w	r1, r3, #7
 8002e4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e52:	4a95      	ldr	r2, [pc, #596]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e54:	430b      	orrs	r3, r1
 8002e56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002e5a:	e003      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e5c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002e60:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6c:	f002 0a02 	and.w	sl, r2, #2
 8002e70:	f04f 0b00 	mov.w	fp, #0
 8002e74:	ea5a 030b 	orrs.w	r3, sl, fp
 8002e78:	d03c      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002e7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	2b28      	cmp	r3, #40	; 0x28
 8002e82:	d01b      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x124>
 8002e84:	2b28      	cmp	r3, #40	; 0x28
 8002e86:	d815      	bhi.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d019      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d811      	bhi.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002e90:	2b18      	cmp	r3, #24
 8002e92:	d017      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8002e94:	2b18      	cmp	r3, #24
 8002e96:	d80d      	bhi.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d015      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d109      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ea0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ea4:	3308      	adds	r3, #8
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f001 ffac 	bl	8004e04 <RCCEx_PLL2_Config>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002eb2:	e00a      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002eba:	e006      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002ebc:	bf00      	nop
 8002ebe:	e004      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002ec0:	bf00      	nop
 8002ec2:	e002      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002ec4:	bf00      	nop
 8002ec6:	e000      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eca:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002ed2:	4b75      	ldr	r3, [pc, #468]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ed4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ed8:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002edc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	4a71      	ldr	r2, [pc, #452]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002eea:	e003      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eec:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002ef0:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ef4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efc:	f002 0304 	and.w	r3, r2, #4
 8002f00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f04:	2300      	movs	r3, #0
 8002f06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002f0a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4313      	orrs	r3, r2
 8002f12:	d040      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002f14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002f1e:	d01e      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8002f20:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002f24:	d817      	bhi.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f2a:	d01a      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8002f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f30:	d811      	bhi.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002f32:	2bc0      	cmp	r3, #192	; 0xc0
 8002f34:	d017      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002f36:	2bc0      	cmp	r3, #192	; 0xc0
 8002f38:	d80d      	bhi.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d015      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8002f3e:	2b40      	cmp	r3, #64	; 0x40
 8002f40:	d109      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f46:	3308      	adds	r3, #8
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f001 ff5b 	bl	8004e04 <RCCEx_PLL2_Config>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002f54:	e00a      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002f5c:	e006      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002f5e:	bf00      	nop
 8002f60:	e004      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002f62:	bf00      	nop
 8002f64:	e002      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002f66:	bf00      	nop
 8002f68:	e000      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002f6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f6c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10c      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002f74:	4b4c      	ldr	r3, [pc, #304]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f7a:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002f7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f84:	4a48      	ldr	r2, [pc, #288]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f86:	430b      	orrs	r3, r1
 8002f88:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002f8c:	e003      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f8e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002f92:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002fa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fac:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	d043      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8002fb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002fc0:	d021      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002fc2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002fc6:	d81a      	bhi.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002fc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fcc:	d01d      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002fce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fd2:	d814      	bhi.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002fd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fd8:	d019      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8002fda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fde:	d80e      	bhi.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d016      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8002fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fe8:	d109      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002fee:	3308      	adds	r3, #8
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f001 ff07 	bl	8004e04 <RCCEx_PLL2_Config>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002ffc:	e00a      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003004:	e006      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003006:	bf00      	nop
 8003008:	e004      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800300a:	bf00      	nop
 800300c:	e002      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800300e:	bf00      	nop
 8003010:	e000      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003012:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003014:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10c      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800301c:	4b22      	ldr	r3, [pc, #136]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800301e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003022:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003026:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	4a1e      	ldr	r2, [pc, #120]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800302e:	430b      	orrs	r3, r1
 8003030:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003034:	e003      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003036:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800303a:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800303e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003046:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800304a:	67bb      	str	r3, [r7, #120]	; 0x78
 800304c:	2300      	movs	r3, #0
 800304e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003050:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003054:	460b      	mov	r3, r1
 8003056:	4313      	orrs	r3, r2
 8003058:	d03e      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800305a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800305e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003060:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003064:	d01b      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x306>
 8003066:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800306a:	d814      	bhi.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800306c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003070:	d017      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8003072:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003076:	d80e      	bhi.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003078:	2b00      	cmp	r3, #0
 800307a:	d017      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x314>
 800307c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003080:	d109      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003082:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003086:	3308      	adds	r3, #8
 8003088:	4618      	mov	r0, r3
 800308a:	f001 febb 	bl	8004e04 <RCCEx_PLL2_Config>
 800308e:	4603      	mov	r3, r0
 8003090:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003094:	e00b      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800309c:	e007      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800309e:	bf00      	nop
 80030a0:	e005      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80030a2:	bf00      	nop
 80030a4:	e003      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x316>
 80030a6:	bf00      	nop
 80030a8:	44020c00 	.word	0x44020c00
        break;
 80030ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ae:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80030b6:	4ba5      	ldr	r3, [pc, #660]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80030b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80030bc:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80030c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	4aa1      	ldr	r2, [pc, #644]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80030c8:	430b      	orrs	r3, r1
 80030ca:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80030ce:	e003      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d0:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80030d4:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80030e4:	673b      	str	r3, [r7, #112]	; 0x70
 80030e6:	2300      	movs	r3, #0
 80030e8:	677b      	str	r3, [r7, #116]	; 0x74
 80030ea:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80030ee:	460b      	mov	r3, r1
 80030f0:	4313      	orrs	r3, r2
 80030f2:	d03b      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80030f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030fe:	d01b      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8003100:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003104:	d814      	bhi.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003106:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800310a:	d017      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800310c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003110:	d80e      	bhi.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d014      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003116:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800311a:	d109      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800311c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003120:	3308      	adds	r3, #8
 8003122:	4618      	mov	r0, r3
 8003124:	f001 fe6e 	bl	8004e04 <RCCEx_PLL2_Config>
 8003128:	4603      	mov	r3, r0
 800312a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800312e:	e008      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003136:	e004      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003138:	bf00      	nop
 800313a:	e002      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800313c:	bf00      	nop
 800313e:	e000      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003142:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10c      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800314a:	4b80      	ldr	r3, [pc, #512]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800314c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003150:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003154:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315a:	4a7c      	ldr	r2, [pc, #496]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800315c:	430b      	orrs	r3, r1
 800315e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003162:	e003      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003164:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003168:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800316c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003174:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003178:	66bb      	str	r3, [r7, #104]	; 0x68
 800317a:	2300      	movs	r3, #0
 800317c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800317e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003182:	460b      	mov	r3, r1
 8003184:	4313      	orrs	r3, r2
 8003186:	d033      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003188:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800318c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003192:	d015      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003194:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003198:	d80e      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800319a:	2b00      	cmp	r3, #0
 800319c:	d012      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800319e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031a2:	d109      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031a8:	3308      	adds	r3, #8
 80031aa:	4618      	mov	r0, r3
 80031ac:	f001 fe2a 	bl	8004e04 <RCCEx_PLL2_Config>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80031b6:	e006      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80031be:	e002      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80031c0:	bf00      	nop
 80031c2:	e000      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80031c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031c6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80031ce:	4b5f      	ldr	r3, [pc, #380]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80031d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80031d4:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 80031d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031de:	4a5b      	ldr	r2, [pc, #364]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80031e0:	430b      	orrs	r3, r1
 80031e2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80031e6:	e003      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e8:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80031ec:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80031f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f8:	2100      	movs	r1, #0
 80031fa:	6639      	str	r1, [r7, #96]	; 0x60
 80031fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003200:	667b      	str	r3, [r7, #100]	; 0x64
 8003202:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003206:	460b      	mov	r3, r1
 8003208:	4313      	orrs	r3, r2
 800320a:	d033      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 800320c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003216:	d015      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8003218:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800321c:	d80e      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800321e:	2b00      	cmp	r3, #0
 8003220:	d012      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003222:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003226:	d109      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* I3C2 clock source config set later after clock selection check */
        break;

      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003228:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800322c:	3308      	adds	r3, #8
 800322e:	4618      	mov	r0, r3
 8003230:	f001 fde8 	bl	8004e04 <RCCEx_PLL2_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* I3C2 clock source config set later after clock selection check */
        break;
 800323a:	e006      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003242:	e002      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003244:	bf00      	nop
 8003246:	e000      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800324a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10c      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8003252:	4b3e      	ldr	r3, [pc, #248]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003254:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003258:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800325c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003262:	4a3a      	ldr	r2, [pc, #232]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003264:	430b      	orrs	r3, r1
 8003266:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800326a:	e003      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003270:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003274:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327c:	2100      	movs	r1, #0
 800327e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003284:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003286:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800328a:	460b      	mov	r3, r1
 800328c:	4313      	orrs	r3, r2
 800328e:	d00e      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003290:	4b2e      	ldr	r3, [pc, #184]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	4a2d      	ldr	r2, [pc, #180]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003296:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800329a:	61d3      	str	r3, [r2, #28]
 800329c:	4b2b      	ldr	r3, [pc, #172]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800329e:	69d9      	ldr	r1, [r3, #28]
 80032a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032a8:	4a28      	ldr	r2, [pc, #160]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80032aa:	430b      	orrs	r3, r1
 80032ac:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80032ba:	653b      	str	r3, [r7, #80]	; 0x50
 80032bc:	2300      	movs	r3, #0
 80032be:	657b      	str	r3, [r7, #84]	; 0x54
 80032c0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80032c4:	460b      	mov	r3, r1
 80032c6:	4313      	orrs	r3, r2
 80032c8:	d046      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80032ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80032d4:	d021      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x582>
 80032d6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80032da:	d81a      	bhi.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80032dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e0:	d01d      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x586>
 80032e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e6:	d814      	bhi.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80032e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032ec:	d019      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80032ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032f2:	d80e      	bhi.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d016      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80032f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032fc:	d109      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003302:	3308      	adds	r3, #8
 8003304:	4618      	mov	r0, r3
 8003306:	f001 fd7d 	bl	8004e04 <RCCEx_PLL2_Config>
 800330a:	4603      	mov	r3, r0
 800330c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003310:	e00a      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003318:	e006      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800331a:	bf00      	nop
 800331c:	e004      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800331e:	bf00      	nop
 8003320:	e002      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003322:	bf00      	nop
 8003324:	e000      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003326:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003328:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10f      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003330:	4b06      	ldr	r3, [pc, #24]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003332:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003336:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800333a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800333e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003340:	4a02      	ldr	r2, [pc, #8]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003342:	430b      	orrs	r3, r1
 8003344:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003348:	e006      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800334a:	bf00      	nop
 800334c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003350:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003354:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003358:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003360:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003364:	64bb      	str	r3, [r7, #72]	; 0x48
 8003366:	2300      	movs	r3, #0
 8003368:	64fb      	str	r3, [r7, #76]	; 0x4c
 800336a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800336e:	460b      	mov	r3, r1
 8003370:	4313      	orrs	r3, r2
 8003372:	d043      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003374:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800337e:	d021      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8003380:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003384:	d81a      	bhi.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003386:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800338a:	d01d      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x630>
 800338c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003390:	d814      	bhi.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003392:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003396:	d019      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x634>
 8003398:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800339c:	d80e      	bhi.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x624>
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d016      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x638>
 80033a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a6:	d109      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80033ac:	3308      	adds	r3, #8
 80033ae:	4618      	mov	r0, r3
 80033b0:	f001 fd28 	bl	8004e04 <RCCEx_PLL2_Config>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80033ba:	e00a      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80033c2:	e006      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80033c4:	bf00      	nop
 80033c6:	e004      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80033c8:	bf00      	nop
 80033ca:	e002      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80033cc:	bf00      	nop
 80033ce:	e000      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80033d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d2:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10c      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80033da:	4bb6      	ldr	r3, [pc, #728]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80033dc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80033e0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80033e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80033e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ea:	4ab2      	ldr	r2, [pc, #712]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80033ec:	430b      	orrs	r3, r1
 80033ee:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80033f2:	e003      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80033f8:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80033fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003404:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003408:	643b      	str	r3, [r7, #64]	; 0x40
 800340a:	2300      	movs	r3, #0
 800340c:	647b      	str	r3, [r7, #68]	; 0x44
 800340e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003412:	460b      	mov	r3, r1
 8003414:	4313      	orrs	r3, r2
 8003416:	d030      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003418:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800341c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800341e:	2b05      	cmp	r3, #5
 8003420:	d80f      	bhi.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8003422:	2b03      	cmp	r3, #3
 8003424:	d211      	bcs.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8003426:	2b01      	cmp	r3, #1
 8003428:	d911      	bls.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800342a:	2b02      	cmp	r3, #2
 800342c:	d109      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800342e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003432:	3308      	adds	r3, #8
 8003434:	4618      	mov	r0, r3
 8003436:	f001 fce5 	bl	8004e04 <RCCEx_PLL2_Config>
 800343a:	4603      	mov	r3, r0
 800343c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003440:	e006      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003448:	e002      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800344a:	bf00      	nop
 800344c:	e000      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800344e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003450:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10c      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003458:	4b96      	ldr	r3, [pc, #600]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800345a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800345e:	f023 0107 	bic.w	r1, r3, #7
 8003462:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003468:	4a92      	ldr	r2, [pc, #584]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800346a:	430b      	orrs	r3, r1
 800346c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003470:	e003      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003472:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003476:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800347a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003482:	2100      	movs	r1, #0
 8003484:	63b9      	str	r1, [r7, #56]	; 0x38
 8003486:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800348a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800348c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003490:	460b      	mov	r3, r1
 8003492:	4313      	orrs	r3, r2
 8003494:	d022      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003496:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800349a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x714>
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d005      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80034aa:	e002      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80034ac:	bf00      	nop
 80034ae:	e000      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80034b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b2:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80034ba:	4b7e      	ldr	r3, [pc, #504]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80034bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034c0:	f023 0108 	bic.w	r1, r3, #8
 80034c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ca:	4a7a      	ldr	r2, [pc, #488]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80034cc:	430b      	orrs	r3, r1
 80034ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034d2:	e003      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80034d8:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80034e8:	633b      	str	r3, [r7, #48]	; 0x30
 80034ea:	2300      	movs	r3, #0
 80034ec:	637b      	str	r3, [r7, #52]	; 0x34
 80034ee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80034f2:	460b      	mov	r3, r1
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f000 80b0 	beq.w	800365a <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80034fa:	4b6f      	ldr	r3, [pc, #444]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	4a6e      	ldr	r2, [pc, #440]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003506:	f7fe f955 	bl	80017b4 <HAL_GetTick>
 800350a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800350e:	e00b      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003510:	f7fe f950 	bl	80017b4 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d903      	bls.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003526:	e005      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003528:	4b63      	ldr	r3, [pc, #396]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0ed      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8003534:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003538:	2b00      	cmp	r3, #0
 800353a:	f040 808a 	bne.w	8003652 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800353e:	4b5d      	ldr	r3, [pc, #372]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003548:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800354c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003550:	2b00      	cmp	r3, #0
 8003552:	d022      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x802>
 8003554:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800355a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800355e:	429a      	cmp	r2, r3
 8003560:	d01b      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003562:	4b54      	ldr	r3, [pc, #336]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003564:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003570:	4b50      	ldr	r3, [pc, #320]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003572:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003576:	4a4f      	ldr	r2, [pc, #316]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003580:	4b4c      	ldr	r3, [pc, #304]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003582:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003586:	4a4b      	ldr	r2, [pc, #300]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800358c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003590:	4a48      	ldr	r2, [pc, #288]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003592:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003596:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800359a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d019      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a6:	f7fe f905 	bl	80017b4 <HAL_GetTick>
 80035aa:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ae:	e00d      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b0:	f7fe f900 	bl	80017b4 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d903      	bls.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
            break;
 80035ca:	e006      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035cc:	4b39      	ldr	r3, [pc, #228]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80035ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0ea      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 80035da:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d132      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80035e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80035e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035f0:	d10f      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80035f2:	4b30      	ldr	r3, [pc, #192]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80035fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80035fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003606:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800360a:	4a2a      	ldr	r2, [pc, #168]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800360c:	430b      	orrs	r3, r1
 800360e:	61d3      	str	r3, [r2, #28]
 8003610:	e005      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x886>
 8003612:	4b28      	ldr	r3, [pc, #160]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	4a27      	ldr	r2, [pc, #156]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003618:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800361c:	61d3      	str	r3, [r2, #28]
 800361e:	4b25      	ldr	r3, [pc, #148]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003624:	4a23      	ldr	r2, [pc, #140]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800362a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800362e:	4b21      	ldr	r3, [pc, #132]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003630:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8003634:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800363a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363e:	4a1d      	ldr	r2, [pc, #116]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003640:	430b      	orrs	r3, r1
 8003642:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003646:	e008      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003648:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800364c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 8003650:	e003      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003652:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003656:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800365a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003662:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003666:	62bb      	str	r3, [r7, #40]	; 0x28
 8003668:	2300      	movs	r3, #0
 800366a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800366c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003670:	460b      	mov	r3, r1
 8003672:	4313      	orrs	r3, r2
 8003674:	d038      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003676:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800367a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367c:	2b30      	cmp	r3, #48	; 0x30
 800367e:	d014      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003680:	2b30      	cmp	r3, #48	; 0x30
 8003682:	d80e      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003684:	2b20      	cmp	r3, #32
 8003686:	d012      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x916>
 8003688:	2b20      	cmp	r3, #32
 800368a:	d80a      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800368c:	2b00      	cmp	r3, #0
 800368e:	d015      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003690:	2b10      	cmp	r3, #16
 8003692:	d106      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003694:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	4a06      	ldr	r2, [pc, #24]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800369a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800369e:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80036a0:	e00d      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80036a8:	e009      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 80036aa:	bf00      	nop
 80036ac:	e007      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 80036ae:	bf00      	nop
 80036b0:	e005      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x926>
 80036b2:	bf00      	nop
 80036b4:	44020c00 	.word	0x44020c00
 80036b8:	44020800 	.word	0x44020800
        break;
 80036bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036be:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80036c6:	4bb5      	ldr	r3, [pc, #724]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80036c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80036d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d6:	49b1      	ldr	r1, [pc, #708]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 80036de:	e003      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e0:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80036e4:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80036e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80036f4:	623b      	str	r3, [r7, #32]
 80036f6:	2300      	movs	r3, #0
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
 80036fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80036fe:	460b      	mov	r3, r1
 8003700:	4313      	orrs	r3, r2
 8003702:	d03c      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003704:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800370a:	2b04      	cmp	r3, #4
 800370c:	d81d      	bhi.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 800370e:	a201      	add	r2, pc, #4	; (adr r2, 8003714 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8003710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003714:	08003729 	.word	0x08003729
 8003718:	08003737 	.word	0x08003737
 800371c:	0800374b 	.word	0x0800374b
 8003720:	08003753 	.word	0x08003753
 8003724:	08003753 	.word	0x08003753
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003728:	4b9c      	ldr	r3, [pc, #624]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	4a9b      	ldr	r2, [pc, #620]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800372e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003732:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003734:	e00e      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003736:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800373a:	3308      	adds	r3, #8
 800373c:	4618      	mov	r0, r3
 800373e:	f001 fb61 	bl	8004e04 <RCCEx_PLL2_Config>
 8003742:	4603      	mov	r3, r0
 8003744:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003748:	e004      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003750:	e000      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8003752:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003754:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10c      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800375c:	4b8f      	ldr	r3, [pc, #572]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800375e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003762:	f023 0207 	bic.w	r2, r3, #7
 8003766:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800376a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800376c:	498b      	ldr	r1, [pc, #556]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003774:	e003      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003776:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800377a:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800377e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003786:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	2300      	movs	r3, #0
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003794:	460b      	mov	r3, r1
 8003796:	4313      	orrs	r3, r2
 8003798:	d03c      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800379a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d01f      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80037a4:	2b20      	cmp	r3, #32
 80037a6:	d819      	bhi.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80037a8:	2b18      	cmp	r3, #24
 80037aa:	d01d      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80037ac:	2b18      	cmp	r3, #24
 80037ae:	d815      	bhi.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0xa22>
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d007      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80037b8:	e010      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ba:	4b78      	ldr	r3, [pc, #480]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80037bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037be:	4a77      	ldr	r2, [pc, #476]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80037c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c4:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80037c6:	e010      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80037cc:	3308      	adds	r3, #8
 80037ce:	4618      	mov	r0, r3
 80037d0:	f001 fb18 	bl	8004e04 <RCCEx_PLL2_Config>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80037da:	e006      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80037e2:	e002      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80037e4:	bf00      	nop
 80037e6:	e000      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80037e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ea:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10c      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80037f2:	4b6a      	ldr	r3, [pc, #424]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80037f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037f8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80037fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	4966      	ldr	r1, [pc, #408]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800380a:	e003      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003810:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003814:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800382a:	460b      	mov	r3, r1
 800382c:	4313      	orrs	r3, r2
 800382e:	d03e      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003830:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800383a:	d020      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xae6>
 800383c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003840:	d819      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003842:	2bc0      	cmp	r3, #192	; 0xc0
 8003844:	d01d      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8003846:	2bc0      	cmp	r3, #192	; 0xc0
 8003848:	d815      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xade>
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 800384e:	2b40      	cmp	r3, #64	; 0x40
 8003850:	d007      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003852:	e010      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003854:	4b51      	ldr	r3, [pc, #324]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	4a50      	ldr	r2, [pc, #320]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800385a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800385e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003860:	e010      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003862:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003866:	3308      	adds	r3, #8
 8003868:	4618      	mov	r0, r3
 800386a:	f001 facb 	bl	8004e04 <RCCEx_PLL2_Config>
 800386e:	4603      	mov	r3, r0
 8003870:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003874:	e006      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800387c:	e002      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003884:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10c      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800388c:	4b43      	ldr	r3, [pc, #268]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800388e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003892:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003896:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800389a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389c:	493f      	ldr	r1, [pc, #252]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80038a4:	e003      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80038aa:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80038b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b6:	2100      	movs	r1, #0
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80038c4:	460b      	mov	r3, r1
 80038c6:	4313      	orrs	r3, r2
 80038c8:	d038      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80038ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80038ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d4:	d00e      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 80038d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038da:	d815      	bhi.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d017      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 80038e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e4:	d110      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e6:	4b2d      	ldr	r3, [pc, #180]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80038e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ea:	4a2c      	ldr	r2, [pc, #176]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80038ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f0:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80038f2:	e00e      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80038f8:	3308      	adds	r3, #8
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 fa82 	bl	8004e04 <RCCEx_PLL2_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003906:	e004      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800390e:	e000      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8003910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003912:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10c      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800391a:	4b20      	ldr	r3, [pc, #128]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800391c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003920:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003924:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392a:	491c      	ldr	r1, [pc, #112]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8003932:	e003      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003934:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003938:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800393c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	2100      	movs	r1, #0
 8003946:	6039      	str	r1, [r7, #0]
 8003948:	f003 0310 	and.w	r3, r3, #16
 800394c:	607b      	str	r3, [r7, #4]
 800394e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003952:	460b      	mov	r3, r1
 8003954:	4313      	orrs	r3, r2
 8003956:	d039      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003958:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800395c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800395e:	2b30      	cmp	r3, #48	; 0x30
 8003960:	d01e      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003962:	2b30      	cmp	r3, #48	; 0x30
 8003964:	d815      	bhi.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003966:	2b10      	cmp	r3, #16
 8003968:	d002      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 800396a:	2b20      	cmp	r3, #32
 800396c:	d007      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800396e:	e010      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003970:	4b0a      	ldr	r3, [pc, #40]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003974:	4a09      	ldr	r2, [pc, #36]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800397a:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800397c:	e011      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800397e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003982:	3308      	adds	r3, #8
 8003984:	4618      	mov	r0, r3
 8003986:	f001 fa3d 	bl	8004e04 <RCCEx_PLL2_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003990:	e007      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003998:	e003      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 800399a:	bf00      	nop
 800399c:	44020c00 	.word	0x44020c00
        break;
 80039a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a2:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80039aa:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80039ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80039b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80039b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ba:	4908      	ldr	r1, [pc, #32]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80039c2:	e003      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80039c8:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 80039cc:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	37a8      	adds	r7, #168	; 0xa8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039da:	bf00      	nop
 80039dc:	44020c00 	.word	0x44020c00

080039e0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b08b      	sub	sp, #44	; 0x2c
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80039e8:	4bad      	ldr	r3, [pc, #692]	; (8003ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80039ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f0:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80039f2:	4bab      	ldr	r3, [pc, #684]	; (8003ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80039fc:	4ba8      	ldr	r3, [pc, #672]	; (8003ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	0a1b      	lsrs	r3, r3, #8
 8003a02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a06:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8003a08:	4ba5      	ldr	r3, [pc, #660]	; (8003ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003a12:	4ba3      	ldr	r3, [pc, #652]	; (8003ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	08db      	lsrs	r3, r3, #3
 8003a18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 8126 	beq.w	8003c82 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d053      	beq.n	8003ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d86f      	bhi.n	8003b22 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d003      	beq.n	8003a50 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d02b      	beq.n	8003aa6 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8003a4e:	e068      	b.n	8003b22 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003a50:	4b93      	ldr	r3, [pc, #588]	; (8003ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	08db      	lsrs	r3, r3, #3
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	4a92      	ldr	r2, [pc, #584]	; (8003ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a60:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	ee07 3a90 	vmov	s15, r3
 8003a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	ee07 3a90 	vmov	s15, r3
 8003a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	ee07 3a90 	vmov	s15, r3
 8003a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a84:	ed97 6a04 	vldr	s12, [r7, #16]
 8003a88:	eddf 5a87 	vldr	s11, [pc, #540]	; 8003ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003a8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8003aa4:	e068      	b.n	8003b78 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	ee07 3a90 	vmov	s15, r3
 8003aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab0:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8003cac <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003ab4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac2:	ed97 6a04 	vldr	s12, [r7, #16]
 8003ac6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ade:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8003ae2:	e049      	b.n	8003b78 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aee:	eddf 6a70 	vldr	s13, [pc, #448]	; 8003cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8003af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	ee07 3a90 	vmov	s15, r3
 8003afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b00:	ed97 6a04 	vldr	s12, [r7, #16]
 8003b04:	eddf 5a68 	vldr	s11, [pc, #416]	; 8003ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003b08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b1c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8003b20:	e02a      	b.n	8003b78 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003b22:	4b5f      	ldr	r3, [pc, #380]	; (8003ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	08db      	lsrs	r3, r3, #3
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	4a5d      	ldr	r2, [pc, #372]	; (8003ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b32:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	ee07 3a90 	vmov	s15, r3
 8003b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	ee07 3a90 	vmov	s15, r3
 8003b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	ee07 3a90 	vmov	s15, r3
 8003b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b56:	ed97 6a04 	vldr	s12, [r7, #16]
 8003b5a:	eddf 5a53 	vldr	s11, [pc, #332]	; 8003ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b72:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8003b76:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003b78:	4b49      	ldr	r3, [pc, #292]	; (8003ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b84:	d121      	bne.n	8003bca <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003b86:	4b46      	ldr	r3, [pc, #280]	; (8003ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d017      	beq.n	8003bc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003b92:	4b43      	ldr	r3, [pc, #268]	; (8003ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b96:	0a5b      	lsrs	r3, r3, #9
 8003b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b9c:	ee07 3a90 	vmov	s15, r3
 8003ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8003ba4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ba8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003bac:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bb8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	e006      	b.n	8003bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	e002      	b.n	8003bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003bd0:	4b33      	ldr	r3, [pc, #204]	; (8003ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bdc:	d121      	bne.n	8003c22 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003bde:	4b30      	ldr	r3, [pc, #192]	; (8003ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d017      	beq.n	8003c1a <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003bea:	4b2d      	ldr	r3, [pc, #180]	; (8003ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bee:	0c1b      	lsrs	r3, r3, #16
 8003bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bf4:	ee07 3a90 	vmov	s15, r3
 8003bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003bfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c00:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003c04:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c10:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	605a      	str	r2, [r3, #4]
 8003c18:	e006      	b.n	8003c28 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	605a      	str	r2, [r3, #4]
 8003c20:	e002      	b.n	8003c28 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003c28:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c34:	d121      	bne.n	8003c7a <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003c36:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d017      	beq.n	8003c72 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c42:	4b17      	ldr	r3, [pc, #92]	; (8003ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c46:	0e1b      	lsrs	r3, r3, #24
 8003c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c4c:	ee07 3a90 	vmov	s15, r3
 8003c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8003c54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c58:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003c5c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c68:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003c70:	e010      	b.n	8003c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	609a      	str	r2, [r3, #8]
}
 8003c78:	e00c      	b.n	8003c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	609a      	str	r2, [r3, #8]
}
 8003c80:	e008      	b.n	8003c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	609a      	str	r2, [r3, #8]
}
 8003c94:	bf00      	nop
 8003c96:	372c      	adds	r7, #44	; 0x2c
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	44020c00 	.word	0x44020c00
 8003ca4:	03d09000 	.word	0x03d09000
 8003ca8:	46000000 	.word	0x46000000
 8003cac:	4a742400 	.word	0x4a742400
 8003cb0:	4af42400 	.word	0x4af42400

08003cb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b08b      	sub	sp, #44	; 0x2c
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003cbc:	4bad      	ldr	r3, [pc, #692]	; (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003cc6:	4bab      	ldr	r3, [pc, #684]	; (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8003cd0:	4ba8      	ldr	r3, [pc, #672]	; (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	0a1b      	lsrs	r3, r3, #8
 8003cd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cda:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8003cdc:	4ba5      	ldr	r3, [pc, #660]	; (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003ce6:	4ba3      	ldr	r3, [pc, #652]	; (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	08db      	lsrs	r3, r3, #3
 8003cec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfe:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8126 	beq.w	8003f56 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d053      	beq.n	8003db8 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d86f      	bhi.n	8003df6 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d003      	beq.n	8003d24 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d02b      	beq.n	8003d7a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8003d22:	e068      	b.n	8003df6 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d24:	4b93      	ldr	r3, [pc, #588]	; (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	08db      	lsrs	r3, r3, #3
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	4a92      	ldr	r2, [pc, #584]	; (8003f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003d30:	fa22 f303 	lsr.w	r3, r2, r3
 8003d34:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	ee07 3a90 	vmov	s15, r3
 8003d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	ee07 3a90 	vmov	s15, r3
 8003d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	ee07 3a90 	vmov	s15, r3
 8003d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d58:	ed97 6a04 	vldr	s12, [r7, #16]
 8003d5c:	eddf 5a87 	vldr	s11, [pc, #540]	; 8003f7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003d60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d74:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8003d78:	e068      	b.n	8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	ee07 3a90 	vmov	s15, r3
 8003d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d84:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8003f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003d88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d96:	ed97 6a04 	vldr	s12, [r7, #16]
 8003d9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003f7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8003db6:	e049      	b.n	8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc2:	eddf 6a70 	vldr	s13, [pc, #448]	; 8003f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8003dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	ee07 3a90 	vmov	s15, r3
 8003dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dd4:	ed97 6a04 	vldr	s12, [r7, #16]
 8003dd8:	eddf 5a68 	vldr	s11, [pc, #416]	; 8003f7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003ddc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003de0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003de4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003de8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8003df4:	e02a      	b.n	8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003df6:	4b5f      	ldr	r3, [pc, #380]	; (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	08db      	lsrs	r3, r3, #3
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	4a5d      	ldr	r2, [pc, #372]	; (8003f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e02:	fa22 f303 	lsr.w	r3, r2, r3
 8003e06:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	ee07 3a90 	vmov	s15, r3
 8003e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	ee07 3a90 	vmov	s15, r3
 8003e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e2a:	ed97 6a04 	vldr	s12, [r7, #16]
 8003e2e:	eddf 5a53 	vldr	s11, [pc, #332]	; 8003f7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e46:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8003e4a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003e4c:	4b49      	ldr	r3, [pc, #292]	; (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e58:	d121      	bne.n	8003e9e <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003e5a:	4b46      	ldr	r3, [pc, #280]	; (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d017      	beq.n	8003e96 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003e66:	4b43      	ldr	r3, [pc, #268]	; (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6a:	0a5b      	lsrs	r3, r3, #9
 8003e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e70:	ee07 3a90 	vmov	s15, r3
 8003e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8003e78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e7c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003e80:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e8c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	e006      	b.n	8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	e002      	b.n	8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003ea4:	4b33      	ldr	r3, [pc, #204]	; (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003eb0:	d121      	bne.n	8003ef6 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003eb2:	4b30      	ldr	r3, [pc, #192]	; (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d017      	beq.n	8003eee <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003ebe:	4b2d      	ldr	r3, [pc, #180]	; (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec2:	0c1b      	lsrs	r3, r3, #16
 8003ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ec8:	ee07 3a90 	vmov	s15, r3
 8003ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003ed0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ed4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003ed8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ee4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	605a      	str	r2, [r3, #4]
 8003eec:	e006      	b.n	8003efc <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	605a      	str	r2, [r3, #4]
 8003ef4:	e002      	b.n	8003efc <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003efc:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f08:	d121      	bne.n	8003f4e <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003f0a:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d017      	beq.n	8003f46 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003f16:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1a:	0e1b      	lsrs	r3, r3, #24
 8003f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f20:	ee07 3a90 	vmov	s15, r3
 8003f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8003f28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f2c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003f30:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f3c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003f44:	e010      	b.n	8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	609a      	str	r2, [r3, #8]
}
 8003f4c:	e00c      	b.n	8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	609a      	str	r2, [r3, #8]
}
 8003f54:	e008      	b.n	8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	609a      	str	r2, [r3, #8]
}
 8003f68:	bf00      	nop
 8003f6a:	372c      	adds	r7, #44	; 0x2c
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	44020c00 	.word	0x44020c00
 8003f78:	03d09000 	.word	0x03d09000
 8003f7c:	46000000 	.word	0x46000000
 8003f80:	4a742400 	.word	0x4a742400
 8003f84:	4af42400 	.word	0x4af42400

08003f88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08c      	sub	sp, #48	; 0x30
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f96:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8003f9a:	430b      	orrs	r3, r1
 8003f9c:	d14b      	bne.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003f9e:	4bc4      	ldr	r3, [pc, #784]	; (80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003faa:	4bc1      	ldr	r3, [pc, #772]	; (80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d108      	bne.n	8003fca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fbe:	d104      	bne.n	8003fca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8003fc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fc6:	f000 bf14 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003fca:	4bb9      	ldr	r3, [pc, #740]	; (80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fd8:	d108      	bne.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8003fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fe0:	d104      	bne.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8003fe2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fe8:	f000 bf03 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8003fec:	4bb0      	ldr	r3, [pc, #704]	; (80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ff8:	d119      	bne.n	800402e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8003ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004000:	d115      	bne.n	800402e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004002:	4bab      	ldr	r3, [pc, #684]	; (80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800400a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800400e:	d30a      	bcc.n	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8004010:	4ba7      	ldr	r3, [pc, #668]	; (80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	0a1b      	lsrs	r3, r3, #8
 8004016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800401a:	4aa6      	ldr	r2, [pc, #664]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 800401c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004020:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004022:	f000 bee6 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800402a:	f000 bee2 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004032:	f000 bede 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8004036:	e9d7 2300 	ldrd	r2, r3, [r7]
 800403a:	f5a3 5180 	sub.w	r1, r3, #4096	; 0x1000
 800403e:	ea52 0301 	orrs.w	r3, r2, r1
 8004042:	f000 838e 	beq.w	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8004046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800404a:	2a01      	cmp	r2, #1
 800404c:	f573 5380 	sbcs.w	r3, r3, #4096	; 0x1000
 8004050:	f080 86cc 	bcs.w	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004054:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004058:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 800405c:	ea52 0301 	orrs.w	r3, r2, r1
 8004060:	f000 82aa 	beq.w	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8004064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004068:	2a01      	cmp	r2, #1
 800406a:	f573 7300 	sbcs.w	r3, r3, #512	; 0x200
 800406e:	f080 86bd 	bcs.w	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004072:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004076:	f1a3 0110 	sub.w	r1, r3, #16
 800407a:	ea52 0301 	orrs.w	r3, r2, r1
 800407e:	f000 8681 	beq.w	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8004082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004086:	2a01      	cmp	r2, #1
 8004088:	f173 0310 	sbcs.w	r3, r3, #16
 800408c:	f080 86ae 	bcs.w	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004094:	1f19      	subs	r1, r3, #4
 8004096:	ea52 0301 	orrs.w	r3, r2, r1
 800409a:	f000 84b1 	beq.w	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800409e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040a2:	2a01      	cmp	r2, #1
 80040a4:	f173 0304 	sbcs.w	r3, r3, #4
 80040a8:	f080 86a0 	bcs.w	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80040ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040b0:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 80040b4:	430b      	orrs	r3, r1
 80040b6:	f000 85aa 	beq.w	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 80040ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040be:	497e      	ldr	r1, [pc, #504]	; (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80040c0:	428a      	cmp	r2, r1
 80040c2:	f173 0300 	sbcs.w	r3, r3, #0
 80040c6:	f080 8691 	bcs.w	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80040ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040ce:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80040d2:	430b      	orrs	r3, r1
 80040d4:	f000 8532 	beq.w	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 80040d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040dc:	4977      	ldr	r1, [pc, #476]	; (80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 80040de:	428a      	cmp	r2, r1
 80040e0:	f173 0300 	sbcs.w	r3, r3, #0
 80040e4:	f080 8682 	bcs.w	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80040e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040ec:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80040f0:	430b      	orrs	r3, r1
 80040f2:	f000 84bc 	beq.w	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 80040f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040fa:	4971      	ldr	r1, [pc, #452]	; (80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80040fc:	428a      	cmp	r2, r1
 80040fe:	f173 0300 	sbcs.w	r3, r3, #0
 8004102:	f080 8673 	bcs.w	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800410a:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800410e:	430b      	orrs	r3, r1
 8004110:	f000 85f2 	beq.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8004114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004118:	496a      	ldr	r1, [pc, #424]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 800411a:	428a      	cmp	r2, r1
 800411c:	f173 0300 	sbcs.w	r3, r3, #0
 8004120:	f080 8664 	bcs.w	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004128:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800412c:	430b      	orrs	r3, r1
 800412e:	f000 81e5 	beq.w	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8004132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004136:	4964      	ldr	r1, [pc, #400]	; (80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8004138:	428a      	cmp	r2, r1
 800413a:	f173 0300 	sbcs.w	r3, r3, #0
 800413e:	f080 8655 	bcs.w	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004142:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004146:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800414a:	430b      	orrs	r3, r1
 800414c:	f000 83cc 	beq.w	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8004150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004154:	495d      	ldr	r1, [pc, #372]	; (80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8004156:	428a      	cmp	r2, r1
 8004158:	f173 0300 	sbcs.w	r3, r3, #0
 800415c:	f080 8646 	bcs.w	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004164:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8004168:	430b      	orrs	r3, r1
 800416a:	f000 8331 	beq.w	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 800416e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004172:	4957      	ldr	r1, [pc, #348]	; (80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8004174:	428a      	cmp	r2, r1
 8004176:	f173 0300 	sbcs.w	r3, r3, #0
 800417a:	f080 8637 	bcs.w	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800417e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004182:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8004186:	430b      	orrs	r3, r1
 8004188:	f000 82bb 	beq.w	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 800418c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004190:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8004194:	f173 0300 	sbcs.w	r3, r3, #0
 8004198:	f080 8628 	bcs.w	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800419c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041a0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80041a4:	430b      	orrs	r3, r1
 80041a6:	f000 826d 	beq.w	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 80041aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041ae:	f244 0101 	movw	r1, #16385	; 0x4001
 80041b2:	428a      	cmp	r2, r1
 80041b4:	f173 0300 	sbcs.w	r3, r3, #0
 80041b8:	f080 8618 	bcs.w	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80041bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041c0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80041c4:	430b      	orrs	r3, r1
 80041c6:	f000 821e 	beq.w	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 80041ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041ce:	f242 0101 	movw	r1, #8193	; 0x2001
 80041d2:	428a      	cmp	r2, r1
 80041d4:	f173 0300 	sbcs.w	r3, r3, #0
 80041d8:	f080 8608 	bcs.w	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80041dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041e0:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80041e4:	430b      	orrs	r3, r1
 80041e6:	f000 8137 	beq.w	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80041ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041ee:	f241 0101 	movw	r1, #4097	; 0x1001
 80041f2:	428a      	cmp	r2, r1
 80041f4:	f173 0300 	sbcs.w	r3, r3, #0
 80041f8:	f080 85f8 	bcs.w	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80041fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004200:	1f11      	subs	r1, r2, #4
 8004202:	430b      	orrs	r3, r1
 8004204:	f000 80d2 	beq.w	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8004208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800420c:	2a05      	cmp	r2, #5
 800420e:	f173 0300 	sbcs.w	r3, r3, #0
 8004212:	f080 85eb 	bcs.w	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004216:	e9d7 2300 	ldrd	r2, r3, [r7]
 800421a:	1e51      	subs	r1, r2, #1
 800421c:	430b      	orrs	r3, r1
 800421e:	d006      	beq.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8004220:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004224:	1e91      	subs	r1, r2, #2
 8004226:	430b      	orrs	r3, r1
 8004228:	d06c      	beq.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800422a:	f000 bddf 	b.w	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800422e:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004230:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423c:	2b00      	cmp	r3, #0
 800423e:	d104      	bne.n	800424a <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8004240:	f7fe fd7e 	bl	8002d40 <HAL_RCC_GetPCLK2Freq>
 8004244:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004246:	f000 bdd4 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800424a:	4b19      	ldr	r3, [pc, #100]	; (80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004256:	d10a      	bne.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	2b01      	cmp	r3, #1
 800425c:	d107      	bne.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800425e:	f107 030c 	add.w	r3, r7, #12
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fd26 	bl	8003cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800426c:	e048      	b.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800426e:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b02      	cmp	r3, #2
 8004278:	d10c      	bne.n	8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	2b03      	cmp	r3, #3
 800427e:	d109      	bne.n	8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004280:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	08db      	lsrs	r3, r3, #3
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	4a12      	ldr	r2, [pc, #72]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
 8004290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004292:	e035      	b.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8004294:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800429c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a0:	d11c      	bne.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80042a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d119      	bne.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ac:	e028      	b.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80042ae:	bf00      	nop
 80042b0:	44020c00 	.word	0x44020c00
 80042b4:	007a1200 	.word	0x007a1200
 80042b8:	20000001 	.word	0x20000001
 80042bc:	10000001 	.word	0x10000001
 80042c0:	08000001 	.word	0x08000001
 80042c4:	04000001 	.word	0x04000001
 80042c8:	00200001 	.word	0x00200001
 80042cc:	00040001 	.word	0x00040001
 80042d0:	00020001 	.word	0x00020001
 80042d4:	03d09000 	.word	0x03d09000
 80042d8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80042dc:	4b9f      	ldr	r3, [pc, #636]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80042de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d106      	bne.n	80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	2b05      	cmp	r3, #5
 80042ee:	d103      	bne.n	80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 80042f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042f6:	e003      	b.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042fc:	f000 bd79 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004300:	f000 bd77 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004304:	4b95      	ldr	r3, [pc, #596]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004306:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800430a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800430e:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	2b00      	cmp	r3, #0
 8004314:	d104      	bne.n	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004316:	f7fe fcfd 	bl	8002d14 <HAL_RCC_GetPCLK1Freq>
 800431a:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800431c:	f000 bd69 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8004320:	4b8e      	ldr	r3, [pc, #568]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004328:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800432c:	d10a      	bne.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004330:	2b08      	cmp	r3, #8
 8004332:	d107      	bne.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004334:	f107 030c 	add.w	r3, r7, #12
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff fcbb 	bl	8003cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004342:	e031      	b.n	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004344:	4b85      	ldr	r3, [pc, #532]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b02      	cmp	r3, #2
 800434e:	d10c      	bne.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004352:	2b18      	cmp	r3, #24
 8004354:	d109      	bne.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004356:	4b81      	ldr	r3, [pc, #516]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	08db      	lsrs	r3, r3, #3
 800435c:	f003 0303 	and.w	r3, r3, #3
 8004360:	4a7f      	ldr	r2, [pc, #508]	; (8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004362:	fa22 f303 	lsr.w	r3, r2, r3
 8004366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004368:	e01e      	b.n	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800436a:	4b7c      	ldr	r3, [pc, #496]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004376:	d105      	bne.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8004378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437a:	2b20      	cmp	r3, #32
 800437c:	d102      	bne.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 800437e:	4b79      	ldr	r3, [pc, #484]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004382:	e011      	b.n	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004384:	4b75      	ldr	r3, [pc, #468]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004386:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b02      	cmp	r3, #2
 8004390:	d106      	bne.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004394:	2b28      	cmp	r3, #40	; 0x28
 8004396:	d103      	bne.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8004398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800439c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800439e:	e003      	b.n	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043a4:	f000 bd25 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80043a8:	f000 bd23 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80043ac:	4b6b      	ldr	r3, [pc, #428]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80043ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80043b2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80043b6:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d104      	bne.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80043be:	f7fe fca9 	bl	8002d14 <HAL_RCC_GetPCLK1Freq>
 80043c2:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80043c4:	f000 bd15 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80043c8:	4b64      	ldr	r3, [pc, #400]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043d4:	d10a      	bne.n	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	2b40      	cmp	r3, #64	; 0x40
 80043da:	d107      	bne.n	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043dc:	f107 030c 	add.w	r3, r7, #12
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fc67 	bl	8003cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ea:	e033      	b.n	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80043ec:	4b5b      	ldr	r3, [pc, #364]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d10c      	bne.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80043f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fa:	2bc0      	cmp	r3, #192	; 0xc0
 80043fc:	d109      	bne.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80043fe:	4b57      	ldr	r3, [pc, #348]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	08db      	lsrs	r3, r3, #3
 8004404:	f003 0303 	and.w	r3, r3, #3
 8004408:	4a55      	ldr	r2, [pc, #340]	; (8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800440a:	fa22 f303 	lsr.w	r3, r2, r3
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004410:	e020      	b.n	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8004412:	4b52      	ldr	r3, [pc, #328]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800441a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800441e:	d106      	bne.n	800442e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004426:	d102      	bne.n	800442e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8004428:	4b4e      	ldr	r3, [pc, #312]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800442a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800442c:	e012      	b.n	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800442e:	4b4b      	ldr	r3, [pc, #300]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004430:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b02      	cmp	r3, #2
 800443a:	d107      	bne.n	800444c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800443c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004442:	d103      	bne.n	800444c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8004444:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800444a:	e003      	b.n	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004450:	f000 bccf 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004454:	f000 bccd 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004458:	4b40      	ldr	r3, [pc, #256]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800445a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800445e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004462:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004466:	2b00      	cmp	r3, #0
 8004468:	d104      	bne.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800446a:	f7fe fc7f 	bl	8002d6c <HAL_RCC_GetPCLK3Freq>
 800446e:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004470:	f000 bcbf 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800447a:	d108      	bne.n	800448e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800447c:	f107 030c 	add.w	r3, r7, #12
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff fc17 	bl	8003cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800448a:	f000 bcb2 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800448e:	4b33      	ldr	r3, [pc, #204]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b02      	cmp	r3, #2
 8004498:	d10d      	bne.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 800449a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044a0:	d109      	bne.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80044a2:	4b2e      	ldr	r3, [pc, #184]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	08db      	lsrs	r3, r3, #3
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	4a2c      	ldr	r2, [pc, #176]	; (8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80044ae:	fa22 f303 	lsr.w	r3, r2, r3
 80044b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044b4:	e020      	b.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80044b6:	4b29      	ldr	r3, [pc, #164]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044c2:	d106      	bne.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044ca:	d102      	bne.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 80044cc:	4b25      	ldr	r3, [pc, #148]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80044ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044d0:	e012      	b.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80044d2:	4b22      	ldr	r3, [pc, #136]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80044d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d107      	bne.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 80044e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80044e6:	d103      	bne.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 80044e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ee:	e003      	b.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044f4:	f000 bc7d 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80044f8:	f000 bc7b 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80044fc:	4b17      	ldr	r3, [pc, #92]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80044fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	2b00      	cmp	r3, #0
 800450c:	d104      	bne.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800450e:	f7fe fbe5 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8004512:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004514:	f000 bc6d 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451a:	2b01      	cmp	r3, #1
 800451c:	d104      	bne.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 800451e:	f7fe fab1 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8004522:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004524:	f000 bc65 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	2b02      	cmp	r3, #2
 800452c:	d108      	bne.n	8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800452e:	f107 030c 	add.w	r3, r7, #12
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff fbbe 	bl	8003cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800453c:	f000 bc59 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004540:	4b06      	ldr	r3, [pc, #24]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800454c:	d10e      	bne.n	800456c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800454e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004550:	2b03      	cmp	r3, #3
 8004552:	d10b      	bne.n	800456c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8004554:	4b04      	ldr	r3, [pc, #16]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004558:	e02c      	b.n	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 800455a:	bf00      	nop
 800455c:	44020c00 	.word	0x44020c00
 8004560:	03d09000 	.word	0x03d09000
 8004564:	003d0900 	.word	0x003d0900
 8004568:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800456c:	4b95      	ldr	r3, [pc, #596]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b02      	cmp	r3, #2
 8004576:	d10c      	bne.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8004578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457a:	2b04      	cmp	r3, #4
 800457c:	d109      	bne.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800457e:	4b91      	ldr	r3, [pc, #580]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	08db      	lsrs	r3, r3, #3
 8004584:	f003 0303 	and.w	r3, r3, #3
 8004588:	4a8f      	ldr	r2, [pc, #572]	; (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800458a:	fa22 f303 	lsr.w	r3, r2, r3
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004590:	e010      	b.n	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004592:	4b8c      	ldr	r3, [pc, #560]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800459a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800459e:	d105      	bne.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	2b05      	cmp	r3, #5
 80045a4:	d102      	bne.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 80045a6:	4b89      	ldr	r3, [pc, #548]	; (80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80045a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045aa:	e003      	b.n	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045b0:	f000 bc1f 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80045b4:	f000 bc1d 	b.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80045b8:	4b82      	ldr	r3, [pc, #520]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80045ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80045c4:	4b7f      	ldr	r3, [pc, #508]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80045c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d106      	bne.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80045d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d103      	bne.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 80045d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045de:	e011      	b.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80045e0:	4b78      	ldr	r3, [pc, #480]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80045e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045ee:	d106      	bne.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d103      	bne.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 80045f6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80045fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045fc:	e002      	b.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        break;
 8004602:	e3f6      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004604:	e3f5      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004606:	4b6f      	ldr	r3, [pc, #444]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004608:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800460c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004610:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004614:	2b00      	cmp	r3, #0
 8004616:	d103      	bne.n	8004620 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004618:	f7fe fb7c 	bl	8002d14 <HAL_RCC_GetPCLK1Freq>
 800461c:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800461e:	e3e8      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8004620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004626:	d107      	bne.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004628:	f107 030c 	add.w	r3, r7, #12
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fb41 	bl	8003cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004636:	e3dc      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004638:	4b62      	ldr	r3, [pc, #392]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b02      	cmp	r3, #2
 8004642:	d10d      	bne.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004646:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800464a:	d109      	bne.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800464c:	4b5d      	ldr	r3, [pc, #372]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	08db      	lsrs	r3, r3, #3
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	4a5c      	ldr	r2, [pc, #368]	; (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
 800465c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800465e:	e010      	b.n	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8004660:	4b58      	ldr	r3, [pc, #352]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800466c:	d106      	bne.n	800467c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800466e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004670:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004674:	d102      	bne.n	800467c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8004676:	4b55      	ldr	r3, [pc, #340]	; (80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800467a:	e002      	b.n	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004680:	e3b7      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004682:	e3b6      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004684:	4b4f      	ldr	r3, [pc, #316]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004686:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800468a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800468e:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	2b00      	cmp	r3, #0
 8004694:	d103      	bne.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004696:	f7fe fb3d 	bl	8002d14 <HAL_RCC_GetPCLK1Freq>
 800469a:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800469c:	e3a9      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046a4:	d107      	bne.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046a6:	f107 030c 	add.w	r3, r7, #12
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff fb02 	bl	8003cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046b4:	e39d      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80046b6:	4b43      	ldr	r3, [pc, #268]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d10d      	bne.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046c8:	d109      	bne.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80046ca:	4b3e      	ldr	r3, [pc, #248]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	08db      	lsrs	r3, r3, #3
 80046d0:	f003 0303 	and.w	r3, r3, #3
 80046d4:	4a3c      	ldr	r2, [pc, #240]	; (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80046d6:	fa22 f303 	lsr.w	r3, r2, r3
 80046da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046dc:	e010      	b.n	8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80046de:	4b39      	ldr	r3, [pc, #228]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ea:	d106      	bne.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80046ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046f2:	d102      	bne.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 80046f4:	4b35      	ldr	r3, [pc, #212]	; (80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80046f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046f8:	e002      	b.n	8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046fe:	e378      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004700:	e377      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8004702:	4b30      	ldr	r3, [pc, #192]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004704:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004708:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800470c:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800470e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004710:	2b00      	cmp	r3, #0
 8004712:	d103      	bne.n	800471c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004714:	f7fe fafe 	bl	8002d14 <HAL_RCC_GetPCLK1Freq>
 8004718:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800471a:	e36a      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004722:	d107      	bne.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004724:	f107 030c 	add.w	r3, r7, #12
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff fac3 	bl	8003cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004732:	e35e      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8004734:	4b23      	ldr	r3, [pc, #140]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b02      	cmp	r3, #2
 800473e:	d10d      	bne.n	800475c <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004746:	d109      	bne.n	800475c <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004748:	4b1e      	ldr	r3, [pc, #120]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	08db      	lsrs	r3, r3, #3
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	4a1d      	ldr	r2, [pc, #116]	; (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004754:	fa22 f303 	lsr.w	r3, r2, r3
 8004758:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800475a:	e34a      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004760:	e347      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8004762:	4b18      	ldr	r3, [pc, #96]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004764:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004768:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800476c:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	2b00      	cmp	r3, #0
 8004772:	d103      	bne.n	800477c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004774:	f7fe fafa 	bl	8002d6c <HAL_RCC_GetPCLK3Freq>
 8004778:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800477a:	e33a      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 800477c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004782:	d107      	bne.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004784:	f107 030c 	add.w	r3, r7, #12
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff fa93 	bl	8003cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004792:	e32e      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b02      	cmp	r3, #2
 800479e:	d10d      	bne.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047a6:	d109      	bne.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80047a8:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	08db      	lsrs	r3, r3, #3
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	4a05      	ldr	r2, [pc, #20]	; (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80047b4:	fa22 f303 	lsr.w	r3, r2, r3
 80047b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047ba:	e31a      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047c0:	e317      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80047c2:	bf00      	nop
 80047c4:	44020c00 	.word	0x44020c00
 80047c8:	03d09000 	.word	0x03d09000
 80047cc:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80047d0:	4b9b      	ldr	r3, [pc, #620]	; (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80047d2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80047d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28
 80047dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80047e2:	d044      	beq.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80047e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80047ea:	d879      	bhi.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f2:	d02d      	beq.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047fa:	d871      	bhi.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004802:	d017      	beq.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800480a:	d869      	bhi.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800480c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480e:	2b00      	cmp	r3, #0
 8004810:	d004      	beq.n	800481c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8004812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004818:	d004      	beq.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 800481a:	e061      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800481c:	f7fe faa6 	bl	8002d6c <HAL_RCC_GetPCLK3Freq>
 8004820:	62f8      	str	r0, [r7, #44]	; 0x2c
            break;
 8004822:	e060      	b.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004824:	f107 030c 	add.w	r3, r7, #12
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff fa43 	bl	8003cb4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004832:	e058      	b.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004834:	4b82      	ldr	r3, [pc, #520]	; (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b02      	cmp	r3, #2
 8004840:	d103      	bne.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8004842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004846:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004848:	e04d      	b.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800484e:	e04a      	b.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004850:	4b7b      	ldr	r3, [pc, #492]	; (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004856:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800485a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800485e:	d103      	bne.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8004860:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004864:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004866:	e03e      	b.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004868:	2300      	movs	r3, #0
 800486a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800486c:	e03b      	b.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800486e:	4b74      	ldr	r3, [pc, #464]	; (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004874:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004878:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800487a:	4b71      	ldr	r3, [pc, #452]	; (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b02      	cmp	r3, #2
 8004884:	d10c      	bne.n	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	2b00      	cmp	r3, #0
 800488a:	d109      	bne.n	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800488c:	4b6c      	ldr	r3, [pc, #432]	; (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	08db      	lsrs	r3, r3, #3
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	4a6b      	ldr	r2, [pc, #428]	; (8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
 800489c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800489e:	e01e      	b.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80048a0:	4b67      	ldr	r3, [pc, #412]	; (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ac:	d106      	bne.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b4:	d102      	bne.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80048b6:	4b64      	ldr	r3, [pc, #400]	; (8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80048b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ba:	e010      	b.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80048bc:	4b60      	ldr	r3, [pc, #384]	; (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048c8:	d106      	bne.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048d0:	d102      	bne.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80048d2:	4b5e      	ldr	r3, [pc, #376]	; (8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80048d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048d6:	e002      	b.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 80048dc:	e003      	b.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 80048de:	e002      	b.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80048e4:	bf00      	nop
          }
        }
        break;
 80048e6:	e284      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80048e8:	4b55      	ldr	r3, [pc, #340]	; (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80048ea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80048ee:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80048f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80048fa:	d044      	beq.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004902:	d879      	bhi.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800490a:	d02d      	beq.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 800490c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004912:	d871      	bhi.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004916:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800491a:	d017      	beq.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004922:	d869      	bhi.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	2b00      	cmp	r3, #0
 8004928:	d004      	beq.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004930:	d004      	beq.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004932:	e061      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8004934:	f7fe f9ee 	bl	8002d14 <HAL_RCC_GetPCLK1Freq>
 8004938:	62f8      	str	r0, [r7, #44]	; 0x2c
            break;
 800493a:	e060      	b.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800493c:	f107 030c 	add.w	r3, r7, #12
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff f9b7 	bl	8003cb4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800494a:	e058      	b.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800494c:	4b3c      	ldr	r3, [pc, #240]	; (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800494e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b02      	cmp	r3, #2
 8004958:	d103      	bne.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 800495a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800495e:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004960:	e04d      	b.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004962:	2300      	movs	r3, #0
 8004964:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004966:	e04a      	b.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004968:	4b35      	ldr	r3, [pc, #212]	; (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800496a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800496e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004972:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004976:	d103      	bne.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8004978:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800497c:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800497e:	e03e      	b.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004980:	2300      	movs	r3, #0
 8004982:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004984:	e03b      	b.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004986:	4b2e      	ldr	r3, [pc, #184]	; (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004988:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800498c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004990:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004992:	4b2b      	ldr	r3, [pc, #172]	; (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b02      	cmp	r3, #2
 800499c:	d10c      	bne.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d109      	bne.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80049a4:	4b26      	ldr	r3, [pc, #152]	; (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	08db      	lsrs	r3, r3, #3
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	4a25      	ldr	r2, [pc, #148]	; (8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 80049b0:	fa22 f303 	lsr.w	r3, r2, r3
 80049b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049b6:	e01e      	b.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80049b8:	4b21      	ldr	r3, [pc, #132]	; (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c4:	d106      	bne.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049cc:	d102      	bne.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80049ce:	4b1e      	ldr	r3, [pc, #120]	; (8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80049d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049d2:	e010      	b.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80049d4:	4b1a      	ldr	r3, [pc, #104]	; (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049e0:	d106      	bne.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049e8:	d102      	bne.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80049ea:	4b18      	ldr	r3, [pc, #96]	; (8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80049ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ee:	e002      	b.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 80049f4:	e003      	b.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80049f6:	e002      	b.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80049fc:	bf00      	nop
          }
        }
        break;
 80049fe:	e1f8      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004a00:	4b0f      	ldr	r3, [pc, #60]	; (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004a02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0a:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a18:	d105      	bne.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d102      	bne.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8004a20:	4b0a      	ldr	r3, [pc, #40]	; (8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004a22:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8004a24:	e1e5      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8004a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a2c:	d110      	bne.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a2e:	f107 0318 	add.w	r3, r7, #24
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fe ffd4 	bl	80039e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a3c:	e1d9      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004a3e:	bf00      	nop
 8004a40:	44020c00 	.word	0x44020c00
 8004a44:	03d09000 	.word	0x03d09000
 8004a48:	003d0900 	.word	0x003d0900
 8004a4c:	007a1200 	.word	0x007a1200
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a56:	d107      	bne.n	8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a58:	f107 030c 	add.w	r3, r7, #12
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff f929 	bl	8003cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a66:	e1c4      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a6c:	e1c1      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004a6e:	4b9d      	ldr	r3, [pc, #628]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d859      	bhi.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8004a80:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a86:	bf00      	nop
 8004a88:	08004a9d 	.word	0x08004a9d
 8004a8c:	08004aad 	.word	0x08004aad
 8004a90:	08004b35 	.word	0x08004b35
 8004a94:	08004abd 	.word	0x08004abd
 8004a98:	08004ac3 	.word	0x08004ac3
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a9c:	f107 0318 	add.w	r3, r7, #24
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fe ff9d 	bl	80039e0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004aaa:	e046      	b.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004aac:	f107 030c 	add.w	r3, r7, #12
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff f8ff 	bl	8003cb4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004aba:	e03e      	b.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004abc:	4b8a      	ldr	r3, [pc, #552]	; (8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004abe:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004ac0:	e03b      	b.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004ac2:	4b88      	ldr	r3, [pc, #544]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004ac4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ac8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ace:	4b85      	ldr	r3, [pc, #532]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d10c      	bne.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d109      	bne.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ae0:	4b80      	ldr	r3, [pc, #512]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	08db      	lsrs	r3, r3, #3
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	4a80      	ldr	r2, [pc, #512]	; (8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004aec:	fa22 f303 	lsr.w	r3, r2, r3
 8004af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004af2:	e01e      	b.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004af4:	4b7b      	ldr	r3, [pc, #492]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b00:	d106      	bne.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b08:	d102      	bne.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004b0a:	4b79      	ldr	r3, [pc, #484]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b0e:	e010      	b.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b10:	4b74      	ldr	r3, [pc, #464]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b1c:	d106      	bne.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b24:	d102      	bne.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004b26:	4b73      	ldr	r3, [pc, #460]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b2a:	e002      	b.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 8004b30:	e003      	b.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8004b32:	e002      	b.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8004b34:	2300      	movs	r3, #0
 8004b36:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004b38:	bf00      	nop
          }
        }
        break;
 8004b3a:	e15a      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004b3c:	4b69      	ldr	r3, [pc, #420]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4a:	2b20      	cmp	r3, #32
 8004b4c:	d022      	beq.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d858      	bhi.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	2b18      	cmp	r3, #24
 8004b58:	d019      	beq.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	2b18      	cmp	r3, #24
 8004b5e:	d852      	bhi.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d008      	beq.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8004b6c:	e04b      	b.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b6e:	f107 0318 	add.w	r3, r7, #24
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fe ff34 	bl	80039e0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004b7c:	e046      	b.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b7e:	f107 030c 	add.w	r3, r7, #12
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff f896 	bl	8003cb4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004b8c:	e03e      	b.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004b8e:	4b56      	ldr	r3, [pc, #344]	; (8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004b90:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004b92:	e03b      	b.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004b94:	4b53      	ldr	r3, [pc, #332]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004b96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b9a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ba0:	4b50      	ldr	r3, [pc, #320]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d10c      	bne.n	8004bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d109      	bne.n	8004bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004bb2:	4b4c      	ldr	r3, [pc, #304]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	08db      	lsrs	r3, r3, #3
 8004bb8:	f003 0303 	and.w	r3, r3, #3
 8004bbc:	4a4b      	ldr	r2, [pc, #300]	; (8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bc4:	e01e      	b.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004bc6:	4b47      	ldr	r3, [pc, #284]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd2:	d106      	bne.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bda:	d102      	bne.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004bdc:	4b44      	ldr	r3, [pc, #272]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004be0:	e010      	b.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004be2:	4b40      	ldr	r3, [pc, #256]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bee:	d106      	bne.n	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bf6:	d102      	bne.n	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004bf8:	4b3e      	ldr	r3, [pc, #248]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bfc:	e002      	b.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 8004c02:	e003      	b.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8004c04:	e002      	b.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004c0a:	bf00      	nop
          }
        }
        break;
 8004c0c:	e0f1      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004c0e:	4b35      	ldr	r3, [pc, #212]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c14:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c20:	d023      	beq.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c28:	d858      	bhi.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8004c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2c:	2bc0      	cmp	r3, #192	; 0xc0
 8004c2e:	d019      	beq.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	2bc0      	cmp	r3, #192	; 0xc0
 8004c34:	d852      	bhi.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8004c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8004c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3e:	2b40      	cmp	r3, #64	; 0x40
 8004c40:	d008      	beq.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8004c42:	e04b      	b.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c44:	f107 0318 	add.w	r3, r7, #24
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fe fec9 	bl	80039e0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004c52:	e046      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c54:	f107 030c 	add.w	r3, r7, #12
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff f82b 	bl	8003cb4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004c62:	e03e      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004c64:	4b20      	ldr	r3, [pc, #128]	; (8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004c66:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004c68:	e03b      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004c6a:	4b1e      	ldr	r3, [pc, #120]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c70:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c76:	4b1b      	ldr	r3, [pc, #108]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d10c      	bne.n	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d109      	bne.n	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c88:	4b16      	ldr	r3, [pc, #88]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	08db      	lsrs	r3, r3, #3
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	4a16      	ldr	r2, [pc, #88]	; (8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004c94:	fa22 f303 	lsr.w	r3, r2, r3
 8004c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c9a:	e01e      	b.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c9c:	4b11      	ldr	r3, [pc, #68]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca8:	d106      	bne.n	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb0:	d102      	bne.n	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004cb2:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cb6:	e010      	b.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004cb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cc4:	d106      	bne.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ccc:	d102      	bne.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004cce:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cd2:	e002      	b.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 8004cd8:	e003      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8004cda:	e002      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004ce0:	bf00      	nop
          }
        }
        break;
 8004ce2:	e086      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004ce4:	44020c00 	.word	0x44020c00
 8004ce8:	00bb8000 	.word	0x00bb8000
 8004cec:	03d09000 	.word	0x03d09000
 8004cf0:	003d0900 	.word	0x003d0900
 8004cf4:	007a1200 	.word	0x007a1200
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004cf8:	4b40      	ldr	r3, [pc, #256]	; (8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004cfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004cfe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d02:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8004d04:	4b3d      	ldr	r3, [pc, #244]	; (8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d10:	d105      	bne.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d102      	bne.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8004d18:	4b39      	ldr	r3, [pc, #228]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8004d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d1c:	e031      	b.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8004d1e:	4b37      	ldr	r3, [pc, #220]	; (8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d2a:	d10a      	bne.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	2b10      	cmp	r3, #16
 8004d30:	d107      	bne.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d32:	f107 0318 	add.w	r3, r7, #24
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fe fe52 	bl	80039e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d40:	e01f      	b.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8004d42:	4b2e      	ldr	r3, [pc, #184]	; (8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004d44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d106      	bne.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	2b20      	cmp	r3, #32
 8004d54:	d103      	bne.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8004d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d5c:	e011      	b.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8004d5e:	4b27      	ldr	r3, [pc, #156]	; (8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004d60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d6c:	d106      	bne.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	2b30      	cmp	r3, #48	; 0x30
 8004d72:	d103      	bne.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8004d74:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d7a:	e002      	b.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        break;
 8004d80:	e037      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004d82:	e036      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004d84:	4b1d      	ldr	r3, [pc, #116]	; (8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004d86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004d8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d8e:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	2b10      	cmp	r3, #16
 8004d94:	d107      	bne.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d96:	f107 0318 	add.w	r3, r7, #24
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fe fe20 	bl	80039e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8004da4:	e025      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 8004da6:	4b15      	ldr	r3, [pc, #84]	; (8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004db2:	d10a      	bne.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8004db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	d107      	bne.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dba:	f107 030c 	add.w	r3, r7, #12
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fe ff78 	bl	8003cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dc8:	e00f      	b.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8004dca:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd6:	d105      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dda:	2b30      	cmp	r3, #48	; 0x30
 8004ddc:	d102      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 8004dde:	4b08      	ldr	r3, [pc, #32]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8004de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004de2:	e002      	b.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        break;
 8004de8:	e003      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004dea:	e002      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004df0:	bf00      	nop
    }
  }

  return (frequency);
 8004df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3730      	adds	r7, #48	; 0x30
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	44020c00 	.word	0x44020c00
 8004e00:	02dc6c00 	.word	0x02dc6c00

08004e04 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8004e0c:	4b48      	ldr	r3, [pc, #288]	; (8004f30 <RCCEx_PLL2_Config+0x12c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a47      	ldr	r2, [pc, #284]	; (8004f30 <RCCEx_PLL2_Config+0x12c>)
 8004e12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e16:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e18:	f7fc fccc 	bl	80017b4 <HAL_GetTick>
 8004e1c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e1e:	e008      	b.n	8004e32 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e20:	f7fc fcc8 	bl	80017b4 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e07a      	b.n	8004f28 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e32:	4b3f      	ldr	r3, [pc, #252]	; (8004f30 <RCCEx_PLL2_Config+0x12c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f0      	bne.n	8004e20 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004e3e:	4b3c      	ldr	r3, [pc, #240]	; (8004f30 <RCCEx_PLL2_Config+0x12c>)
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004e46:	f023 0303 	bic.w	r3, r3, #3
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6811      	ldr	r1, [r2, #0]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6852      	ldr	r2, [r2, #4]
 8004e52:	0212      	lsls	r2, r2, #8
 8004e54:	430a      	orrs	r2, r1
 8004e56:	4936      	ldr	r1, [pc, #216]	; (8004f30 <RCCEx_PLL2_Config+0x12c>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	025b      	lsls	r3, r3, #9
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	041b      	lsls	r3, r3, #16
 8004e7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	3b01      	subs	r3, #1
 8004e86:	061b      	lsls	r3, r3, #24
 8004e88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e8c:	4928      	ldr	r1, [pc, #160]	; (8004f30 <RCCEx_PLL2_Config+0x12c>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004e92:	4b27      	ldr	r3, [pc, #156]	; (8004f30 <RCCEx_PLL2_Config+0x12c>)
 8004e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e96:	f023 020c 	bic.w	r2, r3, #12
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	4924      	ldr	r1, [pc, #144]	; (8004f30 <RCCEx_PLL2_Config+0x12c>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8004ea4:	4b22      	ldr	r3, [pc, #136]	; (8004f30 <RCCEx_PLL2_Config+0x12c>)
 8004ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea8:	f023 0220 	bic.w	r2, r3, #32
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	491f      	ldr	r1, [pc, #124]	; (8004f30 <RCCEx_PLL2_Config+0x12c>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004eb6:	4b1e      	ldr	r3, [pc, #120]	; (8004f30 <RCCEx_PLL2_Config+0x12c>)
 8004eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	491c      	ldr	r1, [pc, #112]	; (8004f30 <RCCEx_PLL2_Config+0x12c>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8004ec4:	4b1a      	ldr	r3, [pc, #104]	; (8004f30 <RCCEx_PLL2_Config+0x12c>)
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	4a19      	ldr	r2, [pc, #100]	; (8004f30 <RCCEx_PLL2_Config+0x12c>)
 8004eca:	f023 0310 	bic.w	r3, r3, #16
 8004ece:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8004ed0:	4b17      	ldr	r3, [pc, #92]	; (8004f30 <RCCEx_PLL2_Config+0x12c>)
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ed8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6a12      	ldr	r2, [r2, #32]
 8004ee0:	00d2      	lsls	r2, r2, #3
 8004ee2:	4913      	ldr	r1, [pc, #76]	; (8004f30 <RCCEx_PLL2_Config+0x12c>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8004ee8:	4b11      	ldr	r3, [pc, #68]	; (8004f30 <RCCEx_PLL2_Config+0x12c>)
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	4a10      	ldr	r2, [pc, #64]	; (8004f30 <RCCEx_PLL2_Config+0x12c>)
 8004eee:	f043 0310 	orr.w	r3, r3, #16
 8004ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8004ef4:	4b0e      	ldr	r3, [pc, #56]	; (8004f30 <RCCEx_PLL2_Config+0x12c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a0d      	ldr	r2, [pc, #52]	; (8004f30 <RCCEx_PLL2_Config+0x12c>)
 8004efa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004efe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f00:	f7fc fc58 	bl	80017b4 <HAL_GetTick>
 8004f04:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f06:	e008      	b.n	8004f1a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f08:	f7fc fc54 	bl	80017b4 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e006      	b.n	8004f28 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f1a:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <RCCEx_PLL2_Config+0x12c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f0      	beq.n	8004f08 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0

}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	44020c00 	.word	0x44020c00

08004f34 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e0e7      	b.n	8005116 <HAL_SPI_Init+0x1e2>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d105      	bne.n	8004f60 <HAL_SPI_Init+0x2c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	2b0f      	cmp	r3, #15
 8004f5a:	d901      	bls.n	8004f60 <HAL_SPI_Init+0x2c>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e0da      	b.n	8005116 <HAL_SPI_Init+0x1e2>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 fbc1 	bl	80056e8 <SPI_GetPacketSize>
 8004f66:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d102      	bne.n	8004f76 <HAL_SPI_Init+0x42>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d811      	bhi.n	8004f9a <HAL_SPI_Init+0x66>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f7a:	4a69      	ldr	r2, [pc, #420]	; (8005120 <HAL_SPI_Init+0x1ec>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d009      	beq.n	8004f94 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a67      	ldr	r2, [pc, #412]	; (8005124 <HAL_SPI_Init+0x1f0>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d004      	beq.n	8004f94 <HAL_SPI_Init+0x60>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a66      	ldr	r2, [pc, #408]	; (8005128 <HAL_SPI_Init+0x1f4>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d104      	bne.n	8004f9e <HAL_SPI_Init+0x6a>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b10      	cmp	r3, #16
 8004f98:	d901      	bls.n	8004f9e <HAL_SPI_Init+0x6a>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e0bb      	b.n	8005116 <HAL_SPI_Init+0x1e2>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d106      	bne.n	8004fb8 <HAL_SPI_Init+0x84>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fc f83c 	bl	8001030 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0201 	bic.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004fda:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fe4:	d119      	bne.n	800501a <HAL_SPI_Init+0xe6>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fee:	d103      	bne.n	8004ff8 <HAL_SPI_Init+0xc4>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d008      	beq.n	800500a <HAL_SPI_Init+0xd6>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10c      	bne.n	800501a <HAL_SPI_Init+0xe6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005008:	d107      	bne.n	800501a <HAL_SPI_Init+0xe6>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005018:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00f      	beq.n	8005046 <HAL_SPI_Init+0x112>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2b06      	cmp	r3, #6
 800502c:	d90b      	bls.n	8005046 <HAL_SPI_Init+0x112>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	e007      	b.n	8005056 <HAL_SPI_Init+0x122>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005054:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69da      	ldr	r2, [r3, #28]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505e:	431a      	orrs	r2, r3
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005068:	ea42 0103 	orr.w	r1, r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	431a      	orrs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	431a      	orrs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	431a      	orrs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c2:	ea42 0103 	orr.w	r1, r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0201 	bic.w	r2, r2, #1
 80050e0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <HAL_SPI_Init+0x1d0>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	40013000 	.word	0x40013000
 8005124:	40003800 	.word	0x40003800
 8005128:	40003c00 	.word	0x40003c00

0800512c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08a      	sub	sp, #40	; 0x28
 8005130:	af02      	add	r7, sp, #8
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	4613      	mov	r3, r2
 800513a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3320      	adds	r3, #32
 8005142:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <HAL_SPI_Transmit+0x2a>
 8005152:	2302      	movs	r3, #2
 8005154:	e1f5      	b.n	8005542 <HAL_SPI_Transmit+0x416>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800515e:	f7fc fb29 	bl	80017b4 <HAL_GetTick>
 8005162:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b01      	cmp	r3, #1
 800516e:	d007      	beq.n	8005180 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005170:	2302      	movs	r3, #2
 8005172:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800517c:	7efb      	ldrb	r3, [r7, #27]
 800517e:	e1e0      	b.n	8005542 <HAL_SPI_Transmit+0x416>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <HAL_SPI_Transmit+0x60>
 8005186:	88fb      	ldrh	r3, [r7, #6]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d107      	bne.n	800519c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8005198:	7efb      	ldrb	r3, [r7, #27]
 800519a:	e1d2      	b.n	8005542 <HAL_SPI_Transmit+0x416>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2203      	movs	r2, #3
 80051a0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	88fa      	ldrh	r2, [r7, #6]
 80051b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	88fa      	ldrh	r2, [r7, #6]
 80051be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80051ec:	d108      	bne.n	8005200 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	e009      	b.n	8005214 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005212:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	0c1b      	lsrs	r3, r3, #16
 800521c:	041b      	lsls	r3, r3, #16
 800521e:	88f9      	ldrh	r1, [r7, #6]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	6812      	ldr	r2, [r2, #0]
 8005224:	430b      	orrs	r3, r1
 8005226:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0201 	orr.w	r2, r2, #1
 8005236:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005240:	d107      	bne.n	8005252 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005250:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2b0f      	cmp	r3, #15
 8005258:	d956      	bls.n	8005308 <HAL_SPI_Transmit+0x1dc>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a8d      	ldr	r2, [pc, #564]	; (8005494 <HAL_SPI_Transmit+0x368>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d04a      	beq.n	80052fa <HAL_SPI_Transmit+0x1ce>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a8b      	ldr	r2, [pc, #556]	; (8005498 <HAL_SPI_Transmit+0x36c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d045      	beq.n	80052fa <HAL_SPI_Transmit+0x1ce>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a8a      	ldr	r2, [pc, #552]	; (800549c <HAL_SPI_Transmit+0x370>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d147      	bne.n	8005308 <HAL_SPI_Transmit+0x1dc>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005278:	e03f      	b.n	80052fa <HAL_SPI_Transmit+0x1ce>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b02      	cmp	r3, #2
 8005286:	d114      	bne.n	80052b2 <HAL_SPI_Transmit+0x186>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6812      	ldr	r2, [r2, #0]
 8005292:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005298:	1d1a      	adds	r2, r3, #4
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80052b0:	e023      	b.n	80052fa <HAL_SPI_Transmit+0x1ce>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052b2:	f7fc fa7f 	bl	80017b4 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d803      	bhi.n	80052ca <HAL_SPI_Transmit+0x19e>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c8:	d102      	bne.n	80052d0 <HAL_SPI_Transmit+0x1a4>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d114      	bne.n	80052fa <HAL_SPI_Transmit+0x1ce>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 f93b 	bl	800554c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e123      	b.n	8005542 <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1b9      	bne.n	800527a <HAL_SPI_Transmit+0x14e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005306:	e0f6      	b.n	80054f6 <HAL_SPI_Transmit+0x3ca>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	2b07      	cmp	r3, #7
 800530e:	f240 80eb 	bls.w	80054e8 <HAL_SPI_Transmit+0x3bc>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005312:	e05d      	b.n	80053d0 <HAL_SPI_Transmit+0x2a4>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b02      	cmp	r3, #2
 8005320:	d132      	bne.n	8005388 <HAL_SPI_Transmit+0x25c>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b01      	cmp	r3, #1
 800532c:	d918      	bls.n	8005360 <HAL_SPI_Transmit+0x234>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d014      	beq.n	8005360 <HAL_SPI_Transmit+0x234>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005346:	1d1a      	adds	r2, r3, #4
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005352:	b29b      	uxth	r3, r3
 8005354:	3b02      	subs	r3, #2
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800535e:	e037      	b.n	80053d0 <HAL_SPI_Transmit+0x2a4>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005364:	881a      	ldrh	r2, [r3, #0]
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800536e:	1c9a      	adds	r2, r3, #2
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800537a:	b29b      	uxth	r3, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005386:	e023      	b.n	80053d0 <HAL_SPI_Transmit+0x2a4>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005388:	f7fc fa14 	bl	80017b4 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	429a      	cmp	r2, r3
 8005396:	d803      	bhi.n	80053a0 <HAL_SPI_Transmit+0x274>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539e:	d102      	bne.n	80053a6 <HAL_SPI_Transmit+0x27a>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d114      	bne.n	80053d0 <HAL_SPI_Transmit+0x2a4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 f8d0 	bl	800554c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e0b8      	b.n	8005542 <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d19b      	bne.n	8005314 <HAL_SPI_Transmit+0x1e8>
 80053dc:	e08b      	b.n	80054f6 <HAL_SPI_Transmit+0x3ca>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d159      	bne.n	80054a0 <HAL_SPI_Transmit+0x374>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	d918      	bls.n	800542a <HAL_SPI_Transmit+0x2fe>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fc:	2b40      	cmp	r3, #64	; 0x40
 80053fe:	d914      	bls.n	800542a <HAL_SPI_Transmit+0x2fe>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6812      	ldr	r2, [r2, #0]
 800540a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005410:	1d1a      	adds	r2, r3, #4
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800541c:	b29b      	uxth	r3, r3
 800541e:	3b04      	subs	r3, #4
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005428:	e05e      	b.n	80054e8 <HAL_SPI_Transmit+0x3bc>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005430:	b29b      	uxth	r3, r3
 8005432:	2b01      	cmp	r3, #1
 8005434:	d917      	bls.n	8005466 <HAL_SPI_Transmit+0x33a>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d013      	beq.n	8005466 <HAL_SPI_Transmit+0x33a>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005442:	881a      	ldrh	r2, [r3, #0]
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800544c:	1c9a      	adds	r2, r3, #2
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b02      	subs	r3, #2
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005464:	e040      	b.n	80054e8 <HAL_SPI_Transmit+0x3bc>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3320      	adds	r3, #32
 8005470:	7812      	ldrb	r2, [r2, #0]
 8005472:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005484:	b29b      	uxth	r3, r3
 8005486:	3b01      	subs	r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005490:	e02a      	b.n	80054e8 <HAL_SPI_Transmit+0x3bc>
 8005492:	bf00      	nop
 8005494:	40013000 	.word	0x40013000
 8005498:	40003800 	.word	0x40003800
 800549c:	40003c00 	.word	0x40003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054a0:	f7fc f988 	bl	80017b4 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d803      	bhi.n	80054b8 <HAL_SPI_Transmit+0x38c>
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b6:	d102      	bne.n	80054be <HAL_SPI_Transmit+0x392>
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d114      	bne.n	80054e8 <HAL_SPI_Transmit+0x3bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 f844 	bl	800554c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e02c      	b.n	8005542 <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f47f af74 	bne.w	80053de <HAL_SPI_Transmit+0x2b2>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2200      	movs	r2, #0
 80054fe:	2108      	movs	r1, #8
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f8c3 	bl	800568c <SPI_WaitOnFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d007      	beq.n	800551c <HAL_SPI_Transmit+0x3f0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005512:	f043 0220 	orr.w	r2, r3, #32
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f815 	bl	800554c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <HAL_SPI_Transmit+0x414>
  {
    return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e000      	b.n	8005542 <HAL_SPI_Transmit+0x416>
  }
  return errorcode;
 8005540:	7efb      	ldrb	r3, [r7, #27]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3720      	adds	r7, #32
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop

0800554c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699a      	ldr	r2, [r3, #24]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0208 	orr.w	r2, r2, #8
 800556a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699a      	ldr	r2, [r3, #24]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f042 0210 	orr.w	r2, r2, #16
 800557a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0201 	bic.w	r2, r2, #1
 800558a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6812      	ldr	r2, [r2, #0]
 8005596:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 800559a:	f023 0303 	bic.w	r3, r3, #3
 800559e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80055ae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d014      	beq.n	80055e6 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00f      	beq.n	80055e6 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699a      	ldr	r2, [r3, #24]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f042 0220 	orr.w	r2, r2, #32
 80055e4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b03      	cmp	r3, #3
 80055f0:	d014      	beq.n	800561c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00f      	beq.n	800561c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005602:	f043 0204 	orr.w	r2, r3, #4
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800561a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00f      	beq.n	8005646 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800562c:	f043 0201 	orr.w	r2, r3, #1
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	699a      	ldr	r2, [r3, #24]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005644:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00f      	beq.n	8005670 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005656:	f043 0208 	orr.w	r2, r3, #8
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800566e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8005680:	bf00      	nop
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	603b      	str	r3, [r7, #0]
 8005698:	4613      	mov	r3, r2
 800569a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800569c:	e010      	b.n	80056c0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800569e:	f7fc f889 	bl	80017b4 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d803      	bhi.n	80056b6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b4:	d102      	bne.n	80056bc <SPI_WaitOnFlagUntilTimeout+0x30>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e00f      	b.n	80056e0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695a      	ldr	r2, [r3, #20]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	4013      	ands	r3, r2
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	bf0c      	ite	eq
 80056d0:	2301      	moveq	r3, #1
 80056d2:	2300      	movne	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	461a      	mov	r2, r3
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d0df      	beq.n	800569e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f4:	095b      	lsrs	r3, r3, #5
 80056f6:	3301      	adds	r3, #1
 80056f8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	3301      	adds	r3, #1
 8005700:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	3307      	adds	r3, #7
 8005706:	08db      	lsrs	r3, r3, #3
 8005708:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	fb02 f303 	mul.w	r3, r2, r3
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b082      	sub	sp, #8
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e042      	b.n	80057b6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005736:	2b00      	cmp	r3, #0
 8005738:	d106      	bne.n	8005748 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fb febc 	bl	80014c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2224      	movs	r2, #36	; 0x24
 800574c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0201 	bic.w	r2, r2, #1
 800575e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fd93 	bl	8006294 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fc12 	bl	8005f98 <UART_SetConfig>
 8005774:	4603      	mov	r3, r0
 8005776:	2b01      	cmp	r3, #1
 8005778:	d101      	bne.n	800577e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e01b      	b.n	80057b6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800578c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800579c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f042 0201 	orr.w	r2, r2, #1
 80057ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fe12 	bl	80063d8 <UART_CheckIdleState>
 80057b4:	4603      	mov	r3, r0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b08a      	sub	sp, #40	; 0x28
 80057c2:	af02      	add	r7, sp, #8
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	603b      	str	r3, [r7, #0]
 80057ca:	4613      	mov	r3, r2
 80057cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d4:	2b20      	cmp	r3, #32
 80057d6:	f040 808b 	bne.w	80058f0 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <HAL_UART_Transmit+0x28>
 80057e0:	88fb      	ldrh	r3, [r7, #6]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e083      	b.n	80058f2 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f4:	2b80      	cmp	r3, #128	; 0x80
 80057f6:	d107      	bne.n	8005808 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005806:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2221      	movs	r2, #33	; 0x21
 8005814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005818:	f7fb ffcc 	bl	80017b4 <HAL_GetTick>
 800581c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	88fa      	ldrh	r2, [r7, #6]
 8005822:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	88fa      	ldrh	r2, [r7, #6]
 800582a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005836:	d108      	bne.n	800584a <HAL_UART_Transmit+0x8c>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d104      	bne.n	800584a <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8005840:	2300      	movs	r3, #0
 8005842:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	61bb      	str	r3, [r7, #24]
 8005848:	e003      	b.n	8005852 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800584e:	2300      	movs	r3, #0
 8005850:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005852:	e030      	b.n	80058b6 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2200      	movs	r2, #0
 800585c:	2180      	movs	r1, #128	; 0x80
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 fe64 	bl	800652c <UART_WaitOnFlagUntilTimeout>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d005      	beq.n	8005876 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2220      	movs	r2, #32
 800586e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e03d      	b.n	80058f2 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10b      	bne.n	8005894 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800588a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	3302      	adds	r3, #2
 8005890:	61bb      	str	r3, [r7, #24]
 8005892:	e007      	b.n	80058a4 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	781a      	ldrb	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	3301      	adds	r3, #1
 80058a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1c8      	bne.n	8005854 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2200      	movs	r2, #0
 80058ca:	2140      	movs	r1, #64	; 0x40
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 fe2d 	bl	800652c <UART_WaitOnFlagUntilTimeout>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d005      	beq.n	80058e4 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2220      	movs	r2, #32
 80058dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e006      	b.n	80058f2 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2220      	movs	r2, #32
 80058e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	e000      	b.n	80058f2 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80058f0:	2302      	movs	r3, #2
  }
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3720      	adds	r7, #32
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08a      	sub	sp, #40	; 0x28
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	4613      	mov	r3, r2
 8005908:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005910:	2b20      	cmp	r3, #32
 8005912:	d146      	bne.n	80059a2 <HAL_UART_Receive_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <HAL_UART_Receive_IT+0x24>
 800591a:	88fb      	ldrh	r3, [r7, #6]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e03f      	b.n	80059a4 <HAL_UART_Receive_IT+0xa8>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005934:	2b40      	cmp	r3, #64	; 0x40
 8005936:	d107      	bne.n	8005948 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005946:	609a      	str	r2, [r3, #8]
    }

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a17      	ldr	r2, [pc, #92]	; (80059ac <HAL_UART_Receive_IT+0xb0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d01f      	beq.n	8005992 <HAL_UART_Receive_IT+0x96>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d018      	beq.n	8005992 <HAL_UART_Receive_IT+0x96>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	613b      	str	r3, [r7, #16]
   return(result);
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	461a      	mov	r2, r3
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	623b      	str	r3, [r7, #32]
 8005980:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005982:	69f9      	ldr	r1, [r7, #28]
 8005984:	6a3a      	ldr	r2, [r7, #32]
 8005986:	e841 2300 	strex	r3, r2, [r1]
 800598a:	61bb      	str	r3, [r7, #24]
   return(result);
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1e6      	bne.n	8005960 <HAL_UART_Receive_IT+0x64>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005992:	88fb      	ldrh	r3, [r7, #6]
 8005994:	461a      	mov	r2, r3
 8005996:	68b9      	ldr	r1, [r7, #8]
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 fe2f 	bl	80065fc <UART_Start_Receive_IT>
 800599e:	4603      	mov	r3, r0
 80059a0:	e000      	b.n	80059a4 <HAL_UART_Receive_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80059a2:	2302      	movs	r3, #2
  }
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3728      	adds	r7, #40	; 0x28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	44002400 	.word	0x44002400

080059b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b0ae      	sub	sp, #184	; 0xb8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059da:	f640 030f 	movw	r3, #2063	; 0x80f
 80059de:	4013      	ands	r3, r2
 80059e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 80059e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d11b      	bne.n	8005a24 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80059ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80059f0:	f003 0320 	and.w	r3, r3, #32
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d015      	beq.n	8005a24 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80059f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80059fc:	f003 0320 	and.w	r3, r3, #32
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d105      	bne.n	8005a10 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d009      	beq.n	8005a24 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 8293 	beq.w	8005f40 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	4798      	blx	r3
      }
      return;
 8005a22:	e28d      	b.n	8005f40 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 80fd 	beq.w	8005c28 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005a2e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005a32:	4b7a      	ldr	r3, [pc, #488]	; (8005c1c <HAL_UART_IRQHandler+0x26c>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d106      	bne.n	8005a48 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005a3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a3e:	4b78      	ldr	r3, [pc, #480]	; (8005c20 <HAL_UART_IRQHandler+0x270>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 80f0 	beq.w	8005c28 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d011      	beq.n	8005a78 <HAL_UART_IRQHandler+0xc8>
 8005a54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00b      	beq.n	8005a78 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2201      	movs	r2, #1
 8005a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6e:	f043 0201 	orr.w	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d011      	beq.n	8005aa8 <HAL_UART_IRQHandler+0xf8>
 8005a84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00b      	beq.n	8005aa8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2202      	movs	r2, #2
 8005a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a9e:	f043 0204 	orr.w	r2, r3, #4
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005aa8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d011      	beq.n	8005ad8 <HAL_UART_IRQHandler+0x128>
 8005ab4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00b      	beq.n	8005ad8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2204      	movs	r2, #4
 8005ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ace:	f043 0202 	orr.w	r2, r3, #2
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ad8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005adc:	f003 0308 	and.w	r3, r3, #8
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d017      	beq.n	8005b14 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ae4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ae8:	f003 0320 	and.w	r3, r3, #32
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d105      	bne.n	8005afc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005af0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005af4:	4b49      	ldr	r3, [pc, #292]	; (8005c1c <HAL_UART_IRQHandler+0x26c>)
 8005af6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00b      	beq.n	8005b14 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2208      	movs	r2, #8
 8005b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0a:	f043 0208 	orr.w	r2, r3, #8
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d012      	beq.n	8005b46 <HAL_UART_IRQHandler+0x196>
 8005b20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00c      	beq.n	8005b46 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3c:	f043 0220 	orr.w	r2, r3, #32
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 81f9 	beq.w	8005f44 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d013      	beq.n	8005b86 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b62:	f003 0320 	and.w	r3, r3, #32
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d105      	bne.n	8005b76 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d007      	beq.n	8005b86 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9a:	2b40      	cmp	r3, #64	; 0x40
 8005b9c:	d005      	beq.n	8005baa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005ba2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d02e      	beq.n	8005c08 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fe48 	bl	8006840 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bba:	2b40      	cmp	r3, #64	; 0x40
 8005bbc:	d120      	bne.n	8005c00 <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d017      	beq.n	8005bf8 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bce:	4a15      	ldr	r2, [pc, #84]	; (8005c24 <HAL_UART_IRQHandler+0x274>)
 8005bd0:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7fb ffa6 	bl	8001b2a <HAL_DMA_Abort_IT>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d019      	beq.n	8005c18 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf6:	e00f      	b.n	8005c18 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f9b7 	bl	8005f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bfe:	e00b      	b.n	8005c18 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f9b3 	bl	8005f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c06:	e007      	b.n	8005c18 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f9af 	bl	8005f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005c16:	e195      	b.n	8005f44 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c18:	bf00      	nop
    return;
 8005c1a:	e193      	b.n	8005f44 <HAL_UART_IRQHandler+0x594>
 8005c1c:	10000001 	.word	0x10000001
 8005c20:	04000120 	.word	0x04000120
 8005c24:	0800690d 	.word	0x0800690d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	f040 8129 	bne.w	8005e84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c36:	f003 0310 	and.w	r3, r3, #16
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 8122 	beq.w	8005e84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c44:	f003 0310 	and.w	r3, r3, #16
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 811b 	beq.w	8005e84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2210      	movs	r2, #16
 8005c54:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c60:	2b40      	cmp	r3, #64	; 0x40
 8005c62:	f040 8091 	bne.w	8005d88 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c70:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 8005c74:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 8165 	beq.w	8005f48 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c84:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	f080 815d 	bcs.w	8005f48 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005c94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca0:	2b81      	cmp	r3, #129	; 0x81
 8005ca2:	d060      	beq.n	8005d66 <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cac:	e853 3f00 	ldrex	r3, [r3]
 8005cb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cca:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005cce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005cd2:	e841 2300 	strex	r3, r2, [r1]
 8005cd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e2      	bne.n	8005ca4 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ce8:	e853 3f00 	ldrex	r3, [r3]
 8005cec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cf0:	f023 0301 	bic.w	r3, r3, #1
 8005cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3308      	adds	r3, #8
 8005cfe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005d02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e3      	bne.n	8005cde <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d34:	f023 0310 	bic.w	r3, r3, #16
 8005d38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	461a      	mov	r2, r3
 8005d42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d46:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d48:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d4e:	e841 2300 	strex	r3, r2, [r1]
 8005d52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1e4      	bne.n	8005d24 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fb fe66 	bl	8001a32 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	4619      	mov	r1, r3
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 f8fd 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d86:	e0df      	b.n	8005f48 <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 80d1 	beq.w	8005f4c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8005daa:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 80cc 	beq.w	8005f4c <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbc:	e853 3f00 	ldrex	r3, [r3]
 8005dc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8005dd8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ddc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1e4      	bne.n	8005db4 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3308      	adds	r3, #8
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	623b      	str	r3, [r7, #32]
   return(result);
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e00:	f023 0301 	bic.w	r3, r3, #1
 8005e04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005e12:	633a      	str	r2, [r7, #48]	; 0x30
 8005e14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e1      	bne.n	8005dea <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	e853 3f00 	ldrex	r3, [r3]
 8005e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0310 	bic.w	r3, r3, #16
 8005e4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	461a      	mov	r2, r3
 8005e58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005e5c:	61fb      	str	r3, [r7, #28]
 8005e5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e60:	69b9      	ldr	r1, [r7, #24]
 8005e62:	69fa      	ldr	r2, [r7, #28]
 8005e64:	e841 2300 	strex	r3, r2, [r1]
 8005e68:	617b      	str	r3, [r7, #20]
   return(result);
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1e4      	bne.n	8005e3a <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e76:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f87f 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e82:	e063      	b.n	8005f4c <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00e      	beq.n	8005eae <HAL_UART_IRQHandler+0x4fe>
 8005e90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d008      	beq.n	8005eae <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ea4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f001 fa8e 	bl	80073c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005eac:	e051      	b.n	8005f52 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005eae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d014      	beq.n	8005ee4 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005eba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d105      	bne.n	8005ed2 <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005ec6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005eca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d008      	beq.n	8005ee4 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d03a      	beq.n	8005f50 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	4798      	blx	r3
    }
    return;
 8005ee2:	e035      	b.n	8005f50 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ee4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d009      	beq.n	8005f04 <HAL_UART_IRQHandler+0x554>
 8005ef0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fd1b 	bl	8006938 <UART_EndTransmit_IT>
    return;
 8005f02:	e026      	b.n	8005f52 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005f04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d009      	beq.n	8005f24 <HAL_UART_IRQHandler+0x574>
 8005f10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f001 fa67 	bl	80073f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f22:	e016      	b.n	8005f52 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005f24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d010      	beq.n	8005f52 <HAL_UART_IRQHandler+0x5a2>
 8005f30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	da0c      	bge.n	8005f52 <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f001 fa4f 	bl	80073dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f3e:	e008      	b.n	8005f52 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005f40:	bf00      	nop
 8005f42:	e006      	b.n	8005f52 <HAL_UART_IRQHandler+0x5a2>
    return;
 8005f44:	bf00      	nop
 8005f46:	e004      	b.n	8005f52 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005f48:	bf00      	nop
 8005f4a:	e002      	b.n	8005f52 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005f4c:	bf00      	nop
 8005f4e:	e000      	b.n	8005f52 <HAL_UART_IRQHandler+0x5a2>
    return;
 8005f50:	bf00      	nop
  }
}
 8005f52:	37b8      	adds	r7, #184	; 0xb8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f9c:	b094      	sub	sp, #80	; 0x50
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	498a      	ldr	r1, [pc, #552]	; (80061f0 <UART_SetConfig+0x258>)
 8005fc8:	4019      	ands	r1, r3
 8005fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd0:	430b      	orrs	r3, r1
 8005fd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe0:	68d9      	ldr	r1, [r3, #12]
 8005fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	ea40 0301 	orr.w	r3, r0, r1
 8005fea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	4b7f      	ldr	r3, [pc, #508]	; (80061f4 <UART_SetConfig+0x25c>)
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d004      	beq.n	8006006 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffe:	6a1a      	ldr	r2, [r3, #32]
 8006000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006002:	4313      	orrs	r3, r2
 8006004:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8006010:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8006014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800601a:	430b      	orrs	r3, r1
 800601c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	f023 000f 	bic.w	r0, r3, #15
 8006028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800602c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	ea40 0301 	orr.w	r3, r0, r1
 8006034:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4b6f      	ldr	r3, [pc, #444]	; (80061f8 <UART_SetConfig+0x260>)
 800603c:	429a      	cmp	r2, r3
 800603e:	d102      	bne.n	8006046 <UART_SetConfig+0xae>
 8006040:	2301      	movs	r3, #1
 8006042:	64bb      	str	r3, [r7, #72]	; 0x48
 8006044:	e01a      	b.n	800607c <UART_SetConfig+0xe4>
 8006046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	4b6c      	ldr	r3, [pc, #432]	; (80061fc <UART_SetConfig+0x264>)
 800604c:	429a      	cmp	r2, r3
 800604e:	d102      	bne.n	8006056 <UART_SetConfig+0xbe>
 8006050:	2302      	movs	r3, #2
 8006052:	64bb      	str	r3, [r7, #72]	; 0x48
 8006054:	e012      	b.n	800607c <UART_SetConfig+0xe4>
 8006056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	4b69      	ldr	r3, [pc, #420]	; (8006200 <UART_SetConfig+0x268>)
 800605c:	429a      	cmp	r2, r3
 800605e:	d102      	bne.n	8006066 <UART_SetConfig+0xce>
 8006060:	2304      	movs	r3, #4
 8006062:	64bb      	str	r3, [r7, #72]	; 0x48
 8006064:	e00a      	b.n	800607c <UART_SetConfig+0xe4>
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	4b62      	ldr	r3, [pc, #392]	; (80061f4 <UART_SetConfig+0x25c>)
 800606c:	429a      	cmp	r2, r3
 800606e:	d103      	bne.n	8006078 <UART_SetConfig+0xe0>
 8006070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006074:	64bb      	str	r3, [r7, #72]	; 0x48
 8006076:	e001      	b.n	800607c <UART_SetConfig+0xe4>
 8006078:	2300      	movs	r3, #0
 800607a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	4b5c      	ldr	r3, [pc, #368]	; (80061f4 <UART_SetConfig+0x25c>)
 8006082:	429a      	cmp	r2, r3
 8006084:	d171      	bne.n	800616a <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006088:	2200      	movs	r2, #0
 800608a:	623b      	str	r3, [r7, #32]
 800608c:	627a      	str	r2, [r7, #36]	; 0x24
 800608e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006092:	f7fd ff79 	bl	8003f88 <HAL_RCCEx_GetPeriphCLKFreq>
 8006096:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 80e2 	beq.w	8006264 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	4a57      	ldr	r2, [pc, #348]	; (8006204 <UART_SetConfig+0x26c>)
 80060a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060aa:	461a      	mov	r2, r3
 80060ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80060b2:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	4613      	mov	r3, r2
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	4413      	add	r3, r2
 80060be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d305      	bcc.n	80060d0 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d903      	bls.n	80060d8 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80060d6:	e0c5      	b.n	8006264 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060da:	2200      	movs	r2, #0
 80060dc:	61bb      	str	r3, [r7, #24]
 80060de:	61fa      	str	r2, [r7, #28]
 80060e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	4a47      	ldr	r2, [pc, #284]	; (8006204 <UART_SetConfig+0x26c>)
 80060e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2200      	movs	r2, #0
 80060ee:	613b      	str	r3, [r7, #16]
 80060f0:	617a      	str	r2, [r7, #20]
 80060f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80060f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80060fa:	f7fa f8cd 	bl	8000298 <__aeabi_uldivmod>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	4610      	mov	r0, r2
 8006104:	4619      	mov	r1, r3
 8006106:	f04f 0200 	mov.w	r2, #0
 800610a:	f04f 0300 	mov.w	r3, #0
 800610e:	020b      	lsls	r3, r1, #8
 8006110:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006114:	0202      	lsls	r2, r0, #8
 8006116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006118:	6849      	ldr	r1, [r1, #4]
 800611a:	0849      	lsrs	r1, r1, #1
 800611c:	2000      	movs	r0, #0
 800611e:	460c      	mov	r4, r1
 8006120:	4605      	mov	r5, r0
 8006122:	eb12 0804 	adds.w	r8, r2, r4
 8006126:	eb43 0905 	adc.w	r9, r3, r5
 800612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	60bb      	str	r3, [r7, #8]
 8006132:	60fa      	str	r2, [r7, #12]
 8006134:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006138:	4640      	mov	r0, r8
 800613a:	4649      	mov	r1, r9
 800613c:	f7fa f8ac 	bl	8000298 <__aeabi_uldivmod>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	4613      	mov	r3, r2
 8006146:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800614e:	d308      	bcc.n	8006162 <UART_SetConfig+0x1ca>
 8006150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006156:	d204      	bcs.n	8006162 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8006158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800615e:	60da      	str	r2, [r3, #12]
 8006160:	e080      	b.n	8006264 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006168:	e07c      	b.n	8006264 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800616a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006172:	d149      	bne.n	8006208 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006176:	2200      	movs	r2, #0
 8006178:	603b      	str	r3, [r7, #0]
 800617a:	607a      	str	r2, [r7, #4]
 800617c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006180:	f7fd ff02 	bl	8003f88 <HAL_RCCEx_GetPeriphCLKFreq>
 8006184:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006188:	2b00      	cmp	r3, #0
 800618a:	d06b      	beq.n	8006264 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800618c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	4a1c      	ldr	r2, [pc, #112]	; (8006204 <UART_SetConfig+0x26c>)
 8006192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006196:	461a      	mov	r2, r3
 8006198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800619a:	fbb3 f3f2 	udiv	r3, r3, r2
 800619e:	005a      	lsls	r2, r3, #1
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	085b      	lsrs	r3, r3, #1
 80061a6:	441a      	add	r2, r3
 80061a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b0:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b4:	2b0f      	cmp	r3, #15
 80061b6:	d916      	bls.n	80061e6 <UART_SetConfig+0x24e>
 80061b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061be:	d212      	bcs.n	80061e6 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	f023 030f 	bic.w	r3, r3, #15
 80061c8:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061cc:	085b      	lsrs	r3, r3, #1
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80061d8:	4313      	orrs	r3, r2
 80061da:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80061dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80061e2:	60da      	str	r2, [r3, #12]
 80061e4:	e03e      	b.n	8006264 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80061ec:	e03a      	b.n	8006264 <UART_SetConfig+0x2cc>
 80061ee:	bf00      	nop
 80061f0:	cfff69f3 	.word	0xcfff69f3
 80061f4:	44002400 	.word	0x44002400
 80061f8:	40013800 	.word	0x40013800
 80061fc:	40004400 	.word	0x40004400
 8006200:	40004800 	.word	0x40004800
 8006204:	0800cc40 	.word	0x0800cc40
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800620a:	2200      	movs	r2, #0
 800620c:	469a      	mov	sl, r3
 800620e:	4693      	mov	fp, r2
 8006210:	4650      	mov	r0, sl
 8006212:	4659      	mov	r1, fp
 8006214:	f7fd feb8 	bl	8003f88 <HAL_RCCEx_GetPeriphCLKFreq>
 8006218:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800621a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800621c:	2b00      	cmp	r3, #0
 800621e:	d021      	beq.n	8006264 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	4a1a      	ldr	r2, [pc, #104]	; (8006290 <UART_SetConfig+0x2f8>)
 8006226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800622a:	461a      	mov	r2, r3
 800622c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800622e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	085b      	lsrs	r3, r3, #1
 8006238:	441a      	add	r2, r3
 800623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006242:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006246:	2b0f      	cmp	r3, #15
 8006248:	d909      	bls.n	800625e <UART_SetConfig+0x2c6>
 800624a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006250:	d205      	bcs.n	800625e <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006254:	b29a      	uxth	r2, r3
 8006256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	60da      	str	r2, [r3, #12]
 800625c:	e002      	b.n	8006264 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006266:	2201      	movs	r2, #1
 8006268:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626e:	2201      	movs	r2, #1
 8006270:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006276:	2200      	movs	r2, #0
 8006278:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627c:	2200      	movs	r2, #0
 800627e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006280:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006284:	4618      	mov	r0, r3
 8006286:	3750      	adds	r7, #80	; 0x50
 8006288:	46bd      	mov	sp, r7
 800628a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800628e:	bf00      	nop
 8006290:	0800cc40 	.word	0x0800cc40

08006294 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a0:	f003 0308 	and.w	r3, r3, #8
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00a      	beq.n	8006302 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006306:	f003 0304 	and.w	r3, r3, #4
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006328:	f003 0310 	and.w	r3, r3, #16
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00a      	beq.n	8006346 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634a:	f003 0320 	and.w	r3, r3, #32
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006370:	2b00      	cmp	r3, #0
 8006372:	d01a      	beq.n	80063aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006392:	d10a      	bne.n	80063aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	605a      	str	r2, [r3, #4]
  }
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b098      	sub	sp, #96	; 0x60
 80063dc:	af02      	add	r7, sp, #8
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063e8:	f7fb f9e4 	bl	80017b4 <HAL_GetTick>
 80063ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0308 	and.w	r3, r3, #8
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d12f      	bne.n	800645c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006404:	2200      	movs	r2, #0
 8006406:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f88e 	bl	800652c <UART_WaitOnFlagUntilTimeout>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d022      	beq.n	800645c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641e:	e853 3f00 	ldrex	r3, [r3]
 8006422:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800642a:	653b      	str	r3, [r7, #80]	; 0x50
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006434:	647b      	str	r3, [r7, #68]	; 0x44
 8006436:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006438:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800643a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e6      	bne.n	8006416 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e063      	b.n	8006524 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0304 	and.w	r3, r3, #4
 8006466:	2b04      	cmp	r3, #4
 8006468:	d149      	bne.n	80064fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800646a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006472:	2200      	movs	r2, #0
 8006474:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f857 	bl	800652c <UART_WaitOnFlagUntilTimeout>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d03c      	beq.n	80064fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	623b      	str	r3, [r7, #32]
   return(result);
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006498:	64fb      	str	r3, [r7, #76]	; 0x4c
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	461a      	mov	r2, r3
 80064a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a2:	633b      	str	r3, [r7, #48]	; 0x30
 80064a4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064aa:	e841 2300 	strex	r3, r2, [r1]
 80064ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1e6      	bne.n	8006484 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3308      	adds	r3, #8
 80064bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f023 0301 	bic.w	r3, r3, #1
 80064cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3308      	adds	r3, #8
 80064d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064d6:	61fa      	str	r2, [r7, #28]
 80064d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064da:	69b9      	ldr	r1, [r7, #24]
 80064dc:	69fa      	ldr	r2, [r7, #28]
 80064de:	e841 2300 	strex	r3, r2, [r1]
 80064e2:	617b      	str	r3, [r7, #20]
   return(result);
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1e5      	bne.n	80064b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e012      	b.n	8006524 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2220      	movs	r2, #32
 800650a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3758      	adds	r7, #88	; 0x58
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	4613      	mov	r3, r2
 800653a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800653c:	e049      	b.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006544:	d045      	beq.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006546:	f7fb f935 	bl	80017b4 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	429a      	cmp	r2, r3
 8006554:	d302      	bcc.n	800655c <UART_WaitOnFlagUntilTimeout+0x30>
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e048      	b.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0304 	and.w	r3, r3, #4
 800656a:	2b00      	cmp	r3, #0
 800656c:	d031      	beq.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b08      	cmp	r3, #8
 800657a:	d110      	bne.n	800659e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2208      	movs	r2, #8
 8006582:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 f95b 	bl	8006840 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2208      	movs	r2, #8
 800658e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e029      	b.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ac:	d111      	bne.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 f941 	bl	8006840 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e00f      	b.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69da      	ldr	r2, [r3, #28]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4013      	ands	r3, r2
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	429a      	cmp	r2, r3
 80065e0:	bf0c      	ite	eq
 80065e2:	2301      	moveq	r3, #1
 80065e4:	2300      	movne	r3, #0
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	461a      	mov	r2, r3
 80065ea:	79fb      	ldrb	r3, [r7, #7]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d0a6      	beq.n	800653e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b0a3      	sub	sp, #140	; 0x8c
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	4613      	mov	r3, r2
 8006608:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	88fa      	ldrh	r2, [r7, #6]
 8006614:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	88fa      	ldrh	r2, [r7, #6]
 800661c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800662e:	d10e      	bne.n	800664e <UART_Start_Receive_IT+0x52>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d105      	bne.n	8006644 <UART_Start_Receive_IT+0x48>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800663e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006642:	e02d      	b.n	80066a0 <UART_Start_Receive_IT+0xa4>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	22ff      	movs	r2, #255	; 0xff
 8006648:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800664c:	e028      	b.n	80066a0 <UART_Start_Receive_IT+0xa4>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10d      	bne.n	8006672 <UART_Start_Receive_IT+0x76>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d104      	bne.n	8006668 <UART_Start_Receive_IT+0x6c>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	22ff      	movs	r2, #255	; 0xff
 8006662:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006666:	e01b      	b.n	80066a0 <UART_Start_Receive_IT+0xa4>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	227f      	movs	r2, #127	; 0x7f
 800666c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006670:	e016      	b.n	80066a0 <UART_Start_Receive_IT+0xa4>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800667a:	d10d      	bne.n	8006698 <UART_Start_Receive_IT+0x9c>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d104      	bne.n	800668e <UART_Start_Receive_IT+0x92>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	227f      	movs	r2, #127	; 0x7f
 8006688:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800668c:	e008      	b.n	80066a0 <UART_Start_Receive_IT+0xa4>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	223f      	movs	r2, #63	; 0x3f
 8006692:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006696:	e003      	b.n	80066a0 <UART_Start_Receive_IT+0xa4>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2222      	movs	r2, #34	; 0x22
 80066ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3308      	adds	r3, #8
 80066b6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066ba:	e853 3f00 	ldrex	r3, [r3]
 80066be:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80066c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066c2:	f043 0301 	orr.w	r3, r3, #1
 80066c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3308      	adds	r3, #8
 80066d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80066d4:	673a      	str	r2, [r7, #112]	; 0x70
 80066d6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80066da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80066dc:	e841 2300 	strex	r3, r2, [r1]
 80066e0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80066e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1e3      	bne.n	80066b0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066f0:	d14f      	bne.n	8006792 <UART_Start_Receive_IT+0x196>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80066f8:	88fa      	ldrh	r2, [r7, #6]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d349      	bcc.n	8006792 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006706:	d107      	bne.n	8006718 <UART_Start_Receive_IT+0x11c>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d103      	bne.n	8006718 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4a47      	ldr	r2, [pc, #284]	; (8006830 <UART_Start_Receive_IT+0x234>)
 8006714:	675a      	str	r2, [r3, #116]	; 0x74
 8006716:	e002      	b.n	800671e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4a46      	ldr	r2, [pc, #280]	; (8006834 <UART_Start_Receive_IT+0x238>)
 800671c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d01a      	beq.n	800675c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800672e:	e853 3f00 	ldrex	r3, [r3]
 8006732:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800673a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006748:	65fb      	str	r3, [r7, #92]	; 0x5c
 800674a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800674e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006750:	e841 2300 	strex	r3, r2, [r1]
 8006754:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e4      	bne.n	8006726 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3308      	adds	r3, #8
 8006762:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006766:	e853 3f00 	ldrex	r3, [r3]
 800676a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006772:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3308      	adds	r3, #8
 800677a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800677c:	64ba      	str	r2, [r7, #72]	; 0x48
 800677e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006780:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006784:	e841 2300 	strex	r3, r2, [r1]
 8006788:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800678a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1e5      	bne.n	800675c <UART_Start_Receive_IT+0x160>
 8006790:	e046      	b.n	8006820 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800679a:	d107      	bne.n	80067ac <UART_Start_Receive_IT+0x1b0>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d103      	bne.n	80067ac <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4a24      	ldr	r2, [pc, #144]	; (8006838 <UART_Start_Receive_IT+0x23c>)
 80067a8:	675a      	str	r2, [r3, #116]	; 0x74
 80067aa:	e002      	b.n	80067b2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4a23      	ldr	r2, [pc, #140]	; (800683c <UART_Start_Receive_IT+0x240>)
 80067b0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d019      	beq.n	80067ee <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	e853 3f00 	ldrex	r3, [r3]
 80067c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80067ce:	677b      	str	r3, [r7, #116]	; 0x74
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	461a      	mov	r2, r3
 80067d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067d8:	637b      	str	r3, [r7, #52]	; 0x34
 80067da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067e0:	e841 2300 	strex	r3, r2, [r1]
 80067e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e6      	bne.n	80067ba <UART_Start_Receive_IT+0x1be>
 80067ec:	e018      	b.n	8006820 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	613b      	str	r3, [r7, #16]
   return(result);
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f043 0320 	orr.w	r3, r3, #32
 8006802:	67bb      	str	r3, [r7, #120]	; 0x78
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800680c:	623b      	str	r3, [r7, #32]
 800680e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	69f9      	ldr	r1, [r7, #28]
 8006812:	6a3a      	ldr	r2, [r7, #32]
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	61bb      	str	r3, [r7, #24]
   return(result);
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e6      	bne.n	80067ee <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	378c      	adds	r7, #140	; 0x8c
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	08007061 	.word	0x08007061
 8006834:	08006d01 	.word	0x08006d01
 8006838:	08006b49 	.word	0x08006b49
 800683c:	08006991 	.word	0x08006991

08006840 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006840:	b480      	push	{r7}
 8006842:	b095      	sub	sp, #84	; 0x54
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800685c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	461a      	mov	r2, r3
 8006864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006866:	643b      	str	r3, [r7, #64]	; 0x40
 8006868:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800686c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800686e:	e841 2300 	strex	r3, r2, [r1]
 8006872:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1e6      	bne.n	8006848 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3308      	adds	r3, #8
 8006880:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	e853 3f00 	ldrex	r3, [r3]
 8006888:	61fb      	str	r3, [r7, #28]
   return(result);
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006890:	f023 0301 	bic.w	r3, r3, #1
 8006894:	64bb      	str	r3, [r7, #72]	; 0x48
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3308      	adds	r3, #8
 800689c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800689e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e3      	bne.n	800687a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d118      	bne.n	80068ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	e853 3f00 	ldrex	r3, [r3]
 80068c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f023 0310 	bic.w	r3, r3, #16
 80068ce:	647b      	str	r3, [r7, #68]	; 0x44
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	461a      	mov	r2, r3
 80068d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068dc:	6979      	ldr	r1, [r7, #20]
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	e841 2300 	strex	r3, r2, [r1]
 80068e4:	613b      	str	r3, [r7, #16]
   return(result);
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e6      	bne.n	80068ba <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006900:	bf00      	nop
 8006902:	3754      	adds	r7, #84	; 0x54
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006918:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f7ff fb1e 	bl	8005f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006930:	bf00      	nop
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b088      	sub	sp, #32
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	e853 3f00 	ldrex	r3, [r3]
 800694c:	60bb      	str	r3, [r7, #8]
   return(result);
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006954:	61fb      	str	r3, [r7, #28]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	461a      	mov	r2, r3
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	61bb      	str	r3, [r7, #24]
 8006960:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006962:	6979      	ldr	r1, [r7, #20]
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	e841 2300 	strex	r3, r2, [r1]
 800696a:	613b      	str	r3, [r7, #16]
   return(result);
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1e6      	bne.n	8006940 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2220      	movs	r2, #32
 8006976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7ff fae9 	bl	8005f58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006986:	bf00      	nop
 8006988:	3720      	adds	r7, #32
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
	...

08006990 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b09c      	sub	sp, #112	; 0x70
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800699e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069a8:	2b22      	cmp	r3, #34	; 0x22
 80069aa:	f040 80be 	bne.w	8006b2a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80069bc:	b2d9      	uxtb	r1, r3
 80069be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c8:	400a      	ands	r2, r1
 80069ca:	b2d2      	uxtb	r2, r2
 80069cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069de:	b29b      	uxth	r3, r3
 80069e0:	3b01      	subs	r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f040 80a1 	bne.w	8006b3a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	461a      	mov	r2, r3
 8006a14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a16:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e6      	bne.n	80069f8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3308      	adds	r3, #8
 8006a30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3c:	f023 0301 	bic.w	r3, r3, #1
 8006a40:	667b      	str	r3, [r7, #100]	; 0x64
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3308      	adds	r3, #8
 8006a48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006a4a:	647a      	str	r2, [r7, #68]	; 0x44
 8006a4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e5      	bne.n	8006a2a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a33      	ldr	r2, [pc, #204]	; (8006b44 <UART_RxISR_8BIT+0x1b4>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d01f      	beq.n	8006abc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d018      	beq.n	8006abc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	623b      	str	r3, [r7, #32]
   return(result);
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a9e:	663b      	str	r3, [r7, #96]	; 0x60
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8006aaa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e6      	bne.n	8006a8a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d12e      	bne.n	8006b22 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 0310 	bic.w	r3, r3, #16
 8006ade:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ae8:	61fb      	str	r3, [r7, #28]
 8006aea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	69b9      	ldr	r1, [r7, #24]
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	e841 2300 	strex	r3, r2, [r1]
 8006af4:	617b      	str	r3, [r7, #20]
   return(result);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e6      	bne.n	8006aca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	f003 0310 	and.w	r3, r3, #16
 8006b06:	2b10      	cmp	r3, #16
 8006b08:	d103      	bne.n	8006b12 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2210      	movs	r2, #16
 8006b10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7ff fa30 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b20:	e00b      	b.n	8006b3a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7fa fd52 	bl	80015cc <HAL_UART_RxCpltCallback>
}
 8006b28:	e007      	b.n	8006b3a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	699a      	ldr	r2, [r3, #24]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f042 0208 	orr.w	r2, r2, #8
 8006b38:	619a      	str	r2, [r3, #24]
}
 8006b3a:	bf00      	nop
 8006b3c:	3770      	adds	r7, #112	; 0x70
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	44002400 	.word	0x44002400

08006b48 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b09c      	sub	sp, #112	; 0x70
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b56:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b60:	2b22      	cmp	r3, #34	; 0x22
 8006b62:	f040 80be 	bne.w	8006ce2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b74:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b76:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006b7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006b7e:	4013      	ands	r3, r2
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b84:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8a:	1c9a      	adds	r2, r3, #2
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f040 80a1 	bne.w	8006cf2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bb8:	e853 3f00 	ldrex	r3, [r3]
 8006bbc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bc4:	667b      	str	r3, [r7, #100]	; 0x64
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bce:	657b      	str	r3, [r7, #84]	; 0x54
 8006bd0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006bd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006bd6:	e841 2300 	strex	r3, r2, [r1]
 8006bda:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1e6      	bne.n	8006bb0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3308      	adds	r3, #8
 8006be8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	f023 0301 	bic.w	r3, r3, #1
 8006bf8:	663b      	str	r3, [r7, #96]	; 0x60
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3308      	adds	r3, #8
 8006c00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c02:	643a      	str	r2, [r7, #64]	; 0x40
 8006c04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e5      	bne.n	8006be2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a33      	ldr	r2, [pc, #204]	; (8006cfc <UART_RxISR_16BIT+0x1b4>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d01f      	beq.n	8006c74 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d018      	beq.n	8006c74 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	6a3b      	ldr	r3, [r7, #32]
 8006c4a:	e853 3f00 	ldrex	r3, [r3]
 8006c4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c62:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c68:	e841 2300 	strex	r3, r2, [r1]
 8006c6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1e6      	bne.n	8006c42 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d12e      	bne.n	8006cda <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	e853 3f00 	ldrex	r3, [r3]
 8006c8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f023 0310 	bic.w	r3, r3, #16
 8006c96:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ca0:	61bb      	str	r3, [r7, #24]
 8006ca2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca4:	6979      	ldr	r1, [r7, #20]
 8006ca6:	69ba      	ldr	r2, [r7, #24]
 8006ca8:	e841 2300 	strex	r3, r2, [r1]
 8006cac:	613b      	str	r3, [r7, #16]
   return(result);
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1e6      	bne.n	8006c82 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	f003 0310 	and.w	r3, r3, #16
 8006cbe:	2b10      	cmp	r3, #16
 8006cc0:	d103      	bne.n	8006cca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2210      	movs	r2, #16
 8006cc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff f954 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006cd8:	e00b      	b.n	8006cf2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7fa fc76 	bl	80015cc <HAL_UART_RxCpltCallback>
}
 8006ce0:	e007      	b.n	8006cf2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	699a      	ldr	r2, [r3, #24]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0208 	orr.w	r2, r2, #8
 8006cf0:	619a      	str	r2, [r3, #24]
}
 8006cf2:	bf00      	nop
 8006cf4:	3770      	adds	r7, #112	; 0x70
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	44002400 	.word	0x44002400

08006d00 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b0ac      	sub	sp, #176	; 0xb0
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d0e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d36:	2b22      	cmp	r3, #34	; 0x22
 8006d38:	f040 8182 	bne.w	8007040 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006d42:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d46:	e125      	b.n	8006f94 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d52:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006d56:	b2d9      	uxtb	r1, r3
 8006d58:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d62:	400a      	ands	r2, r1
 8006d64:	b2d2      	uxtb	r2, r2
 8006d66:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d92:	f003 0307 	and.w	r3, r3, #7
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d053      	beq.n	8006e42 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d011      	beq.n	8006dca <UART_RxISR_8BIT_FIFOEN+0xca>
 8006da6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00b      	beq.n	8006dca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2201      	movs	r2, #1
 8006db8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc0:	f043 0201 	orr.w	r2, r3, #1
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d011      	beq.n	8006dfa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00b      	beq.n	8006dfa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2202      	movs	r2, #2
 8006de8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df0:	f043 0204 	orr.w	r2, r3, #4
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dfe:	f003 0304 	and.w	r3, r3, #4
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d011      	beq.n	8006e2a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006e06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00b      	beq.n	8006e2a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2204      	movs	r2, #4
 8006e18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e20:	f043 0202 	orr.w	r2, r3, #2
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d006      	beq.n	8006e42 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff f899 	bl	8005f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f040 80a2 	bne.w	8006f94 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e58:	e853 3f00 	ldrex	r3, [r3]
 8006e5c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8006e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e74:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006e78:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006e7a:	e841 2300 	strex	r3, r2, [r1]
 8006e7e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1e4      	bne.n	8006e50 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3308      	adds	r3, #8
 8006e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e90:	e853 3f00 	ldrex	r3, [r3]
 8006e94:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006e96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e9c:	f023 0301 	bic.w	r3, r3, #1
 8006ea0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	3308      	adds	r3, #8
 8006eaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006eae:	66ba      	str	r2, [r7, #104]	; 0x68
 8006eb0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006eb4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006eb6:	e841 2300 	strex	r3, r2, [r1]
 8006eba:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006ebc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1e1      	bne.n	8006e86 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a5f      	ldr	r2, [pc, #380]	; (8007058 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d021      	beq.n	8006f24 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d01a      	beq.n	8006f24 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ef6:	e853 3f00 	ldrex	r3, [r3]
 8006efa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006efe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f10:	657b      	str	r3, [r7, #84]	; 0x54
 8006f12:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f14:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f18:	e841 2300 	strex	r3, r2, [r1]
 8006f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1e4      	bne.n	8006eee <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d130      	bne.n	8006f8e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3a:	e853 3f00 	ldrex	r3, [r3]
 8006f3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f42:	f023 0310 	bic.w	r3, r3, #16
 8006f46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f54:	643b      	str	r3, [r7, #64]	; 0x40
 8006f56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f5c:	e841 2300 	strex	r3, r2, [r1]
 8006f60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1e4      	bne.n	8006f32 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	f003 0310 	and.w	r3, r3, #16
 8006f72:	2b10      	cmp	r3, #16
 8006f74:	d103      	bne.n	8006f7e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2210      	movs	r2, #16
 8006f7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7fe fffa 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
 8006f8c:	e002      	b.n	8006f94 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7fa fb1c 	bl	80015cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f94:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d006      	beq.n	8006faa <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006f9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fa0:	f003 0320 	and.w	r3, r3, #32
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f47f aecf 	bne.w	8006d48 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fb0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006fb4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d049      	beq.n	8007050 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006fc2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d242      	bcs.n	8007050 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3308      	adds	r3, #8
 8006fd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3308      	adds	r3, #8
 8006fea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006fee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ff0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1e3      	bne.n	8006fca <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a15      	ldr	r2, [pc, #84]	; (800705c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007006:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	e853 3f00 	ldrex	r3, [r3]
 8007014:	60bb      	str	r3, [r7, #8]
   return(result);
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	f043 0320 	orr.w	r3, r3, #32
 800701c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	461a      	mov	r2, r3
 8007026:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800702a:	61bb      	str	r3, [r7, #24]
 800702c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702e:	6979      	ldr	r1, [r7, #20]
 8007030:	69ba      	ldr	r2, [r7, #24]
 8007032:	e841 2300 	strex	r3, r2, [r1]
 8007036:	613b      	str	r3, [r7, #16]
   return(result);
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e4      	bne.n	8007008 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800703e:	e007      	b.n	8007050 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	699a      	ldr	r2, [r3, #24]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f042 0208 	orr.w	r2, r2, #8
 800704e:	619a      	str	r2, [r3, #24]
}
 8007050:	bf00      	nop
 8007052:	37b0      	adds	r7, #176	; 0xb0
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	44002400 	.word	0x44002400
 800705c:	08006991 	.word	0x08006991

08007060 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b0ae      	sub	sp, #184	; 0xb8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800706e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007096:	2b22      	cmp	r3, #34	; 0x22
 8007098:	f040 8186 	bne.w	80073a8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80070a2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070a6:	e129      	b.n	80072fc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80070ba:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80070be:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80070c2:	4013      	ands	r3, r2
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070d0:	1c9a      	adds	r2, r3, #2
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070dc:	b29b      	uxth	r3, r3
 80070de:	3b01      	subs	r3, #1
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80070f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070f6:	f003 0307 	and.w	r3, r3, #7
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d053      	beq.n	80071a6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	d011      	beq.n	800712e <UART_RxISR_16BIT_FIFOEN+0xce>
 800710a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800710e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00b      	beq.n	800712e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2201      	movs	r2, #1
 800711c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007124:	f043 0201 	orr.w	r2, r3, #1
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800712e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d011      	beq.n	800715e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800713a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00b      	beq.n	800715e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2202      	movs	r2, #2
 800714c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007154:	f043 0204 	orr.w	r2, r3, #4
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800715e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007162:	f003 0304 	and.w	r3, r3, #4
 8007166:	2b00      	cmp	r3, #0
 8007168:	d011      	beq.n	800718e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800716a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00b      	beq.n	800718e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2204      	movs	r2, #4
 800717c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007184:	f043 0202 	orr.w	r2, r3, #2
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007194:	2b00      	cmp	r3, #0
 8007196:	d006      	beq.n	80071a6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7fe fee7 	bl	8005f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f040 80a4 	bne.w	80072fc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80071c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	461a      	mov	r2, r3
 80071d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071da:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80071de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80071e2:	e841 2300 	strex	r3, r2, [r1]
 80071e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80071e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1e2      	bne.n	80071b4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3308      	adds	r3, #8
 80071f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007204:	f023 0301 	bic.w	r3, r3, #1
 8007208:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3308      	adds	r3, #8
 8007212:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007216:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007218:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800721c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800721e:	e841 2300 	strex	r3, r2, [r1]
 8007222:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1e1      	bne.n	80071ee <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2220      	movs	r2, #32
 800722e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a5f      	ldr	r2, [pc, #380]	; (80073c0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d021      	beq.n	800728c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d01a      	beq.n	800728c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800725e:	e853 3f00 	ldrex	r3, [r3]
 8007262:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007266:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800726a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007278:	65bb      	str	r3, [r7, #88]	; 0x58
 800727a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800727e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007280:	e841 2300 	strex	r3, r2, [r1]
 8007284:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1e4      	bne.n	8007256 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007290:	2b01      	cmp	r3, #1
 8007292:	d130      	bne.n	80072f6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	e853 3f00 	ldrex	r3, [r3]
 80072a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072aa:	f023 0310 	bic.w	r3, r3, #16
 80072ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072bc:	647b      	str	r3, [r7, #68]	; 0x44
 80072be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072c4:	e841 2300 	strex	r3, r2, [r1]
 80072c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1e4      	bne.n	800729a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	f003 0310 	and.w	r3, r3, #16
 80072da:	2b10      	cmp	r3, #16
 80072dc:	d103      	bne.n	80072e6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2210      	movs	r2, #16
 80072e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7fe fe46 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
 80072f4:	e002      	b.n	80072fc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7fa f968 	bl	80015cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072fc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007300:	2b00      	cmp	r3, #0
 8007302:	d006      	beq.n	8007312 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007304:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007308:	f003 0320 	and.w	r3, r3, #32
 800730c:	2b00      	cmp	r3, #0
 800730e:	f47f aecb 	bne.w	80070a8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007318:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800731c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007320:	2b00      	cmp	r3, #0
 8007322:	d049      	beq.n	80073b8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800732a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800732e:	429a      	cmp	r2, r3
 8007330:	d242      	bcs.n	80073b8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3308      	adds	r3, #8
 8007338:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	e853 3f00 	ldrex	r3, [r3]
 8007340:	623b      	str	r3, [r7, #32]
   return(result);
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3308      	adds	r3, #8
 8007352:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007356:	633a      	str	r2, [r7, #48]	; 0x30
 8007358:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800735c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800735e:	e841 2300 	strex	r3, r2, [r1]
 8007362:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1e3      	bne.n	8007332 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a15      	ldr	r2, [pc, #84]	; (80073c4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800736e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	60fb      	str	r3, [r7, #12]
   return(result);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f043 0320 	orr.w	r3, r3, #32
 8007384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	461a      	mov	r2, r3
 800738e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007392:	61fb      	str	r3, [r7, #28]
 8007394:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007396:	69b9      	ldr	r1, [r7, #24]
 8007398:	69fa      	ldr	r2, [r7, #28]
 800739a:	e841 2300 	strex	r3, r2, [r1]
 800739e:	617b      	str	r3, [r7, #20]
   return(result);
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1e4      	bne.n	8007370 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073a6:	e007      	b.n	80073b8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699a      	ldr	r2, [r3, #24]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f042 0208 	orr.w	r2, r2, #8
 80073b6:	619a      	str	r2, [r3, #24]
}
 80073b8:	bf00      	nop
 80073ba:	37b8      	adds	r7, #184	; 0xb8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	44002400 	.word	0x44002400
 80073c4:	08006b49 	.word	0x08006b49

080073c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007412:	2b01      	cmp	r3, #1
 8007414:	d101      	bne.n	800741a <HAL_UARTEx_DisableFifoMode+0x16>
 8007416:	2302      	movs	r3, #2
 8007418:	e027      	b.n	800746a <HAL_UARTEx_DisableFifoMode+0x66>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2224      	movs	r2, #36	; 0x24
 8007426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0201 	bic.w	r2, r2, #1
 8007440:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007448:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2220      	movs	r2, #32
 800745c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800748a:	2302      	movs	r3, #2
 800748c:	e02d      	b.n	80074ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2224      	movs	r2, #36	; 0x24
 800749a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f022 0201 	bic.w	r2, r2, #1
 80074b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f850 	bl	8007570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2220      	movs	r2, #32
 80074dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007502:	2b01      	cmp	r3, #1
 8007504:	d101      	bne.n	800750a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007506:	2302      	movs	r3, #2
 8007508:	e02d      	b.n	8007566 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2224      	movs	r2, #36	; 0x24
 8007516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 0201 	bic.w	r2, r2, #1
 8007530:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f812 	bl	8007570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2220      	movs	r2, #32
 8007558:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800757c:	2b00      	cmp	r3, #0
 800757e:	d108      	bne.n	8007592 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007590:	e031      	b.n	80075f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007592:	2308      	movs	r3, #8
 8007594:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007596:	2308      	movs	r3, #8
 8007598:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	0e5b      	lsrs	r3, r3, #25
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	0f5b      	lsrs	r3, r3, #29
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	f003 0307 	and.w	r3, r3, #7
 80075b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075ba:	7bbb      	ldrb	r3, [r7, #14]
 80075bc:	7b3a      	ldrb	r2, [r7, #12]
 80075be:	4911      	ldr	r1, [pc, #68]	; (8007604 <UARTEx_SetNbDataToProcess+0x94>)
 80075c0:	5c8a      	ldrb	r2, [r1, r2]
 80075c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075c6:	7b3a      	ldrb	r2, [r7, #12]
 80075c8:	490f      	ldr	r1, [pc, #60]	; (8007608 <UARTEx_SetNbDataToProcess+0x98>)
 80075ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
 80075da:	7b7a      	ldrb	r2, [r7, #13]
 80075dc:	4909      	ldr	r1, [pc, #36]	; (8007604 <UARTEx_SetNbDataToProcess+0x94>)
 80075de:	5c8a      	ldrb	r2, [r1, r2]
 80075e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075e4:	7b7a      	ldrb	r2, [r7, #13]
 80075e6:	4908      	ldr	r1, [pc, #32]	; (8007608 <UARTEx_SetNbDataToProcess+0x98>)
 80075e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80075f6:	bf00      	nop
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	0800cc58 	.word	0x0800cc58
 8007608:	0800cc60 	.word	0x0800cc60

0800760c <std>:
 800760c:	2300      	movs	r3, #0
 800760e:	b510      	push	{r4, lr}
 8007610:	4604      	mov	r4, r0
 8007612:	6083      	str	r3, [r0, #8]
 8007614:	8181      	strh	r1, [r0, #12]
 8007616:	4619      	mov	r1, r3
 8007618:	6643      	str	r3, [r0, #100]	; 0x64
 800761a:	81c2      	strh	r2, [r0, #14]
 800761c:	2208      	movs	r2, #8
 800761e:	6183      	str	r3, [r0, #24]
 8007620:	e9c0 3300 	strd	r3, r3, [r0]
 8007624:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007628:	305c      	adds	r0, #92	; 0x5c
 800762a:	f000 f9ed 	bl	8007a08 <memset>
 800762e:	4b0d      	ldr	r3, [pc, #52]	; (8007664 <std+0x58>)
 8007630:	6224      	str	r4, [r4, #32]
 8007632:	6263      	str	r3, [r4, #36]	; 0x24
 8007634:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <std+0x5c>)
 8007636:	62a3      	str	r3, [r4, #40]	; 0x28
 8007638:	4b0c      	ldr	r3, [pc, #48]	; (800766c <std+0x60>)
 800763a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800763c:	4b0c      	ldr	r3, [pc, #48]	; (8007670 <std+0x64>)
 800763e:	6323      	str	r3, [r4, #48]	; 0x30
 8007640:	4b0c      	ldr	r3, [pc, #48]	; (8007674 <std+0x68>)
 8007642:	429c      	cmp	r4, r3
 8007644:	d006      	beq.n	8007654 <std+0x48>
 8007646:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800764a:	4294      	cmp	r4, r2
 800764c:	d002      	beq.n	8007654 <std+0x48>
 800764e:	33d0      	adds	r3, #208	; 0xd0
 8007650:	429c      	cmp	r4, r3
 8007652:	d105      	bne.n	8007660 <std+0x54>
 8007654:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800765c:	f000 ba4c 	b.w	8007af8 <__retarget_lock_init_recursive>
 8007660:	bd10      	pop	{r4, pc}
 8007662:	bf00      	nop
 8007664:	08007859 	.word	0x08007859
 8007668:	0800787b 	.word	0x0800787b
 800766c:	080078b3 	.word	0x080078b3
 8007670:	080078d7 	.word	0x080078d7
 8007674:	20000704 	.word	0x20000704

08007678 <stdio_exit_handler>:
 8007678:	4a02      	ldr	r2, [pc, #8]	; (8007684 <stdio_exit_handler+0xc>)
 800767a:	4903      	ldr	r1, [pc, #12]	; (8007688 <stdio_exit_handler+0x10>)
 800767c:	4803      	ldr	r0, [pc, #12]	; (800768c <stdio_exit_handler+0x14>)
 800767e:	f000 b869 	b.w	8007754 <_fwalk_sglue>
 8007682:	bf00      	nop
 8007684:	20000010 	.word	0x20000010
 8007688:	08007df9 	.word	0x08007df9
 800768c:	2000001c 	.word	0x2000001c

08007690 <cleanup_stdio>:
 8007690:	6841      	ldr	r1, [r0, #4]
 8007692:	4b0c      	ldr	r3, [pc, #48]	; (80076c4 <cleanup_stdio+0x34>)
 8007694:	4299      	cmp	r1, r3
 8007696:	b510      	push	{r4, lr}
 8007698:	4604      	mov	r4, r0
 800769a:	d001      	beq.n	80076a0 <cleanup_stdio+0x10>
 800769c:	f000 fbac 	bl	8007df8 <_fflush_r>
 80076a0:	68a1      	ldr	r1, [r4, #8]
 80076a2:	4b09      	ldr	r3, [pc, #36]	; (80076c8 <cleanup_stdio+0x38>)
 80076a4:	4299      	cmp	r1, r3
 80076a6:	d002      	beq.n	80076ae <cleanup_stdio+0x1e>
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 fba5 	bl	8007df8 <_fflush_r>
 80076ae:	68e1      	ldr	r1, [r4, #12]
 80076b0:	4b06      	ldr	r3, [pc, #24]	; (80076cc <cleanup_stdio+0x3c>)
 80076b2:	4299      	cmp	r1, r3
 80076b4:	d004      	beq.n	80076c0 <cleanup_stdio+0x30>
 80076b6:	4620      	mov	r0, r4
 80076b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076bc:	f000 bb9c 	b.w	8007df8 <_fflush_r>
 80076c0:	bd10      	pop	{r4, pc}
 80076c2:	bf00      	nop
 80076c4:	20000704 	.word	0x20000704
 80076c8:	2000076c 	.word	0x2000076c
 80076cc:	200007d4 	.word	0x200007d4

080076d0 <global_stdio_init.part.0>:
 80076d0:	b510      	push	{r4, lr}
 80076d2:	4b0b      	ldr	r3, [pc, #44]	; (8007700 <global_stdio_init.part.0+0x30>)
 80076d4:	2104      	movs	r1, #4
 80076d6:	4c0b      	ldr	r4, [pc, #44]	; (8007704 <global_stdio_init.part.0+0x34>)
 80076d8:	4a0b      	ldr	r2, [pc, #44]	; (8007708 <global_stdio_init.part.0+0x38>)
 80076da:	4620      	mov	r0, r4
 80076dc:	601a      	str	r2, [r3, #0]
 80076de:	2200      	movs	r2, #0
 80076e0:	f7ff ff94 	bl	800760c <std>
 80076e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80076e8:	2201      	movs	r2, #1
 80076ea:	2109      	movs	r1, #9
 80076ec:	f7ff ff8e 	bl	800760c <std>
 80076f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80076f4:	2202      	movs	r2, #2
 80076f6:	2112      	movs	r1, #18
 80076f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076fc:	f7ff bf86 	b.w	800760c <std>
 8007700:	2000083c 	.word	0x2000083c
 8007704:	20000704 	.word	0x20000704
 8007708:	08007679 	.word	0x08007679

0800770c <__sfp_lock_acquire>:
 800770c:	4801      	ldr	r0, [pc, #4]	; (8007714 <__sfp_lock_acquire+0x8>)
 800770e:	f000 b9f4 	b.w	8007afa <__retarget_lock_acquire_recursive>
 8007712:	bf00      	nop
 8007714:	20000845 	.word	0x20000845

08007718 <__sfp_lock_release>:
 8007718:	4801      	ldr	r0, [pc, #4]	; (8007720 <__sfp_lock_release+0x8>)
 800771a:	f000 b9ef 	b.w	8007afc <__retarget_lock_release_recursive>
 800771e:	bf00      	nop
 8007720:	20000845 	.word	0x20000845

08007724 <__sinit>:
 8007724:	b510      	push	{r4, lr}
 8007726:	4604      	mov	r4, r0
 8007728:	f7ff fff0 	bl	800770c <__sfp_lock_acquire>
 800772c:	6a23      	ldr	r3, [r4, #32]
 800772e:	b11b      	cbz	r3, 8007738 <__sinit+0x14>
 8007730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007734:	f7ff bff0 	b.w	8007718 <__sfp_lock_release>
 8007738:	4b04      	ldr	r3, [pc, #16]	; (800774c <__sinit+0x28>)
 800773a:	6223      	str	r3, [r4, #32]
 800773c:	4b04      	ldr	r3, [pc, #16]	; (8007750 <__sinit+0x2c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1f5      	bne.n	8007730 <__sinit+0xc>
 8007744:	f7ff ffc4 	bl	80076d0 <global_stdio_init.part.0>
 8007748:	e7f2      	b.n	8007730 <__sinit+0xc>
 800774a:	bf00      	nop
 800774c:	08007691 	.word	0x08007691
 8007750:	2000083c 	.word	0x2000083c

08007754 <_fwalk_sglue>:
 8007754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007758:	4607      	mov	r7, r0
 800775a:	4688      	mov	r8, r1
 800775c:	4614      	mov	r4, r2
 800775e:	2600      	movs	r6, #0
 8007760:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007764:	f1b9 0901 	subs.w	r9, r9, #1
 8007768:	d505      	bpl.n	8007776 <_fwalk_sglue+0x22>
 800776a:	6824      	ldr	r4, [r4, #0]
 800776c:	2c00      	cmp	r4, #0
 800776e:	d1f7      	bne.n	8007760 <_fwalk_sglue+0xc>
 8007770:	4630      	mov	r0, r6
 8007772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007776:	89ab      	ldrh	r3, [r5, #12]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d907      	bls.n	800778c <_fwalk_sglue+0x38>
 800777c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007780:	3301      	adds	r3, #1
 8007782:	d003      	beq.n	800778c <_fwalk_sglue+0x38>
 8007784:	4629      	mov	r1, r5
 8007786:	4638      	mov	r0, r7
 8007788:	47c0      	blx	r8
 800778a:	4306      	orrs	r6, r0
 800778c:	3568      	adds	r5, #104	; 0x68
 800778e:	e7e9      	b.n	8007764 <_fwalk_sglue+0x10>

08007790 <putchar>:
 8007790:	4b02      	ldr	r3, [pc, #8]	; (800779c <putchar+0xc>)
 8007792:	4601      	mov	r1, r0
 8007794:	6818      	ldr	r0, [r3, #0]
 8007796:	6882      	ldr	r2, [r0, #8]
 8007798:	f000 bbb7 	b.w	8007f0a <_putc_r>
 800779c:	20000068 	.word	0x20000068

080077a0 <_puts_r>:
 80077a0:	6a03      	ldr	r3, [r0, #32]
 80077a2:	b570      	push	{r4, r5, r6, lr}
 80077a4:	4605      	mov	r5, r0
 80077a6:	460e      	mov	r6, r1
 80077a8:	6884      	ldr	r4, [r0, #8]
 80077aa:	b90b      	cbnz	r3, 80077b0 <_puts_r+0x10>
 80077ac:	f7ff ffba 	bl	8007724 <__sinit>
 80077b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077b2:	07db      	lsls	r3, r3, #31
 80077b4:	d405      	bmi.n	80077c2 <_puts_r+0x22>
 80077b6:	89a3      	ldrh	r3, [r4, #12]
 80077b8:	0598      	lsls	r0, r3, #22
 80077ba:	d402      	bmi.n	80077c2 <_puts_r+0x22>
 80077bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077be:	f000 f99c 	bl	8007afa <__retarget_lock_acquire_recursive>
 80077c2:	89a3      	ldrh	r3, [r4, #12]
 80077c4:	0719      	lsls	r1, r3, #28
 80077c6:	d513      	bpl.n	80077f0 <_puts_r+0x50>
 80077c8:	6923      	ldr	r3, [r4, #16]
 80077ca:	b18b      	cbz	r3, 80077f0 <_puts_r+0x50>
 80077cc:	3e01      	subs	r6, #1
 80077ce:	68a3      	ldr	r3, [r4, #8]
 80077d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80077d4:	3b01      	subs	r3, #1
 80077d6:	60a3      	str	r3, [r4, #8]
 80077d8:	b9e9      	cbnz	r1, 8007816 <_puts_r+0x76>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	da2e      	bge.n	800783c <_puts_r+0x9c>
 80077de:	4622      	mov	r2, r4
 80077e0:	210a      	movs	r1, #10
 80077e2:	4628      	mov	r0, r5
 80077e4:	f000 f87b 	bl	80078de <__swbuf_r>
 80077e8:	3001      	adds	r0, #1
 80077ea:	d007      	beq.n	80077fc <_puts_r+0x5c>
 80077ec:	250a      	movs	r5, #10
 80077ee:	e007      	b.n	8007800 <_puts_r+0x60>
 80077f0:	4621      	mov	r1, r4
 80077f2:	4628      	mov	r0, r5
 80077f4:	f000 f8b0 	bl	8007958 <__swsetup_r>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d0e7      	beq.n	80077cc <_puts_r+0x2c>
 80077fc:	f04f 35ff 	mov.w	r5, #4294967295
 8007800:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007802:	07da      	lsls	r2, r3, #31
 8007804:	d405      	bmi.n	8007812 <_puts_r+0x72>
 8007806:	89a3      	ldrh	r3, [r4, #12]
 8007808:	059b      	lsls	r3, r3, #22
 800780a:	d402      	bmi.n	8007812 <_puts_r+0x72>
 800780c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800780e:	f000 f975 	bl	8007afc <__retarget_lock_release_recursive>
 8007812:	4628      	mov	r0, r5
 8007814:	bd70      	pop	{r4, r5, r6, pc}
 8007816:	2b00      	cmp	r3, #0
 8007818:	da04      	bge.n	8007824 <_puts_r+0x84>
 800781a:	69a2      	ldr	r2, [r4, #24]
 800781c:	429a      	cmp	r2, r3
 800781e:	dc06      	bgt.n	800782e <_puts_r+0x8e>
 8007820:	290a      	cmp	r1, #10
 8007822:	d004      	beq.n	800782e <_puts_r+0x8e>
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	1c5a      	adds	r2, r3, #1
 8007828:	6022      	str	r2, [r4, #0]
 800782a:	7019      	strb	r1, [r3, #0]
 800782c:	e7cf      	b.n	80077ce <_puts_r+0x2e>
 800782e:	4622      	mov	r2, r4
 8007830:	4628      	mov	r0, r5
 8007832:	f000 f854 	bl	80078de <__swbuf_r>
 8007836:	3001      	adds	r0, #1
 8007838:	d1c9      	bne.n	80077ce <_puts_r+0x2e>
 800783a:	e7df      	b.n	80077fc <_puts_r+0x5c>
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	250a      	movs	r5, #10
 8007840:	1c5a      	adds	r2, r3, #1
 8007842:	6022      	str	r2, [r4, #0]
 8007844:	701d      	strb	r5, [r3, #0]
 8007846:	e7db      	b.n	8007800 <_puts_r+0x60>

08007848 <puts>:
 8007848:	4b02      	ldr	r3, [pc, #8]	; (8007854 <puts+0xc>)
 800784a:	4601      	mov	r1, r0
 800784c:	6818      	ldr	r0, [r3, #0]
 800784e:	f7ff bfa7 	b.w	80077a0 <_puts_r>
 8007852:	bf00      	nop
 8007854:	20000068 	.word	0x20000068

08007858 <__sread>:
 8007858:	b510      	push	{r4, lr}
 800785a:	460c      	mov	r4, r1
 800785c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007860:	f000 f8fc 	bl	8007a5c <_read_r>
 8007864:	2800      	cmp	r0, #0
 8007866:	bfab      	itete	ge
 8007868:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800786a:	89a3      	ldrhlt	r3, [r4, #12]
 800786c:	181b      	addge	r3, r3, r0
 800786e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007872:	bfac      	ite	ge
 8007874:	6563      	strge	r3, [r4, #84]	; 0x54
 8007876:	81a3      	strhlt	r3, [r4, #12]
 8007878:	bd10      	pop	{r4, pc}

0800787a <__swrite>:
 800787a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800787e:	461f      	mov	r7, r3
 8007880:	898b      	ldrh	r3, [r1, #12]
 8007882:	4605      	mov	r5, r0
 8007884:	460c      	mov	r4, r1
 8007886:	05db      	lsls	r3, r3, #23
 8007888:	4616      	mov	r6, r2
 800788a:	d505      	bpl.n	8007898 <__swrite+0x1e>
 800788c:	2302      	movs	r3, #2
 800788e:	2200      	movs	r2, #0
 8007890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007894:	f000 f8d0 	bl	8007a38 <_lseek_r>
 8007898:	89a3      	ldrh	r3, [r4, #12]
 800789a:	4632      	mov	r2, r6
 800789c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078a0:	4628      	mov	r0, r5
 80078a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078a6:	81a3      	strh	r3, [r4, #12]
 80078a8:	463b      	mov	r3, r7
 80078aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ae:	f000 b8e7 	b.w	8007a80 <_write_r>

080078b2 <__sseek>:
 80078b2:	b510      	push	{r4, lr}
 80078b4:	460c      	mov	r4, r1
 80078b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ba:	f000 f8bd 	bl	8007a38 <_lseek_r>
 80078be:	1c43      	adds	r3, r0, #1
 80078c0:	89a3      	ldrh	r3, [r4, #12]
 80078c2:	bf15      	itete	ne
 80078c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80078c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078ce:	81a3      	strheq	r3, [r4, #12]
 80078d0:	bf18      	it	ne
 80078d2:	81a3      	strhne	r3, [r4, #12]
 80078d4:	bd10      	pop	{r4, pc}

080078d6 <__sclose>:
 80078d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078da:	f000 b89d 	b.w	8007a18 <_close_r>

080078de <__swbuf_r>:
 80078de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e0:	460e      	mov	r6, r1
 80078e2:	4614      	mov	r4, r2
 80078e4:	4605      	mov	r5, r0
 80078e6:	b118      	cbz	r0, 80078f0 <__swbuf_r+0x12>
 80078e8:	6a03      	ldr	r3, [r0, #32]
 80078ea:	b90b      	cbnz	r3, 80078f0 <__swbuf_r+0x12>
 80078ec:	f7ff ff1a 	bl	8007724 <__sinit>
 80078f0:	69a3      	ldr	r3, [r4, #24]
 80078f2:	60a3      	str	r3, [r4, #8]
 80078f4:	89a3      	ldrh	r3, [r4, #12]
 80078f6:	071a      	lsls	r2, r3, #28
 80078f8:	d525      	bpl.n	8007946 <__swbuf_r+0x68>
 80078fa:	6923      	ldr	r3, [r4, #16]
 80078fc:	b31b      	cbz	r3, 8007946 <__swbuf_r+0x68>
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	b2f6      	uxtb	r6, r6
 8007902:	6922      	ldr	r2, [r4, #16]
 8007904:	4637      	mov	r7, r6
 8007906:	1a98      	subs	r0, r3, r2
 8007908:	6963      	ldr	r3, [r4, #20]
 800790a:	4283      	cmp	r3, r0
 800790c:	dc04      	bgt.n	8007918 <__swbuf_r+0x3a>
 800790e:	4621      	mov	r1, r4
 8007910:	4628      	mov	r0, r5
 8007912:	f000 fa71 	bl	8007df8 <_fflush_r>
 8007916:	b9e0      	cbnz	r0, 8007952 <__swbuf_r+0x74>
 8007918:	68a3      	ldr	r3, [r4, #8]
 800791a:	3b01      	subs	r3, #1
 800791c:	60a3      	str	r3, [r4, #8]
 800791e:	6823      	ldr	r3, [r4, #0]
 8007920:	1c5a      	adds	r2, r3, #1
 8007922:	6022      	str	r2, [r4, #0]
 8007924:	701e      	strb	r6, [r3, #0]
 8007926:	1c43      	adds	r3, r0, #1
 8007928:	6962      	ldr	r2, [r4, #20]
 800792a:	429a      	cmp	r2, r3
 800792c:	d004      	beq.n	8007938 <__swbuf_r+0x5a>
 800792e:	89a3      	ldrh	r3, [r4, #12]
 8007930:	07db      	lsls	r3, r3, #31
 8007932:	d506      	bpl.n	8007942 <__swbuf_r+0x64>
 8007934:	2e0a      	cmp	r6, #10
 8007936:	d104      	bne.n	8007942 <__swbuf_r+0x64>
 8007938:	4621      	mov	r1, r4
 800793a:	4628      	mov	r0, r5
 800793c:	f000 fa5c 	bl	8007df8 <_fflush_r>
 8007940:	b938      	cbnz	r0, 8007952 <__swbuf_r+0x74>
 8007942:	4638      	mov	r0, r7
 8007944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007946:	4621      	mov	r1, r4
 8007948:	4628      	mov	r0, r5
 800794a:	f000 f805 	bl	8007958 <__swsetup_r>
 800794e:	2800      	cmp	r0, #0
 8007950:	d0d5      	beq.n	80078fe <__swbuf_r+0x20>
 8007952:	f04f 37ff 	mov.w	r7, #4294967295
 8007956:	e7f4      	b.n	8007942 <__swbuf_r+0x64>

08007958 <__swsetup_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4b2a      	ldr	r3, [pc, #168]	; (8007a04 <__swsetup_r+0xac>)
 800795c:	4605      	mov	r5, r0
 800795e:	460c      	mov	r4, r1
 8007960:	6818      	ldr	r0, [r3, #0]
 8007962:	b118      	cbz	r0, 800796c <__swsetup_r+0x14>
 8007964:	6a03      	ldr	r3, [r0, #32]
 8007966:	b90b      	cbnz	r3, 800796c <__swsetup_r+0x14>
 8007968:	f7ff fedc 	bl	8007724 <__sinit>
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007972:	0718      	lsls	r0, r3, #28
 8007974:	d422      	bmi.n	80079bc <__swsetup_r+0x64>
 8007976:	06d9      	lsls	r1, r3, #27
 8007978:	d407      	bmi.n	800798a <__swsetup_r+0x32>
 800797a:	2309      	movs	r3, #9
 800797c:	602b      	str	r3, [r5, #0]
 800797e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007982:	f04f 30ff 	mov.w	r0, #4294967295
 8007986:	81a3      	strh	r3, [r4, #12]
 8007988:	e034      	b.n	80079f4 <__swsetup_r+0x9c>
 800798a:	0758      	lsls	r0, r3, #29
 800798c:	d512      	bpl.n	80079b4 <__swsetup_r+0x5c>
 800798e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007990:	b141      	cbz	r1, 80079a4 <__swsetup_r+0x4c>
 8007992:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007996:	4299      	cmp	r1, r3
 8007998:	d002      	beq.n	80079a0 <__swsetup_r+0x48>
 800799a:	4628      	mov	r0, r5
 800799c:	f000 f8b0 	bl	8007b00 <_free_r>
 80079a0:	2300      	movs	r3, #0
 80079a2:	6363      	str	r3, [r4, #52]	; 0x34
 80079a4:	89a3      	ldrh	r3, [r4, #12]
 80079a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079aa:	81a3      	strh	r3, [r4, #12]
 80079ac:	2300      	movs	r3, #0
 80079ae:	6063      	str	r3, [r4, #4]
 80079b0:	6923      	ldr	r3, [r4, #16]
 80079b2:	6023      	str	r3, [r4, #0]
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	f043 0308 	orr.w	r3, r3, #8
 80079ba:	81a3      	strh	r3, [r4, #12]
 80079bc:	6923      	ldr	r3, [r4, #16]
 80079be:	b94b      	cbnz	r3, 80079d4 <__swsetup_r+0x7c>
 80079c0:	89a3      	ldrh	r3, [r4, #12]
 80079c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079ca:	d003      	beq.n	80079d4 <__swsetup_r+0x7c>
 80079cc:	4621      	mov	r1, r4
 80079ce:	4628      	mov	r0, r5
 80079d0:	f000 fa5f 	bl	8007e92 <__smakebuf_r>
 80079d4:	89a0      	ldrh	r0, [r4, #12]
 80079d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079da:	f010 0301 	ands.w	r3, r0, #1
 80079de:	d00a      	beq.n	80079f6 <__swsetup_r+0x9e>
 80079e0:	2300      	movs	r3, #0
 80079e2:	60a3      	str	r3, [r4, #8]
 80079e4:	6963      	ldr	r3, [r4, #20]
 80079e6:	425b      	negs	r3, r3
 80079e8:	61a3      	str	r3, [r4, #24]
 80079ea:	6923      	ldr	r3, [r4, #16]
 80079ec:	b943      	cbnz	r3, 8007a00 <__swsetup_r+0xa8>
 80079ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079f2:	d1c4      	bne.n	800797e <__swsetup_r+0x26>
 80079f4:	bd38      	pop	{r3, r4, r5, pc}
 80079f6:	0781      	lsls	r1, r0, #30
 80079f8:	bf58      	it	pl
 80079fa:	6963      	ldrpl	r3, [r4, #20]
 80079fc:	60a3      	str	r3, [r4, #8]
 80079fe:	e7f4      	b.n	80079ea <__swsetup_r+0x92>
 8007a00:	2000      	movs	r0, #0
 8007a02:	e7f7      	b.n	80079f4 <__swsetup_r+0x9c>
 8007a04:	20000068 	.word	0x20000068

08007a08 <memset>:
 8007a08:	4402      	add	r2, r0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d100      	bne.n	8007a12 <memset+0xa>
 8007a10:	4770      	bx	lr
 8007a12:	f803 1b01 	strb.w	r1, [r3], #1
 8007a16:	e7f9      	b.n	8007a0c <memset+0x4>

08007a18 <_close_r>:
 8007a18:	b538      	push	{r3, r4, r5, lr}
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	4d05      	ldr	r5, [pc, #20]	; (8007a34 <_close_r+0x1c>)
 8007a1e:	4604      	mov	r4, r0
 8007a20:	4608      	mov	r0, r1
 8007a22:	602b      	str	r3, [r5, #0]
 8007a24:	f7f9 fc09 	bl	800123a <_close>
 8007a28:	1c43      	adds	r3, r0, #1
 8007a2a:	d102      	bne.n	8007a32 <_close_r+0x1a>
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	b103      	cbz	r3, 8007a32 <_close_r+0x1a>
 8007a30:	6023      	str	r3, [r4, #0]
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
 8007a34:	20000840 	.word	0x20000840

08007a38 <_lseek_r>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	4d06      	ldr	r5, [pc, #24]	; (8007a58 <_lseek_r+0x20>)
 8007a3e:	4608      	mov	r0, r1
 8007a40:	4611      	mov	r1, r2
 8007a42:	2200      	movs	r2, #0
 8007a44:	602a      	str	r2, [r5, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	f7f9 fc1e 	bl	8001288 <_lseek>
 8007a4c:	1c43      	adds	r3, r0, #1
 8007a4e:	d102      	bne.n	8007a56 <_lseek_r+0x1e>
 8007a50:	682b      	ldr	r3, [r5, #0]
 8007a52:	b103      	cbz	r3, 8007a56 <_lseek_r+0x1e>
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	bd38      	pop	{r3, r4, r5, pc}
 8007a58:	20000840 	.word	0x20000840

08007a5c <_read_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4604      	mov	r4, r0
 8007a60:	4d06      	ldr	r5, [pc, #24]	; (8007a7c <_read_r+0x20>)
 8007a62:	4608      	mov	r0, r1
 8007a64:	4611      	mov	r1, r2
 8007a66:	2200      	movs	r2, #0
 8007a68:	602a      	str	r2, [r5, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f7f9 fbac 	bl	80011c8 <_read>
 8007a70:	1c43      	adds	r3, r0, #1
 8007a72:	d102      	bne.n	8007a7a <_read_r+0x1e>
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	b103      	cbz	r3, 8007a7a <_read_r+0x1e>
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	bd38      	pop	{r3, r4, r5, pc}
 8007a7c:	20000840 	.word	0x20000840

08007a80 <_write_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	4604      	mov	r4, r0
 8007a84:	4d06      	ldr	r5, [pc, #24]	; (8007aa0 <_write_r+0x20>)
 8007a86:	4608      	mov	r0, r1
 8007a88:	4611      	mov	r1, r2
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	602a      	str	r2, [r5, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	f7f9 fbb7 	bl	8001202 <_write>
 8007a94:	1c43      	adds	r3, r0, #1
 8007a96:	d102      	bne.n	8007a9e <_write_r+0x1e>
 8007a98:	682b      	ldr	r3, [r5, #0]
 8007a9a:	b103      	cbz	r3, 8007a9e <_write_r+0x1e>
 8007a9c:	6023      	str	r3, [r4, #0]
 8007a9e:	bd38      	pop	{r3, r4, r5, pc}
 8007aa0:	20000840 	.word	0x20000840

08007aa4 <__errno>:
 8007aa4:	4b01      	ldr	r3, [pc, #4]	; (8007aac <__errno+0x8>)
 8007aa6:	6818      	ldr	r0, [r3, #0]
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	20000068 	.word	0x20000068

08007ab0 <__libc_init_array>:
 8007ab0:	b570      	push	{r4, r5, r6, lr}
 8007ab2:	4d0d      	ldr	r5, [pc, #52]	; (8007ae8 <__libc_init_array+0x38>)
 8007ab4:	2600      	movs	r6, #0
 8007ab6:	4c0d      	ldr	r4, [pc, #52]	; (8007aec <__libc_init_array+0x3c>)
 8007ab8:	1b64      	subs	r4, r4, r5
 8007aba:	10a4      	asrs	r4, r4, #2
 8007abc:	42a6      	cmp	r6, r4
 8007abe:	d109      	bne.n	8007ad4 <__libc_init_array+0x24>
 8007ac0:	4d0b      	ldr	r5, [pc, #44]	; (8007af0 <__libc_init_array+0x40>)
 8007ac2:	2600      	movs	r6, #0
 8007ac4:	4c0b      	ldr	r4, [pc, #44]	; (8007af4 <__libc_init_array+0x44>)
 8007ac6:	f000 fa87 	bl	8007fd8 <_init>
 8007aca:	1b64      	subs	r4, r4, r5
 8007acc:	10a4      	asrs	r4, r4, #2
 8007ace:	42a6      	cmp	r6, r4
 8007ad0:	d105      	bne.n	8007ade <__libc_init_array+0x2e>
 8007ad2:	bd70      	pop	{r4, r5, r6, pc}
 8007ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad8:	3601      	adds	r6, #1
 8007ada:	4798      	blx	r3
 8007adc:	e7ee      	b.n	8007abc <__libc_init_array+0xc>
 8007ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ae2:	3601      	adds	r6, #1
 8007ae4:	4798      	blx	r3
 8007ae6:	e7f2      	b.n	8007ace <__libc_init_array+0x1e>
 8007ae8:	0800cc70 	.word	0x0800cc70
 8007aec:	0800cc70 	.word	0x0800cc70
 8007af0:	0800cc70 	.word	0x0800cc70
 8007af4:	0800cc74 	.word	0x0800cc74

08007af8 <__retarget_lock_init_recursive>:
 8007af8:	4770      	bx	lr

08007afa <__retarget_lock_acquire_recursive>:
 8007afa:	4770      	bx	lr

08007afc <__retarget_lock_release_recursive>:
 8007afc:	4770      	bx	lr
	...

08007b00 <_free_r>:
 8007b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b02:	2900      	cmp	r1, #0
 8007b04:	d043      	beq.n	8007b8e <_free_r+0x8e>
 8007b06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b0a:	1f0c      	subs	r4, r1, #4
 8007b0c:	9001      	str	r0, [sp, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	bfb8      	it	lt
 8007b12:	18e4      	addlt	r4, r4, r3
 8007b14:	f000 f8e0 	bl	8007cd8 <__malloc_lock>
 8007b18:	4a1e      	ldr	r2, [pc, #120]	; (8007b94 <_free_r+0x94>)
 8007b1a:	9801      	ldr	r0, [sp, #4]
 8007b1c:	6813      	ldr	r3, [r2, #0]
 8007b1e:	b933      	cbnz	r3, 8007b2e <_free_r+0x2e>
 8007b20:	6063      	str	r3, [r4, #4]
 8007b22:	6014      	str	r4, [r2, #0]
 8007b24:	b003      	add	sp, #12
 8007b26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b2a:	f000 b8db 	b.w	8007ce4 <__malloc_unlock>
 8007b2e:	42a3      	cmp	r3, r4
 8007b30:	d908      	bls.n	8007b44 <_free_r+0x44>
 8007b32:	6825      	ldr	r5, [r4, #0]
 8007b34:	1961      	adds	r1, r4, r5
 8007b36:	428b      	cmp	r3, r1
 8007b38:	bf01      	itttt	eq
 8007b3a:	6819      	ldreq	r1, [r3, #0]
 8007b3c:	685b      	ldreq	r3, [r3, #4]
 8007b3e:	1949      	addeq	r1, r1, r5
 8007b40:	6021      	streq	r1, [r4, #0]
 8007b42:	e7ed      	b.n	8007b20 <_free_r+0x20>
 8007b44:	461a      	mov	r2, r3
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	b10b      	cbz	r3, 8007b4e <_free_r+0x4e>
 8007b4a:	42a3      	cmp	r3, r4
 8007b4c:	d9fa      	bls.n	8007b44 <_free_r+0x44>
 8007b4e:	6811      	ldr	r1, [r2, #0]
 8007b50:	1855      	adds	r5, r2, r1
 8007b52:	42a5      	cmp	r5, r4
 8007b54:	d10b      	bne.n	8007b6e <_free_r+0x6e>
 8007b56:	6824      	ldr	r4, [r4, #0]
 8007b58:	4421      	add	r1, r4
 8007b5a:	1854      	adds	r4, r2, r1
 8007b5c:	6011      	str	r1, [r2, #0]
 8007b5e:	42a3      	cmp	r3, r4
 8007b60:	d1e0      	bne.n	8007b24 <_free_r+0x24>
 8007b62:	681c      	ldr	r4, [r3, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	440c      	add	r4, r1
 8007b68:	6053      	str	r3, [r2, #4]
 8007b6a:	6014      	str	r4, [r2, #0]
 8007b6c:	e7da      	b.n	8007b24 <_free_r+0x24>
 8007b6e:	d902      	bls.n	8007b76 <_free_r+0x76>
 8007b70:	230c      	movs	r3, #12
 8007b72:	6003      	str	r3, [r0, #0]
 8007b74:	e7d6      	b.n	8007b24 <_free_r+0x24>
 8007b76:	6825      	ldr	r5, [r4, #0]
 8007b78:	1961      	adds	r1, r4, r5
 8007b7a:	428b      	cmp	r3, r1
 8007b7c:	bf02      	ittt	eq
 8007b7e:	6819      	ldreq	r1, [r3, #0]
 8007b80:	685b      	ldreq	r3, [r3, #4]
 8007b82:	1949      	addeq	r1, r1, r5
 8007b84:	6063      	str	r3, [r4, #4]
 8007b86:	bf08      	it	eq
 8007b88:	6021      	streq	r1, [r4, #0]
 8007b8a:	6054      	str	r4, [r2, #4]
 8007b8c:	e7ca      	b.n	8007b24 <_free_r+0x24>
 8007b8e:	b003      	add	sp, #12
 8007b90:	bd30      	pop	{r4, r5, pc}
 8007b92:	bf00      	nop
 8007b94:	20000848 	.word	0x20000848

08007b98 <sbrk_aligned>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	4e0e      	ldr	r6, [pc, #56]	; (8007bd4 <sbrk_aligned+0x3c>)
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	4605      	mov	r5, r0
 8007ba0:	6831      	ldr	r1, [r6, #0]
 8007ba2:	b911      	cbnz	r1, 8007baa <sbrk_aligned+0x12>
 8007ba4:	f000 fa08 	bl	8007fb8 <_sbrk_r>
 8007ba8:	6030      	str	r0, [r6, #0]
 8007baa:	4621      	mov	r1, r4
 8007bac:	4628      	mov	r0, r5
 8007bae:	f000 fa03 	bl	8007fb8 <_sbrk_r>
 8007bb2:	1c43      	adds	r3, r0, #1
 8007bb4:	d00a      	beq.n	8007bcc <sbrk_aligned+0x34>
 8007bb6:	1cc4      	adds	r4, r0, #3
 8007bb8:	f024 0403 	bic.w	r4, r4, #3
 8007bbc:	42a0      	cmp	r0, r4
 8007bbe:	d007      	beq.n	8007bd0 <sbrk_aligned+0x38>
 8007bc0:	1a21      	subs	r1, r4, r0
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	f000 f9f8 	bl	8007fb8 <_sbrk_r>
 8007bc8:	3001      	adds	r0, #1
 8007bca:	d101      	bne.n	8007bd0 <sbrk_aligned+0x38>
 8007bcc:	f04f 34ff 	mov.w	r4, #4294967295
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	bd70      	pop	{r4, r5, r6, pc}
 8007bd4:	2000084c 	.word	0x2000084c

08007bd8 <_malloc_r>:
 8007bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bdc:	1ccd      	adds	r5, r1, #3
 8007bde:	4607      	mov	r7, r0
 8007be0:	f025 0503 	bic.w	r5, r5, #3
 8007be4:	3508      	adds	r5, #8
 8007be6:	2d0c      	cmp	r5, #12
 8007be8:	bf38      	it	cc
 8007bea:	250c      	movcc	r5, #12
 8007bec:	2d00      	cmp	r5, #0
 8007bee:	db01      	blt.n	8007bf4 <_malloc_r+0x1c>
 8007bf0:	42a9      	cmp	r1, r5
 8007bf2:	d905      	bls.n	8007c00 <_malloc_r+0x28>
 8007bf4:	230c      	movs	r3, #12
 8007bf6:	2600      	movs	r6, #0
 8007bf8:	603b      	str	r3, [r7, #0]
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007cd4 <_malloc_r+0xfc>
 8007c04:	f000 f868 	bl	8007cd8 <__malloc_lock>
 8007c08:	f8d8 3000 	ldr.w	r3, [r8]
 8007c0c:	461c      	mov	r4, r3
 8007c0e:	bb5c      	cbnz	r4, 8007c68 <_malloc_r+0x90>
 8007c10:	4629      	mov	r1, r5
 8007c12:	4638      	mov	r0, r7
 8007c14:	f7ff ffc0 	bl	8007b98 <sbrk_aligned>
 8007c18:	1c43      	adds	r3, r0, #1
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	d155      	bne.n	8007cca <_malloc_r+0xf2>
 8007c1e:	f8d8 4000 	ldr.w	r4, [r8]
 8007c22:	4626      	mov	r6, r4
 8007c24:	2e00      	cmp	r6, #0
 8007c26:	d145      	bne.n	8007cb4 <_malloc_r+0xdc>
 8007c28:	2c00      	cmp	r4, #0
 8007c2a:	d048      	beq.n	8007cbe <_malloc_r+0xe6>
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	4631      	mov	r1, r6
 8007c30:	4638      	mov	r0, r7
 8007c32:	eb04 0903 	add.w	r9, r4, r3
 8007c36:	f000 f9bf 	bl	8007fb8 <_sbrk_r>
 8007c3a:	4581      	cmp	r9, r0
 8007c3c:	d13f      	bne.n	8007cbe <_malloc_r+0xe6>
 8007c3e:	6821      	ldr	r1, [r4, #0]
 8007c40:	4638      	mov	r0, r7
 8007c42:	1a6d      	subs	r5, r5, r1
 8007c44:	4629      	mov	r1, r5
 8007c46:	f7ff ffa7 	bl	8007b98 <sbrk_aligned>
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	d037      	beq.n	8007cbe <_malloc_r+0xe6>
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	442b      	add	r3, r5
 8007c52:	6023      	str	r3, [r4, #0]
 8007c54:	f8d8 3000 	ldr.w	r3, [r8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d038      	beq.n	8007cce <_malloc_r+0xf6>
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	42a2      	cmp	r2, r4
 8007c60:	d12b      	bne.n	8007cba <_malloc_r+0xe2>
 8007c62:	2200      	movs	r2, #0
 8007c64:	605a      	str	r2, [r3, #4]
 8007c66:	e00f      	b.n	8007c88 <_malloc_r+0xb0>
 8007c68:	6822      	ldr	r2, [r4, #0]
 8007c6a:	1b52      	subs	r2, r2, r5
 8007c6c:	d41f      	bmi.n	8007cae <_malloc_r+0xd6>
 8007c6e:	2a0b      	cmp	r2, #11
 8007c70:	d917      	bls.n	8007ca2 <_malloc_r+0xca>
 8007c72:	1961      	adds	r1, r4, r5
 8007c74:	42a3      	cmp	r3, r4
 8007c76:	6025      	str	r5, [r4, #0]
 8007c78:	bf18      	it	ne
 8007c7a:	6059      	strne	r1, [r3, #4]
 8007c7c:	6863      	ldr	r3, [r4, #4]
 8007c7e:	bf08      	it	eq
 8007c80:	f8c8 1000 	streq.w	r1, [r8]
 8007c84:	5162      	str	r2, [r4, r5]
 8007c86:	604b      	str	r3, [r1, #4]
 8007c88:	f104 060b 	add.w	r6, r4, #11
 8007c8c:	4638      	mov	r0, r7
 8007c8e:	f000 f829 	bl	8007ce4 <__malloc_unlock>
 8007c92:	1d23      	adds	r3, r4, #4
 8007c94:	f026 0607 	bic.w	r6, r6, #7
 8007c98:	1af2      	subs	r2, r6, r3
 8007c9a:	d0ae      	beq.n	8007bfa <_malloc_r+0x22>
 8007c9c:	1b9b      	subs	r3, r3, r6
 8007c9e:	50a3      	str	r3, [r4, r2]
 8007ca0:	e7ab      	b.n	8007bfa <_malloc_r+0x22>
 8007ca2:	42a3      	cmp	r3, r4
 8007ca4:	6862      	ldr	r2, [r4, #4]
 8007ca6:	d1dd      	bne.n	8007c64 <_malloc_r+0x8c>
 8007ca8:	f8c8 2000 	str.w	r2, [r8]
 8007cac:	e7ec      	b.n	8007c88 <_malloc_r+0xb0>
 8007cae:	4623      	mov	r3, r4
 8007cb0:	6864      	ldr	r4, [r4, #4]
 8007cb2:	e7ac      	b.n	8007c0e <_malloc_r+0x36>
 8007cb4:	4634      	mov	r4, r6
 8007cb6:	6876      	ldr	r6, [r6, #4]
 8007cb8:	e7b4      	b.n	8007c24 <_malloc_r+0x4c>
 8007cba:	4613      	mov	r3, r2
 8007cbc:	e7cc      	b.n	8007c58 <_malloc_r+0x80>
 8007cbe:	230c      	movs	r3, #12
 8007cc0:	4638      	mov	r0, r7
 8007cc2:	603b      	str	r3, [r7, #0]
 8007cc4:	f000 f80e 	bl	8007ce4 <__malloc_unlock>
 8007cc8:	e797      	b.n	8007bfa <_malloc_r+0x22>
 8007cca:	6025      	str	r5, [r4, #0]
 8007ccc:	e7dc      	b.n	8007c88 <_malloc_r+0xb0>
 8007cce:	605b      	str	r3, [r3, #4]
 8007cd0:	deff      	udf	#255	; 0xff
 8007cd2:	bf00      	nop
 8007cd4:	20000848 	.word	0x20000848

08007cd8 <__malloc_lock>:
 8007cd8:	4801      	ldr	r0, [pc, #4]	; (8007ce0 <__malloc_lock+0x8>)
 8007cda:	f7ff bf0e 	b.w	8007afa <__retarget_lock_acquire_recursive>
 8007cde:	bf00      	nop
 8007ce0:	20000844 	.word	0x20000844

08007ce4 <__malloc_unlock>:
 8007ce4:	4801      	ldr	r0, [pc, #4]	; (8007cec <__malloc_unlock+0x8>)
 8007ce6:	f7ff bf09 	b.w	8007afc <__retarget_lock_release_recursive>
 8007cea:	bf00      	nop
 8007cec:	20000844 	.word	0x20000844

08007cf0 <__sflush_r>:
 8007cf0:	898a      	ldrh	r2, [r1, #12]
 8007cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf6:	4605      	mov	r5, r0
 8007cf8:	0710      	lsls	r0, r2, #28
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	d458      	bmi.n	8007db0 <__sflush_r+0xc0>
 8007cfe:	684b      	ldr	r3, [r1, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	dc05      	bgt.n	8007d10 <__sflush_r+0x20>
 8007d04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	dc02      	bgt.n	8007d10 <__sflush_r+0x20>
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d12:	2e00      	cmp	r6, #0
 8007d14:	d0f9      	beq.n	8007d0a <__sflush_r+0x1a>
 8007d16:	2300      	movs	r3, #0
 8007d18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d1c:	682f      	ldr	r7, [r5, #0]
 8007d1e:	6a21      	ldr	r1, [r4, #32]
 8007d20:	602b      	str	r3, [r5, #0]
 8007d22:	d032      	beq.n	8007d8a <__sflush_r+0x9a>
 8007d24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d26:	89a3      	ldrh	r3, [r4, #12]
 8007d28:	075a      	lsls	r2, r3, #29
 8007d2a:	d505      	bpl.n	8007d38 <__sflush_r+0x48>
 8007d2c:	6863      	ldr	r3, [r4, #4]
 8007d2e:	1ac0      	subs	r0, r0, r3
 8007d30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d32:	b10b      	cbz	r3, 8007d38 <__sflush_r+0x48>
 8007d34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d36:	1ac0      	subs	r0, r0, r3
 8007d38:	2300      	movs	r3, #0
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d3e:	4628      	mov	r0, r5
 8007d40:	6a21      	ldr	r1, [r4, #32]
 8007d42:	47b0      	blx	r6
 8007d44:	1c43      	adds	r3, r0, #1
 8007d46:	89a3      	ldrh	r3, [r4, #12]
 8007d48:	d106      	bne.n	8007d58 <__sflush_r+0x68>
 8007d4a:	6829      	ldr	r1, [r5, #0]
 8007d4c:	291d      	cmp	r1, #29
 8007d4e:	d82b      	bhi.n	8007da8 <__sflush_r+0xb8>
 8007d50:	4a28      	ldr	r2, [pc, #160]	; (8007df4 <__sflush_r+0x104>)
 8007d52:	410a      	asrs	r2, r1
 8007d54:	07d6      	lsls	r6, r2, #31
 8007d56:	d427      	bmi.n	8007da8 <__sflush_r+0xb8>
 8007d58:	2200      	movs	r2, #0
 8007d5a:	04d9      	lsls	r1, r3, #19
 8007d5c:	6062      	str	r2, [r4, #4]
 8007d5e:	6922      	ldr	r2, [r4, #16]
 8007d60:	6022      	str	r2, [r4, #0]
 8007d62:	d504      	bpl.n	8007d6e <__sflush_r+0x7e>
 8007d64:	1c42      	adds	r2, r0, #1
 8007d66:	d101      	bne.n	8007d6c <__sflush_r+0x7c>
 8007d68:	682b      	ldr	r3, [r5, #0]
 8007d6a:	b903      	cbnz	r3, 8007d6e <__sflush_r+0x7e>
 8007d6c:	6560      	str	r0, [r4, #84]	; 0x54
 8007d6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d70:	602f      	str	r7, [r5, #0]
 8007d72:	2900      	cmp	r1, #0
 8007d74:	d0c9      	beq.n	8007d0a <__sflush_r+0x1a>
 8007d76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d7a:	4299      	cmp	r1, r3
 8007d7c:	d002      	beq.n	8007d84 <__sflush_r+0x94>
 8007d7e:	4628      	mov	r0, r5
 8007d80:	f7ff febe 	bl	8007b00 <_free_r>
 8007d84:	2000      	movs	r0, #0
 8007d86:	6360      	str	r0, [r4, #52]	; 0x34
 8007d88:	e7c0      	b.n	8007d0c <__sflush_r+0x1c>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	47b0      	blx	r6
 8007d90:	1c41      	adds	r1, r0, #1
 8007d92:	d1c8      	bne.n	8007d26 <__sflush_r+0x36>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d0c5      	beq.n	8007d26 <__sflush_r+0x36>
 8007d9a:	2b1d      	cmp	r3, #29
 8007d9c:	d001      	beq.n	8007da2 <__sflush_r+0xb2>
 8007d9e:	2b16      	cmp	r3, #22
 8007da0:	d101      	bne.n	8007da6 <__sflush_r+0xb6>
 8007da2:	602f      	str	r7, [r5, #0]
 8007da4:	e7b1      	b.n	8007d0a <__sflush_r+0x1a>
 8007da6:	89a3      	ldrh	r3, [r4, #12]
 8007da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dac:	81a3      	strh	r3, [r4, #12]
 8007dae:	e7ad      	b.n	8007d0c <__sflush_r+0x1c>
 8007db0:	690f      	ldr	r7, [r1, #16]
 8007db2:	2f00      	cmp	r7, #0
 8007db4:	d0a9      	beq.n	8007d0a <__sflush_r+0x1a>
 8007db6:	0793      	lsls	r3, r2, #30
 8007db8:	680e      	ldr	r6, [r1, #0]
 8007dba:	600f      	str	r7, [r1, #0]
 8007dbc:	bf0c      	ite	eq
 8007dbe:	694b      	ldreq	r3, [r1, #20]
 8007dc0:	2300      	movne	r3, #0
 8007dc2:	eba6 0807 	sub.w	r8, r6, r7
 8007dc6:	608b      	str	r3, [r1, #8]
 8007dc8:	f1b8 0f00 	cmp.w	r8, #0
 8007dcc:	dd9d      	ble.n	8007d0a <__sflush_r+0x1a>
 8007dce:	4643      	mov	r3, r8
 8007dd0:	463a      	mov	r2, r7
 8007dd2:	6a21      	ldr	r1, [r4, #32]
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007dd8:	47b0      	blx	r6
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	dc06      	bgt.n	8007dec <__sflush_r+0xfc>
 8007dde:	89a3      	ldrh	r3, [r4, #12]
 8007de0:	f04f 30ff 	mov.w	r0, #4294967295
 8007de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007de8:	81a3      	strh	r3, [r4, #12]
 8007dea:	e78f      	b.n	8007d0c <__sflush_r+0x1c>
 8007dec:	4407      	add	r7, r0
 8007dee:	eba8 0800 	sub.w	r8, r8, r0
 8007df2:	e7e9      	b.n	8007dc8 <__sflush_r+0xd8>
 8007df4:	dfbffffe 	.word	0xdfbffffe

08007df8 <_fflush_r>:
 8007df8:	b538      	push	{r3, r4, r5, lr}
 8007dfa:	690b      	ldr	r3, [r1, #16]
 8007dfc:	4605      	mov	r5, r0
 8007dfe:	460c      	mov	r4, r1
 8007e00:	b913      	cbnz	r3, 8007e08 <_fflush_r+0x10>
 8007e02:	2500      	movs	r5, #0
 8007e04:	4628      	mov	r0, r5
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
 8007e08:	b118      	cbz	r0, 8007e12 <_fflush_r+0x1a>
 8007e0a:	6a03      	ldr	r3, [r0, #32]
 8007e0c:	b90b      	cbnz	r3, 8007e12 <_fflush_r+0x1a>
 8007e0e:	f7ff fc89 	bl	8007724 <__sinit>
 8007e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d0f3      	beq.n	8007e02 <_fflush_r+0xa>
 8007e1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e1c:	07d0      	lsls	r0, r2, #31
 8007e1e:	d404      	bmi.n	8007e2a <_fflush_r+0x32>
 8007e20:	0599      	lsls	r1, r3, #22
 8007e22:	d402      	bmi.n	8007e2a <_fflush_r+0x32>
 8007e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e26:	f7ff fe68 	bl	8007afa <__retarget_lock_acquire_recursive>
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	f7ff ff5f 	bl	8007cf0 <__sflush_r>
 8007e32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e34:	4605      	mov	r5, r0
 8007e36:	07da      	lsls	r2, r3, #31
 8007e38:	d4e4      	bmi.n	8007e04 <_fflush_r+0xc>
 8007e3a:	89a3      	ldrh	r3, [r4, #12]
 8007e3c:	059b      	lsls	r3, r3, #22
 8007e3e:	d4e1      	bmi.n	8007e04 <_fflush_r+0xc>
 8007e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e42:	f7ff fe5b 	bl	8007afc <__retarget_lock_release_recursive>
 8007e46:	e7dd      	b.n	8007e04 <_fflush_r+0xc>

08007e48 <__swhatbuf_r>:
 8007e48:	b570      	push	{r4, r5, r6, lr}
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e50:	b096      	sub	sp, #88	; 0x58
 8007e52:	4615      	mov	r5, r2
 8007e54:	2900      	cmp	r1, #0
 8007e56:	461e      	mov	r6, r3
 8007e58:	da0c      	bge.n	8007e74 <__swhatbuf_r+0x2c>
 8007e5a:	89a3      	ldrh	r3, [r4, #12]
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007e62:	bf0c      	ite	eq
 8007e64:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007e68:	2340      	movne	r3, #64	; 0x40
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	6031      	str	r1, [r6, #0]
 8007e6e:	602b      	str	r3, [r5, #0]
 8007e70:	b016      	add	sp, #88	; 0x58
 8007e72:	bd70      	pop	{r4, r5, r6, pc}
 8007e74:	466a      	mov	r2, sp
 8007e76:	f000 f87d 	bl	8007f74 <_fstat_r>
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	dbed      	blt.n	8007e5a <__swhatbuf_r+0x12>
 8007e7e:	9901      	ldr	r1, [sp, #4]
 8007e80:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007e84:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007e88:	4259      	negs	r1, r3
 8007e8a:	4159      	adcs	r1, r3
 8007e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e90:	e7eb      	b.n	8007e6a <__swhatbuf_r+0x22>

08007e92 <__smakebuf_r>:
 8007e92:	898b      	ldrh	r3, [r1, #12]
 8007e94:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e96:	079d      	lsls	r5, r3, #30
 8007e98:	4606      	mov	r6, r0
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	d507      	bpl.n	8007eae <__smakebuf_r+0x1c>
 8007e9e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ea2:	6023      	str	r3, [r4, #0]
 8007ea4:	6123      	str	r3, [r4, #16]
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	6163      	str	r3, [r4, #20]
 8007eaa:	b002      	add	sp, #8
 8007eac:	bd70      	pop	{r4, r5, r6, pc}
 8007eae:	ab01      	add	r3, sp, #4
 8007eb0:	466a      	mov	r2, sp
 8007eb2:	f7ff ffc9 	bl	8007e48 <__swhatbuf_r>
 8007eb6:	9900      	ldr	r1, [sp, #0]
 8007eb8:	4605      	mov	r5, r0
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f7ff fe8c 	bl	8007bd8 <_malloc_r>
 8007ec0:	b948      	cbnz	r0, 8007ed6 <__smakebuf_r+0x44>
 8007ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ec6:	059a      	lsls	r2, r3, #22
 8007ec8:	d4ef      	bmi.n	8007eaa <__smakebuf_r+0x18>
 8007eca:	f023 0303 	bic.w	r3, r3, #3
 8007ece:	f043 0302 	orr.w	r3, r3, #2
 8007ed2:	81a3      	strh	r3, [r4, #12]
 8007ed4:	e7e3      	b.n	8007e9e <__smakebuf_r+0xc>
 8007ed6:	89a3      	ldrh	r3, [r4, #12]
 8007ed8:	6020      	str	r0, [r4, #0]
 8007eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ede:	6120      	str	r0, [r4, #16]
 8007ee0:	81a3      	strh	r3, [r4, #12]
 8007ee2:	9b00      	ldr	r3, [sp, #0]
 8007ee4:	6163      	str	r3, [r4, #20]
 8007ee6:	9b01      	ldr	r3, [sp, #4]
 8007ee8:	b15b      	cbz	r3, 8007f02 <__smakebuf_r+0x70>
 8007eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eee:	4630      	mov	r0, r6
 8007ef0:	f000 f852 	bl	8007f98 <_isatty_r>
 8007ef4:	b128      	cbz	r0, 8007f02 <__smakebuf_r+0x70>
 8007ef6:	89a3      	ldrh	r3, [r4, #12]
 8007ef8:	f023 0303 	bic.w	r3, r3, #3
 8007efc:	f043 0301 	orr.w	r3, r3, #1
 8007f00:	81a3      	strh	r3, [r4, #12]
 8007f02:	89a3      	ldrh	r3, [r4, #12]
 8007f04:	431d      	orrs	r5, r3
 8007f06:	81a5      	strh	r5, [r4, #12]
 8007f08:	e7cf      	b.n	8007eaa <__smakebuf_r+0x18>

08007f0a <_putc_r>:
 8007f0a:	b570      	push	{r4, r5, r6, lr}
 8007f0c:	460d      	mov	r5, r1
 8007f0e:	4614      	mov	r4, r2
 8007f10:	4606      	mov	r6, r0
 8007f12:	b118      	cbz	r0, 8007f1c <_putc_r+0x12>
 8007f14:	6a03      	ldr	r3, [r0, #32]
 8007f16:	b90b      	cbnz	r3, 8007f1c <_putc_r+0x12>
 8007f18:	f7ff fc04 	bl	8007724 <__sinit>
 8007f1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f1e:	07d8      	lsls	r0, r3, #31
 8007f20:	d405      	bmi.n	8007f2e <_putc_r+0x24>
 8007f22:	89a3      	ldrh	r3, [r4, #12]
 8007f24:	0599      	lsls	r1, r3, #22
 8007f26:	d402      	bmi.n	8007f2e <_putc_r+0x24>
 8007f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f2a:	f7ff fde6 	bl	8007afa <__retarget_lock_acquire_recursive>
 8007f2e:	68a3      	ldr	r3, [r4, #8]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	60a3      	str	r3, [r4, #8]
 8007f36:	da05      	bge.n	8007f44 <_putc_r+0x3a>
 8007f38:	69a2      	ldr	r2, [r4, #24]
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	db12      	blt.n	8007f64 <_putc_r+0x5a>
 8007f3e:	b2eb      	uxtb	r3, r5
 8007f40:	2b0a      	cmp	r3, #10
 8007f42:	d00f      	beq.n	8007f64 <_putc_r+0x5a>
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	1c5a      	adds	r2, r3, #1
 8007f48:	6022      	str	r2, [r4, #0]
 8007f4a:	701d      	strb	r5, [r3, #0]
 8007f4c:	b2ed      	uxtb	r5, r5
 8007f4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f50:	07da      	lsls	r2, r3, #31
 8007f52:	d405      	bmi.n	8007f60 <_putc_r+0x56>
 8007f54:	89a3      	ldrh	r3, [r4, #12]
 8007f56:	059b      	lsls	r3, r3, #22
 8007f58:	d402      	bmi.n	8007f60 <_putc_r+0x56>
 8007f5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f5c:	f7ff fdce 	bl	8007afc <__retarget_lock_release_recursive>
 8007f60:	4628      	mov	r0, r5
 8007f62:	bd70      	pop	{r4, r5, r6, pc}
 8007f64:	4629      	mov	r1, r5
 8007f66:	4622      	mov	r2, r4
 8007f68:	4630      	mov	r0, r6
 8007f6a:	f7ff fcb8 	bl	80078de <__swbuf_r>
 8007f6e:	4605      	mov	r5, r0
 8007f70:	e7ed      	b.n	8007f4e <_putc_r+0x44>
	...

08007f74 <_fstat_r>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	2300      	movs	r3, #0
 8007f78:	4d06      	ldr	r5, [pc, #24]	; (8007f94 <_fstat_r+0x20>)
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	4608      	mov	r0, r1
 8007f7e:	4611      	mov	r1, r2
 8007f80:	602b      	str	r3, [r5, #0]
 8007f82:	f7f9 f966 	bl	8001252 <_fstat>
 8007f86:	1c43      	adds	r3, r0, #1
 8007f88:	d102      	bne.n	8007f90 <_fstat_r+0x1c>
 8007f8a:	682b      	ldr	r3, [r5, #0]
 8007f8c:	b103      	cbz	r3, 8007f90 <_fstat_r+0x1c>
 8007f8e:	6023      	str	r3, [r4, #0]
 8007f90:	bd38      	pop	{r3, r4, r5, pc}
 8007f92:	bf00      	nop
 8007f94:	20000840 	.word	0x20000840

08007f98 <_isatty_r>:
 8007f98:	b538      	push	{r3, r4, r5, lr}
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	4d05      	ldr	r5, [pc, #20]	; (8007fb4 <_isatty_r+0x1c>)
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	4608      	mov	r0, r1
 8007fa2:	602b      	str	r3, [r5, #0]
 8007fa4:	f7f9 f965 	bl	8001272 <_isatty>
 8007fa8:	1c43      	adds	r3, r0, #1
 8007faa:	d102      	bne.n	8007fb2 <_isatty_r+0x1a>
 8007fac:	682b      	ldr	r3, [r5, #0]
 8007fae:	b103      	cbz	r3, 8007fb2 <_isatty_r+0x1a>
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	bd38      	pop	{r3, r4, r5, pc}
 8007fb4:	20000840 	.word	0x20000840

08007fb8 <_sbrk_r>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	2300      	movs	r3, #0
 8007fbc:	4d05      	ldr	r5, [pc, #20]	; (8007fd4 <_sbrk_r+0x1c>)
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	4608      	mov	r0, r1
 8007fc2:	602b      	str	r3, [r5, #0]
 8007fc4:	f7f9 f96e 	bl	80012a4 <_sbrk>
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	d102      	bne.n	8007fd2 <_sbrk_r+0x1a>
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	b103      	cbz	r3, 8007fd2 <_sbrk_r+0x1a>
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}
 8007fd4:	20000840 	.word	0x20000840

08007fd8 <_init>:
 8007fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fda:	bf00      	nop
 8007fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fde:	bc08      	pop	{r3}
 8007fe0:	469e      	mov	lr, r3
 8007fe2:	4770      	bx	lr

08007fe4 <_fini>:
 8007fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe6:	bf00      	nop
 8007fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fea:	bc08      	pop	{r3}
 8007fec:	469e      	mov	lr, r3
 8007fee:	4770      	bx	lr
