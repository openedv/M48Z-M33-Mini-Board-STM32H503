
13_1_LowPower_PVD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f14  08000258  08000258  00010258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004c7c  0800816c  0800816c  0001816c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cde8  0800cde8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cde8  0800cde8  0001cde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdf0  0800cdf0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdf0  0800cdf0  0001cdf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdf4  0800cdf4  0001cdf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800cdf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e4  2000006c  0800ce64  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000850  0800ce64  00020850  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012ac9  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d8e  00000000  00000000  00032bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  00035940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b36  00000000  00000000  00036810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b55  00000000  00000000  00037346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017a17  00000000  00000000  00059e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd36f  00000000  00000000  000718b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041dc  00000000  00000000  0013ec24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00142e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	; (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	; (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000006c 	.word	0x2000006c
 8000274:	00000000 	.word	0x00000000
 8000278:	08008154 	.word	0x08008154

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	; (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	; (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000070 	.word	0x20000070
 8000294:	08008154 	.word	0x08008154

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b982 	b.w	80005b4 <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ce:	460d      	mov	r5, r1
 80002d0:	4604      	mov	r4, r0
 80002d2:	460f      	mov	r7, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d146      	bne.n	8000366 <__udivmoddi4+0x9e>
 80002d8:	428a      	cmp	r2, r1
 80002da:	4694      	mov	ip, r2
 80002dc:	d95e      	bls.n	800039c <__udivmoddi4+0xd4>
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	b143      	cbz	r3, 80002f6 <__udivmoddi4+0x2e>
 80002e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	409c      	lsls	r4, r3
 80002f0:	fa20 f202 	lsr.w	r2, r0, r2
 80002f4:	4317      	orrs	r7, r2
 80002f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002fa:	fa1f f58c 	uxth.w	r5, ip
 80002fe:	0c22      	lsrs	r2, r4, #16
 8000300:	fbb7 f1fe 	udiv	r1, r7, lr
 8000304:	fb0e 7711 	mls	r7, lr, r1, r7
 8000308:	fb01 f005 	mul.w	r0, r1, r5
 800030c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000310:	4290      	cmp	r0, r2
 8000312:	d908      	bls.n	8000326 <__udivmoddi4+0x5e>
 8000314:	eb1c 0202 	adds.w	r2, ip, r2
 8000318:	f101 37ff 	add.w	r7, r1, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x5c>
 800031e:	4290      	cmp	r0, r2
 8000320:	f200 8134 	bhi.w	800058c <__udivmoddi4+0x2c4>
 8000324:	4639      	mov	r1, r7
 8000326:	1a12      	subs	r2, r2, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	fbb2 f0fe 	udiv	r0, r2, lr
 800032e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033a:	42a5      	cmp	r5, r4
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x88>
 800033e:	eb1c 0404 	adds.w	r4, ip, r4
 8000342:	f100 32ff 	add.w	r2, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x86>
 8000348:	42a5      	cmp	r5, r4
 800034a:	f200 8119 	bhi.w	8000580 <__udivmoddi4+0x2b8>
 800034e:	4610      	mov	r0, r2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0x9a>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xb4>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80fc 	beq.w	8000568 <__udivmoddi4+0x2a0>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d14c      	bne.n	800041e <__udivmoddi4+0x156>
 8000384:	42ab      	cmp	r3, r5
 8000386:	f0c0 80f2 	bcc.w	800056e <__udivmoddi4+0x2a6>
 800038a:	4282      	cmp	r2, r0
 800038c:	f240 80ef 	bls.w	800056e <__udivmoddi4+0x2a6>
 8000390:	4608      	mov	r0, r1
 8000392:	2e00      	cmp	r6, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0x9a>
 8000396:	e9c6 4700 	strd	r4, r7, [r6]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0x9a>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xd8>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f382 	clz	r3, r2
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f040 809f 	bne.w	80004e8 <__udivmoddi4+0x220>
 80003aa:	1a8a      	subs	r2, r1, r2
 80003ac:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b0:	fa1f f78c 	uxth.w	r7, ip
 80003b4:	2101      	movs	r1, #1
 80003b6:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ba:	fb0e 2015 	mls	r0, lr, r5, r2
 80003be:	0c22      	lsrs	r2, r4, #16
 80003c0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c4:	fb07 f005 	mul.w	r0, r7, r5
 80003c8:	4290      	cmp	r0, r2
 80003ca:	d90f      	bls.n	80003ec <__udivmoddi4+0x124>
 80003cc:	eb1c 0202 	adds.w	r2, ip, r2
 80003d0:	f105 38ff 	add.w	r8, r5, #4294967295
 80003d4:	bf2c      	ite	cs
 80003d6:	f04f 0901 	movcs.w	r9, #1
 80003da:	f04f 0900 	movcc.w	r9, #0
 80003de:	4290      	cmp	r0, r2
 80003e0:	d903      	bls.n	80003ea <__udivmoddi4+0x122>
 80003e2:	f1b9 0f00 	cmp.w	r9, #0
 80003e6:	f000 80ce 	beq.w	8000586 <__udivmoddi4+0x2be>
 80003ea:	4645      	mov	r5, r8
 80003ec:	1a12      	subs	r2, r2, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb2 f0fe 	udiv	r0, r2, lr
 80003f4:	fb0e 2210 	mls	r2, lr, r0, r2
 80003f8:	fb00 f707 	mul.w	r7, r0, r7
 80003fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000400:	42a7      	cmp	r7, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x14e>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 32ff 	add.w	r2, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x14c>
 800040e:	42a7      	cmp	r7, r4
 8000410:	f200 80b3 	bhi.w	800057a <__udivmoddi4+0x2b2>
 8000414:	4610      	mov	r0, r2
 8000416:	1be4      	subs	r4, r4, r7
 8000418:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800041c:	e79c      	b.n	8000358 <__udivmoddi4+0x90>
 800041e:	f1c1 0420 	rsb	r4, r1, #32
 8000422:	408b      	lsls	r3, r1
 8000424:	fa05 fc01 	lsl.w	ip, r5, r1
 8000428:	fa22 f704 	lsr.w	r7, r2, r4
 800042c:	40e5      	lsrs	r5, r4
 800042e:	408a      	lsls	r2, r1
 8000430:	431f      	orrs	r7, r3
 8000432:	fa20 f304 	lsr.w	r3, r0, r4
 8000436:	4088      	lsls	r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea43 030c 	orr.w	r3, r3, ip
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000448:	fbb5 fef8 	udiv	lr, r5, r8
 800044c:	fb08 551e 	mls	r5, r8, lr, r5
 8000450:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a9      	cmp	r9, r5
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1b2>
 800045c:	197d      	adds	r5, r7, r5
 800045e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a9      	cmp	r9, r5
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b0>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 808d 	beq.w	8000592 <__udivmoddi4+0x2ca>
 8000478:	46d6      	mov	lr, sl
 800047a:	eba5 0509 	sub.w	r5, r5, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb5 f3f8 	udiv	r3, r5, r8
 8000486:	fb08 5513 	mls	r5, r8, r3, r5
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000492:	45ac      	cmp	ip, r5
 8000494:	d906      	bls.n	80004a4 <__udivmoddi4+0x1dc>
 8000496:	197d      	adds	r5, r7, r5
 8000498:	f103 38ff 	add.w	r8, r3, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x1da>
 800049e:	45ac      	cmp	ip, r5
 80004a0:	d87e      	bhi.n	80005a0 <__udivmoddi4+0x2d8>
 80004a2:	4643      	mov	r3, r8
 80004a4:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004a8:	eba5 050c 	sub.w	r5, r5, ip
 80004ac:	fba3 9802 	umull	r9, r8, r3, r2
 80004b0:	4545      	cmp	r5, r8
 80004b2:	46ce      	mov	lr, r9
 80004b4:	46c4      	mov	ip, r8
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0x1f6>
 80004b8:	d106      	bne.n	80004c8 <__udivmoddi4+0x200>
 80004ba:	4548      	cmp	r0, r9
 80004bc:	d204      	bcs.n	80004c8 <__udivmoddi4+0x200>
 80004be:	3b01      	subs	r3, #1
 80004c0:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c4:	eb68 0c07 	sbc.w	ip, r8, r7
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d06f      	beq.n	80005ac <__udivmoddi4+0x2e4>
 80004cc:	ebb0 020e 	subs.w	r2, r0, lr
 80004d0:	eb65 050c 	sbc.w	r5, r5, ip
 80004d4:	40ca      	lsrs	r2, r1
 80004d6:	fa05 f404 	lsl.w	r4, r5, r4
 80004da:	40cd      	lsrs	r5, r1
 80004dc:	4618      	mov	r0, r3
 80004de:	4314      	orrs	r4, r2
 80004e0:	2100      	movs	r1, #0
 80004e2:	e9c6 4500 	strd	r4, r5, [r6]
 80004e6:	e73c      	b.n	8000362 <__udivmoddi4+0x9a>
 80004e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ec:	f1c3 0220 	rsb	r2, r3, #32
 80004f0:	4099      	lsls	r1, r3
 80004f2:	409c      	lsls	r4, r3
 80004f4:	40d5      	lsrs	r5, r2
 80004f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004fa:	fa20 f202 	lsr.w	r2, r0, r2
 80004fe:	fa1f f78c 	uxth.w	r7, ip
 8000502:	fbb5 f0fe 	udiv	r0, r5, lr
 8000506:	430a      	orrs	r2, r1
 8000508:	fb0e 5510 	mls	r5, lr, r0, r5
 800050c:	0c11      	lsrs	r1, r2, #16
 800050e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000512:	fb00 f507 	mul.w	r5, r0, r7
 8000516:	428d      	cmp	r5, r1
 8000518:	d90e      	bls.n	8000538 <__udivmoddi4+0x270>
 800051a:	eb1c 0101 	adds.w	r1, ip, r1
 800051e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000522:	bf2c      	ite	cs
 8000524:	f04f 0901 	movcs.w	r9, #1
 8000528:	f04f 0900 	movcc.w	r9, #0
 800052c:	428d      	cmp	r5, r1
 800052e:	d902      	bls.n	8000536 <__udivmoddi4+0x26e>
 8000530:	f1b9 0f00 	cmp.w	r9, #0
 8000534:	d031      	beq.n	800059a <__udivmoddi4+0x2d2>
 8000536:	4640      	mov	r0, r8
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5fe 	udiv	r5, r1, lr
 8000540:	fb0e 1115 	mls	r1, lr, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f107 	mul.w	r1, r5, r7
 800054c:	4291      	cmp	r1, r2
 800054e:	d907      	bls.n	8000560 <__udivmoddi4+0x298>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d201      	bcs.n	800055e <__udivmoddi4+0x296>
 800055a:	4291      	cmp	r1, r2
 800055c:	d823      	bhi.n	80005a6 <__udivmoddi4+0x2de>
 800055e:	4645      	mov	r5, r8
 8000560:	1a52      	subs	r2, r2, r1
 8000562:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000566:	e726      	b.n	80003b6 <__udivmoddi4+0xee>
 8000568:	4631      	mov	r1, r6
 800056a:	4630      	mov	r0, r6
 800056c:	e6f9      	b.n	8000362 <__udivmoddi4+0x9a>
 800056e:	1a84      	subs	r4, r0, r2
 8000570:	eb65 0203 	sbc.w	r2, r5, r3
 8000574:	2001      	movs	r0, #1
 8000576:	4617      	mov	r7, r2
 8000578:	e70b      	b.n	8000392 <__udivmoddi4+0xca>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e74a      	b.n	8000416 <__udivmoddi4+0x14e>
 8000580:	4464      	add	r4, ip
 8000582:	3802      	subs	r0, #2
 8000584:	e6e4      	b.n	8000350 <__udivmoddi4+0x88>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	e72f      	b.n	80003ec <__udivmoddi4+0x124>
 800058c:	3902      	subs	r1, #2
 800058e:	4462      	add	r2, ip
 8000590:	e6c9      	b.n	8000326 <__udivmoddi4+0x5e>
 8000592:	f1ae 0e02 	sub.w	lr, lr, #2
 8000596:	443d      	add	r5, r7
 8000598:	e76f      	b.n	800047a <__udivmoddi4+0x1b2>
 800059a:	3802      	subs	r0, #2
 800059c:	4461      	add	r1, ip
 800059e:	e7cb      	b.n	8000538 <__udivmoddi4+0x270>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443d      	add	r5, r7
 80005a4:	e77e      	b.n	80004a4 <__udivmoddi4+0x1dc>
 80005a6:	3d02      	subs	r5, #2
 80005a8:	4462      	add	r2, ip
 80005aa:	e7d9      	b.n	8000560 <__udivmoddi4+0x298>
 80005ac:	4618      	mov	r0, r3
 80005ae:	4631      	mov	r1, r6
 80005b0:	e6d7      	b.n	8000362 <__udivmoddi4+0x9a>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <lcd_gpio_init>:
 * @brief   LCD control interface initialization
 * @param   None.
 * @retval  None.
 */
static void lcd_gpio_init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	LCD_CS(0);
 80005bc:	2200      	movs	r2, #0
 80005be:	2110      	movs	r1, #16
 80005c0:	480c      	ldr	r0, [pc, #48]	; (80005f4 <lcd_gpio_init+0x3c>)
 80005c2:	f001 fc73 	bl	8001eac <HAL_GPIO_WritePin>
	LCD_PWR(0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2102      	movs	r1, #2
 80005ca:	480a      	ldr	r0, [pc, #40]	; (80005f4 <lcd_gpio_init+0x3c>)
 80005cc:	f001 fc6e 	bl	8001eac <HAL_GPIO_WritePin>

    LCD_RST(0);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2104      	movs	r1, #4
 80005d4:	4807      	ldr	r0, [pc, #28]	; (80005f4 <lcd_gpio_init+0x3c>)
 80005d6:	f001 fc69 	bl	8001eac <HAL_GPIO_WritePin>
    HAL_Delay(120);                 /* Delay 120ms */
 80005da:	2078      	movs	r0, #120	; 0x78
 80005dc:	f001 f93c 	bl	8001858 <HAL_Delay>
    LCD_RST(1);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2104      	movs	r1, #4
 80005e4:	4803      	ldr	r0, [pc, #12]	; (80005f4 <lcd_gpio_init+0x3c>)
 80005e6:	f001 fc61 	bl	8001eac <HAL_GPIO_WritePin>

    MX_SPI1_Init();                 /* Initialize the SPI1 interface */
 80005ea:	f000 fd11 	bl	8001010 <MX_SPI1_Init>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	42020000 	.word	0x42020000

080005f8 <lcd_spi_send>:
 * @param   data : The starting address of the data
 * @param   size : Send data size
 * @retval  None.
 */
static void lcd_spi_send(uint8_t *data, uint32_t size)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t delta;
    LCD_CS(0);                          /* Enable slice selection */
 8000602:	2200      	movs	r2, #0
 8000604:	2110      	movs	r1, #16
 8000606:	481f      	ldr	r0, [pc, #124]	; (8000684 <lcd_spi_send+0x8c>)
 8000608:	f001 fc50 	bl	8001eac <HAL_GPIO_WritePin>
    delta = size / 0xFFFF;
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	4a1e      	ldr	r2, [pc, #120]	; (8000688 <lcd_spi_send+0x90>)
 8000610:	fba2 2303 	umull	r2, r3, r2, r3
 8000614:	0bdb      	lsrs	r3, r3, #15
 8000616:	60bb      	str	r3, [r7, #8]

    for (i = 0; i <= delta; i ++)
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	e024      	b.n	8000668 <lcd_spi_send+0x70>
    {
        if ( i == delta )               /* The last frame is sent */
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	429a      	cmp	r2, r3
 8000624:	d112      	bne.n	800064c <lcd_spi_send+0x54>
        {
            spi1_write_data(&data[i * 0xFFFF], size%0xFFFF);
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	4613      	mov	r3, r2
 800062a:	041b      	lsls	r3, r3, #16
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	18d0      	adds	r0, r2, r3
 8000632:	6839      	ldr	r1, [r7, #0]
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <lcd_spi_send+0x90>)
 8000636:	fba3 2301 	umull	r2, r3, r3, r1
 800063a:	0bda      	lsrs	r2, r3, #15
 800063c:	4613      	mov	r3, r2
 800063e:	041b      	lsls	r3, r3, #16
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	1aca      	subs	r2, r1, r3
 8000644:	4611      	mov	r1, r2
 8000646:	f000 fdb5 	bl	80011b4 <spi1_write_data>
 800064a:	e00a      	b.n	8000662 <lcd_spi_send+0x6a>
        }
        else                            /* Very-long data sends 0xFFFF bytes of data at a time */
        {
            spi1_write_data(&data[i * 0xFFFF], 0xFFFF);
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	4613      	mov	r3, r2
 8000650:	041b      	lsls	r3, r3, #16
 8000652:	1a9b      	subs	r3, r3, r2
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	4413      	add	r3, r2
 8000658:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fda9 	bl	80011b4 <spi1_write_data>
    for (i = 0; i <= delta; i ++)
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	3301      	adds	r3, #1
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	429a      	cmp	r2, r3
 800066e:	d9d6      	bls.n	800061e <lcd_spi_send+0x26>
        }
    }
    LCD_CS(1);                          /* Disable slice selection */
 8000670:	2201      	movs	r2, #1
 8000672:	2110      	movs	r1, #16
 8000674:	4803      	ldr	r0, [pc, #12]	; (8000684 <lcd_spi_send+0x8c>)
 8000676:	f001 fc19 	bl	8001eac <HAL_GPIO_WritePin>
}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	42020000 	.word	0x42020000
 8000688:	80008001 	.word	0x80008001

0800068c <lcd_write_cmd>:
 * @brief   Writes commands to LCD
 * @param   cmd : Commands to send
 * @retval  None.
 */
static void lcd_write_cmd(uint8_t cmd)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
    LCD_WR(0);
 8000696:	2200      	movs	r2, #0
 8000698:	2108      	movs	r1, #8
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <lcd_write_cmd+0x28>)
 800069c:	f001 fc06 	bl	8001eac <HAL_GPIO_WritePin>

    lcd_spi_send(&cmd, 1);
 80006a0:	1dfb      	adds	r3, r7, #7
 80006a2:	2101      	movs	r1, #1
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ffa7 	bl	80005f8 <lcd_spi_send>
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	42020000 	.word	0x42020000

080006b8 <lcd_write_data>:
 * @brief   Writes data to LCD
 * @param   cmd : data to send
 * @retval  None.
 */
static void lcd_write_data(uint8_t data)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
    LCD_WR(1);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2108      	movs	r1, #8
 80006c6:	4806      	ldr	r0, [pc, #24]	; (80006e0 <lcd_write_data+0x28>)
 80006c8:	f001 fbf0 	bl	8001eac <HAL_GPIO_WritePin>

    lcd_spi_send(&data, 1);
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	2101      	movs	r1, #1
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff91 	bl	80005f8 <lcd_spi_send>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	42020000 	.word	0x42020000

080006e4 <lcd_write_halfword>:
 * @brief   Writes half a word of data to the LCD
 * @param   cmd : data to send
 * @retval  None.
 */
void lcd_write_halfword(const uint16_t da)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2] = {0};
 80006ee:	2300      	movs	r3, #0
 80006f0:	81bb      	strh	r3, [r7, #12]

    data[0] = da >> 8;
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	733b      	strb	r3, [r7, #12]
    data[1] = da;
 80006fc:	88fb      	ldrh	r3, [r7, #6]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	737b      	strb	r3, [r7, #13]

    LCD_WR(1);
 8000702:	2201      	movs	r2, #1
 8000704:	2108      	movs	r1, #8
 8000706:	4806      	ldr	r0, [pc, #24]	; (8000720 <lcd_write_halfword+0x3c>)
 8000708:	f001 fbd0 	bl	8001eac <HAL_GPIO_WritePin>
    lcd_spi_send(data, 2);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2102      	movs	r1, #2
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ff70 	bl	80005f8 <lcd_spi_send>
}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	42020000 	.word	0x42020000

08000724 <lcd_address_set>:
 * @param   x1,y1 : starting coordinate
 * @param   x2,y2 : end coordinates
 * @retval  None.
 */
void lcd_address_set(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4604      	mov	r4, r0
 800072c:	4608      	mov	r0, r1
 800072e:	4611      	mov	r1, r2
 8000730:	461a      	mov	r2, r3
 8000732:	4623      	mov	r3, r4
 8000734:	80fb      	strh	r3, [r7, #6]
 8000736:	4603      	mov	r3, r0
 8000738:	80bb      	strh	r3, [r7, #4]
 800073a:	460b      	mov	r3, r1
 800073c:	807b      	strh	r3, [r7, #2]
 800073e:	4613      	mov	r3, r2
 8000740:	803b      	strh	r3, [r7, #0]
    lcd_write_cmd(0x2a);
 8000742:	202a      	movs	r0, #42	; 0x2a
 8000744:	f7ff ffa2 	bl	800068c <lcd_write_cmd>
    lcd_write_data(x1 >> 8);
 8000748:	88fb      	ldrh	r3, [r7, #6]
 800074a:	0a1b      	lsrs	r3, r3, #8
 800074c:	b29b      	uxth	r3, r3
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ffb1 	bl	80006b8 <lcd_write_data>
    lcd_write_data(x1);
 8000756:	88fb      	ldrh	r3, [r7, #6]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ffac 	bl	80006b8 <lcd_write_data>
    lcd_write_data(x2 >> 8);
 8000760:	887b      	ldrh	r3, [r7, #2]
 8000762:	0a1b      	lsrs	r3, r3, #8
 8000764:	b29b      	uxth	r3, r3
 8000766:	b2db      	uxtb	r3, r3
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ffa5 	bl	80006b8 <lcd_write_data>
    lcd_write_data(x2);
 800076e:	887b      	ldrh	r3, [r7, #2]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ffa0 	bl	80006b8 <lcd_write_data>

    lcd_write_cmd(0x2b);
 8000778:	202b      	movs	r0, #43	; 0x2b
 800077a:	f7ff ff87 	bl	800068c <lcd_write_cmd>
    lcd_write_data(y1 >> 8);
 800077e:	88bb      	ldrh	r3, [r7, #4]
 8000780:	0a1b      	lsrs	r3, r3, #8
 8000782:	b29b      	uxth	r3, r3
 8000784:	b2db      	uxtb	r3, r3
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff96 	bl	80006b8 <lcd_write_data>
    lcd_write_data(y1);
 800078c:	88bb      	ldrh	r3, [r7, #4]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff91 	bl	80006b8 <lcd_write_data>
    lcd_write_data(y2 >> 8);
 8000796:	883b      	ldrh	r3, [r7, #0]
 8000798:	0a1b      	lsrs	r3, r3, #8
 800079a:	b29b      	uxth	r3, r3
 800079c:	b2db      	uxtb	r3, r3
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff8a 	bl	80006b8 <lcd_write_data>
    lcd_write_data(y2);
 80007a4:	883b      	ldrh	r3, [r7, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff85 	bl	80006b8 <lcd_write_data>

    lcd_write_cmd(0x2C);
 80007ae:	202c      	movs	r0, #44	; 0x2c
 80007b0:	f7ff ff6c 	bl	800068c <lcd_write_cmd>
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd90      	pop	{r4, r7, pc}

080007bc <lcd_clear>:
 * @brief   Clears the LCD screen in one color
 * @param   Color : Clear screen color
 * @retval  None.
 */
void lcd_clear(uint16_t color)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	80fb      	strh	r3, [r7, #6]
    uint16_t i, j;
    uint8_t data[2] = {0};
 80007c6:	2300      	movs	r3, #0
 80007c8:	813b      	strh	r3, [r7, #8]

    data[0] = color >> 8;
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	0a1b      	lsrs	r3, r3, #8
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	723b      	strb	r3, [r7, #8]
    data[1] = color;
 80007d4:	88fb      	ldrh	r3, [r7, #6]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	727b      	strb	r3, [r7, #9]

    lcd_address_set(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 80007da:	23ef      	movs	r3, #239	; 0xef
 80007dc:	22ef      	movs	r2, #239	; 0xef
 80007de:	2100      	movs	r1, #0
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff ff9f 	bl	8000724 <lcd_address_set>

    for (j = 0; j < LCD_BUF_SIZE / 2; j++)
 80007e6:	2300      	movs	r3, #0
 80007e8:	81bb      	strh	r3, [r7, #12]
 80007ea:	e00d      	b.n	8000808 <lcd_clear+0x4c>
    {
        lcd_buf[j * 2] =  data[0];
 80007ec:	89bb      	ldrh	r3, [r7, #12]
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	7a39      	ldrb	r1, [r7, #8]
 80007f2:	4a13      	ldr	r2, [pc, #76]	; (8000840 <lcd_clear+0x84>)
 80007f4:	54d1      	strb	r1, [r2, r3]
        lcd_buf[j * 2 + 1] =  data[1];
 80007f6:	89bb      	ldrh	r3, [r7, #12]
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	3301      	adds	r3, #1
 80007fc:	7a79      	ldrb	r1, [r7, #9]
 80007fe:	4a10      	ldr	r2, [pc, #64]	; (8000840 <lcd_clear+0x84>)
 8000800:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < LCD_BUF_SIZE / 2; j++)
 8000802:	89bb      	ldrh	r3, [r7, #12]
 8000804:	3301      	adds	r3, #1
 8000806:	81bb      	strh	r3, [r7, #12]
 8000808:	89bb      	ldrh	r3, [r7, #12]
 800080a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800080e:	d3ed      	bcc.n	80007ec <lcd_clear+0x30>
    }

    LCD_WR(1);
 8000810:	2201      	movs	r2, #1
 8000812:	2108      	movs	r1, #8
 8000814:	480b      	ldr	r0, [pc, #44]	; (8000844 <lcd_clear+0x88>)
 8000816:	f001 fb49 	bl	8001eac <HAL_GPIO_WritePin>

    for (i = 0; i < (LCD_TOTAL_BUF_SIZE / LCD_BUF_SIZE); i++)
 800081a:	2300      	movs	r3, #0
 800081c:	81fb      	strh	r3, [r7, #14]
 800081e:	e007      	b.n	8000830 <lcd_clear+0x74>
    {
        lcd_spi_send(lcd_buf, LCD_BUF_SIZE);
 8000820:	f44f 6190 	mov.w	r1, #1152	; 0x480
 8000824:	4806      	ldr	r0, [pc, #24]	; (8000840 <lcd_clear+0x84>)
 8000826:	f7ff fee7 	bl	80005f8 <lcd_spi_send>
    for (i = 0; i < (LCD_TOTAL_BUF_SIZE / LCD_BUF_SIZE); i++)
 800082a:	89fb      	ldrh	r3, [r7, #14]
 800082c:	3301      	adds	r3, #1
 800082e:	81fb      	strh	r3, [r7, #14]
 8000830:	89fb      	ldrh	r3, [r7, #14]
 8000832:	2b63      	cmp	r3, #99	; 0x63
 8000834:	d9f4      	bls.n	8000820 <lcd_clear+0x64>
    }
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000088 	.word	0x20000088
 8000844:	42020000 	.word	0x42020000

08000848 <lcd_show_char>:
 * @param   chr  : The character to display
 * @param   size : Font size (16/24/32 point font supported)
 * @retval  None.
 */
void lcd_show_char(uint16_t x, uint16_t y, char chr, uint8_t size, uint8_t mode ,uint16_t color)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b087      	sub	sp, #28
 800084c:	af00      	add	r7, sp, #0
 800084e:	4604      	mov	r4, r0
 8000850:	4608      	mov	r0, r1
 8000852:	4611      	mov	r1, r2
 8000854:	461a      	mov	r2, r3
 8000856:	4623      	mov	r3, r4
 8000858:	80fb      	strh	r3, [r7, #6]
 800085a:	4603      	mov	r3, r0
 800085c:	80bb      	strh	r3, [r7, #4]
 800085e:	460b      	mov	r3, r1
 8000860:	70fb      	strb	r3, [r7, #3]
 8000862:	4613      	mov	r3, r2
 8000864:	70bb      	strb	r3, [r7, #2]
    uint8_t temp = 0, t1 = 0, t = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	75fb      	strb	r3, [r7, #23]
 800086a:	2300      	movs	r3, #0
 800086c:	75bb      	strb	r3, [r7, #22]
 800086e:	2300      	movs	r3, #0
 8000870:	757b      	strb	r3, [r7, #21]
    uint8_t *pfont = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
    uint8_t csize = 0;                            /* Get the number of bytes of a font character corresponding to the dot matrix set */
 8000876:	2300      	movs	r3, #0
 8000878:	733b      	strb	r3, [r7, #12]
    uint16_t colortemp = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	81fb      	strh	r3, [r7, #14]
    uint8_t sta = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	737b      	strb	r3, [r7, #13]

    chr = chr - ' ';                              /* Get the offset value (ASCII fonts start modulo Spaces, so - "is the font for the corresponding character) */
 8000882:	78fb      	ldrb	r3, [r7, #3]
 8000884:	3b20      	subs	r3, #32
 8000886:	70fb      	strb	r3, [r7, #3]

    if ((x > (LCD_WIDTH - size / 2)) || (y > (LCD_HEIGHT - size)))
 8000888:	88fa      	ldrh	r2, [r7, #6]
 800088a:	78bb      	ldrb	r3, [r7, #2]
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	b2db      	uxtb	r3, r3
 8000890:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000894:	429a      	cmp	r2, r3
 8000896:	f300 80f6 	bgt.w	8000a86 <lcd_show_char+0x23e>
 800089a:	88ba      	ldrh	r2, [r7, #4]
 800089c:	78bb      	ldrb	r3, [r7, #2]
 800089e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80008a2:	429a      	cmp	r2, r3
 80008a4:	f300 80ef 	bgt.w	8000a86 <lcd_show_char+0x23e>
    {
        return;
    }

    lcd_address_set(x, y, x + size / 2 - 1, y + size - 1); /* (x,y,x+8-1,y+16-1) */
 80008a8:	78bb      	ldrb	r3, [r7, #2]
 80008aa:	085b      	lsrs	r3, r3, #1
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	4413      	add	r3, r2
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	3b01      	subs	r3, #1
 80008b8:	b29c      	uxth	r4, r3
 80008ba:	78bb      	ldrb	r3, [r7, #2]
 80008bc:	b29a      	uxth	r2, r3
 80008be:	88bb      	ldrh	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	3b01      	subs	r3, #1
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	88b9      	ldrh	r1, [r7, #4]
 80008ca:	88f8      	ldrh	r0, [r7, #6]
 80008cc:	4622      	mov	r2, r4
 80008ce:	f7ff ff29 	bl	8000724 <lcd_address_set>

    switch (size)
 80008d2:	78bb      	ldrb	r3, [r7, #2]
 80008d4:	3b0c      	subs	r3, #12
 80008d6:	2b14      	cmp	r3, #20
 80008d8:	f200 80d7 	bhi.w	8000a8a <lcd_show_char+0x242>
 80008dc:	a201      	add	r2, pc, #4	; (adr r2, 80008e4 <lcd_show_char+0x9c>)
 80008de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e2:	bf00      	nop
 80008e4:	08000939 	.word	0x08000939
 80008e8:	08000a8b 	.word	0x08000a8b
 80008ec:	08000a8b 	.word	0x08000a8b
 80008f0:	08000a8b 	.word	0x08000a8b
 80008f4:	0800094b 	.word	0x0800094b
 80008f8:	08000a8b 	.word	0x08000a8b
 80008fc:	08000a8b 	.word	0x08000a8b
 8000900:	08000a8b 	.word	0x08000a8b
 8000904:	08000a8b 	.word	0x08000a8b
 8000908:	08000a8b 	.word	0x08000a8b
 800090c:	08000a8b 	.word	0x08000a8b
 8000910:	08000a8b 	.word	0x08000a8b
 8000914:	08000957 	.word	0x08000957
 8000918:	08000a8b 	.word	0x08000a8b
 800091c:	08000a8b 	.word	0x08000a8b
 8000920:	08000a8b 	.word	0x08000a8b
 8000924:	08000a8b 	.word	0x08000a8b
 8000928:	08000a8b 	.word	0x08000a8b
 800092c:	08000a8b 	.word	0x08000a8b
 8000930:	08000a8b 	.word	0x08000a8b
 8000934:	08000969 	.word	0x08000969
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[(uint8_t)chr];             /* 1206 font */
 8000938:	78fa      	ldrb	r2, [r7, #3]
 800093a:	4613      	mov	r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	4413      	add	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4a54      	ldr	r2, [pc, #336]	; (8000a94 <lcd_show_char+0x24c>)
 8000944:	4413      	add	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
            break;
 8000948:	e014      	b.n	8000974 <lcd_show_char+0x12c>

        case 16:
            pfont = (uint8_t *)asc2_1608[(uint8_t)chr];             /* 1608 font */
 800094a:	78fb      	ldrb	r3, [r7, #3]
 800094c:	011b      	lsls	r3, r3, #4
 800094e:	4a52      	ldr	r2, [pc, #328]	; (8000a98 <lcd_show_char+0x250>)
 8000950:	4413      	add	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
            break;
 8000954:	e00e      	b.n	8000974 <lcd_show_char+0x12c>

        case 24:
            pfont = (uint8_t *)asc2_2412[(uint8_t)chr];             /* 2412 font */
 8000956:	78fa      	ldrb	r2, [r7, #3]
 8000958:	4613      	mov	r3, r2
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	4413      	add	r3, r2
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	4a4e      	ldr	r2, [pc, #312]	; (8000a9c <lcd_show_char+0x254>)
 8000962:	4413      	add	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
            break;
 8000966:	e005      	b.n	8000974 <lcd_show_char+0x12c>

        case 32:
            pfont = (uint8_t *)asc2_3216[(uint8_t)chr];             /* 3216 font */
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	01db      	lsls	r3, r3, #7
 800096c:	4a4c      	ldr	r2, [pc, #304]	; (8000aa0 <lcd_show_char+0x258>)
 800096e:	4413      	add	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
            break;
 8000972:	bf00      	nop

        default:
            return ;
    }

    if (size != 24)
 8000974:	78bb      	ldrb	r3, [r7, #2]
 8000976:	2b18      	cmp	r3, #24
 8000978:	d042      	beq.n	8000a00 <lcd_show_char+0x1b8>
    {
        csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);
 800097a:	78bb      	ldrb	r3, [r7, #2]
 800097c:	08db      	lsrs	r3, r3, #3
 800097e:	b2db      	uxtb	r3, r3
 8000980:	461a      	mov	r2, r3
 8000982:	78bb      	ldrb	r3, [r7, #2]
 8000984:	f003 0307 	and.w	r3, r3, #7
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	bf14      	ite	ne
 800098e:	2301      	movne	r3, #1
 8000990:	2300      	moveq	r3, #0
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4413      	add	r3, r2
 8000996:	b2da      	uxtb	r2, r3
 8000998:	78bb      	ldrb	r3, [r7, #2]
 800099a:	085b      	lsrs	r3, r3, #1
 800099c:	b2db      	uxtb	r3, r3
 800099e:	fb12 f303 	smulbb	r3, r2, r3
 80009a2:	733b      	strb	r3, [r7, #12]

        for (t = 0; t < csize; t++)
 80009a4:	2300      	movs	r3, #0
 80009a6:	757b      	strb	r3, [r7, #21]
 80009a8:	e025      	b.n	80009f6 <lcd_show_char+0x1ae>
        {
            temp = pfont[t];                               /* Retrieves the dot matrix data of the character */
 80009aa:	7d7b      	ldrb	r3, [r7, #21]
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4413      	add	r3, r2
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	75fb      	strb	r3, [r7, #23]

            for (t1 = 0; t1 < 8; t1++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	75bb      	strb	r3, [r7, #22]
 80009b8:	e017      	b.n	80009ea <lcd_show_char+0x1a2>
            {
                    if (temp & 0x80)
 80009ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	da02      	bge.n	80009c8 <lcd_show_char+0x180>
                    {
                        colortemp = color;
 80009c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80009c4:	81fb      	strh	r3, [r7, #14]
 80009c6:	e006      	b.n	80009d6 <lcd_show_char+0x18e>
                    }
                    else if (mode == 0)                    /* Invalid point, not shown */
 80009c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d102      	bne.n	80009d6 <lcd_show_char+0x18e>
                    {
                        colortemp = g_back_color;
 80009d0:	4b34      	ldr	r3, [pc, #208]	; (8000aa4 <lcd_show_char+0x25c>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	81fb      	strh	r3, [r7, #14]
                    }

                    lcd_write_halfword(colortemp);
 80009d6:	89fb      	ldrh	r3, [r7, #14]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fe83 	bl	80006e4 <lcd_write_halfword>
                    temp <<= 1;
 80009de:	7dfb      	ldrb	r3, [r7, #23]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	75fb      	strb	r3, [r7, #23]
            for (t1 = 0; t1 < 8; t1++)
 80009e4:	7dbb      	ldrb	r3, [r7, #22]
 80009e6:	3301      	adds	r3, #1
 80009e8:	75bb      	strb	r3, [r7, #22]
 80009ea:	7dbb      	ldrb	r3, [r7, #22]
 80009ec:	2b07      	cmp	r3, #7
 80009ee:	d9e4      	bls.n	80009ba <lcd_show_char+0x172>
        for (t = 0; t < csize; t++)
 80009f0:	7d7b      	ldrb	r3, [r7, #21]
 80009f2:	3301      	adds	r3, #1
 80009f4:	757b      	strb	r3, [r7, #21]
 80009f6:	7d7a      	ldrb	r2, [r7, #21]
 80009f8:	7b3b      	ldrb	r3, [r7, #12]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d3d5      	bcc.n	80009aa <lcd_show_char+0x162>
 80009fe:	e045      	b.n	8000a8c <lcd_show_char+0x244>
            }
        }
    }
    else
    {
        csize = (size * 16) / 8;
 8000a00:	78bb      	ldrb	r3, [r7, #2]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	733b      	strb	r3, [r7, #12]

        for (t = 0; t < csize; t++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	757b      	strb	r3, [r7, #21]
 8000a0a:	e037      	b.n	8000a7c <lcd_show_char+0x234>
        {
            temp = asc2_2412[(uint8_t)chr][t];
 8000a0c:	78fa      	ldrb	r2, [r7, #3]
 8000a0e:	7d79      	ldrb	r1, [r7, #21]
 8000a10:	4822      	ldr	r0, [pc, #136]	; (8000a9c <lcd_show_char+0x254>)
 8000a12:	4613      	mov	r3, r2
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	011b      	lsls	r3, r3, #4
 8000a1a:	4403      	add	r3, r0
 8000a1c:	440b      	add	r3, r1
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	75fb      	strb	r3, [r7, #23]

            if (t % 2 == 0)
 8000a22:	7d7b      	ldrb	r3, [r7, #21]
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d102      	bne.n	8000a34 <lcd_show_char+0x1ec>
            {
                sta = 8;
 8000a2e:	2308      	movs	r3, #8
 8000a30:	737b      	strb	r3, [r7, #13]
 8000a32:	e001      	b.n	8000a38 <lcd_show_char+0x1f0>
            }
            else
            {
                sta = 4;
 8000a34:	2304      	movs	r3, #4
 8000a36:	737b      	strb	r3, [r7, #13]
            }

            for (t1 = 0; t1 < sta; t1++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	75bb      	strb	r3, [r7, #22]
 8000a3c:	e017      	b.n	8000a6e <lcd_show_char+0x226>
            {
                if(temp & 0x80)
 8000a3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	da02      	bge.n	8000a4c <lcd_show_char+0x204>
                {
                    colortemp = color;
 8000a46:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000a48:	81fb      	strh	r3, [r7, #14]
 8000a4a:	e006      	b.n	8000a5a <lcd_show_char+0x212>
                }
                else if (mode == 0)                                 /* Invalid point, not shown */
 8000a4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d102      	bne.n	8000a5a <lcd_show_char+0x212>
                {
                    colortemp = g_back_color;
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <lcd_show_char+0x25c>)
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	81fb      	strh	r3, [r7, #14]
                }

                lcd_write_halfword(colortemp);
 8000a5a:	89fb      	ldrh	r3, [r7, #14]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fe41 	bl	80006e4 <lcd_write_halfword>
                temp <<= 1;
 8000a62:	7dfb      	ldrb	r3, [r7, #23]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	75fb      	strb	r3, [r7, #23]
            for (t1 = 0; t1 < sta; t1++)
 8000a68:	7dbb      	ldrb	r3, [r7, #22]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	75bb      	strb	r3, [r7, #22]
 8000a6e:	7dba      	ldrb	r2, [r7, #22]
 8000a70:	7b7b      	ldrb	r3, [r7, #13]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d3e3      	bcc.n	8000a3e <lcd_show_char+0x1f6>
        for (t = 0; t < csize; t++)
 8000a76:	7d7b      	ldrb	r3, [r7, #21]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	757b      	strb	r3, [r7, #21]
 8000a7c:	7d7a      	ldrb	r2, [r7, #21]
 8000a7e:	7b3b      	ldrb	r3, [r7, #12]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d3c3      	bcc.n	8000a0c <lcd_show_char+0x1c4>
 8000a84:	e002      	b.n	8000a8c <lcd_show_char+0x244>
        return;
 8000a86:	bf00      	nop
 8000a88:	e000      	b.n	8000a8c <lcd_show_char+0x244>
            return ;
 8000a8a:	bf00      	nop
            }
        }
    }
}
 8000a8c:	371c      	adds	r7, #28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd90      	pop	{r4, r7, pc}
 8000a92:	bf00      	nop
 8000a94:	080081f4 	.word	0x080081f4
 8000a98:	08008668 	.word	0x08008668
 8000a9c:	08008c58 	.word	0x08008c58
 8000aa0:	08009e28 	.word	0x08009e28
 8000aa4:	20000000 	.word	0x20000000

08000aa8 <lcd_show_string>:
 * @param   size        : Choose 12/16/24/32
 * @param   p           : The first address of the string
 * @retval  None.
 */
void lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af02      	add	r7, sp, #8
 8000aae:	4604      	mov	r4, r0
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4623      	mov	r3, r4
 8000ab8:	80fb      	strh	r3, [r7, #6]
 8000aba:	4603      	mov	r3, r0
 8000abc:	80bb      	strh	r3, [r7, #4]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	807b      	strh	r3, [r7, #2]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 8000ac6:	88fb      	ldrh	r3, [r7, #6]
 8000ac8:	73fb      	strb	r3, [r7, #15]
    width += x;
 8000aca:	887a      	ldrh	r2, [r7, #2]
 8000acc:	88fb      	ldrh	r3, [r7, #6]
 8000ace:	4413      	add	r3, r2
 8000ad0:	807b      	strh	r3, [r7, #2]
    height += y;
 8000ad2:	883a      	ldrh	r2, [r7, #0]
 8000ad4:	88bb      	ldrh	r3, [r7, #4]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))   /* Check whether it is an illegal character! */
 8000ada:	e027      	b.n	8000b2c <lcd_show_string+0x84>
    {
        if (x >= width)
 8000adc:	88fa      	ldrh	r2, [r7, #6]
 8000ade:	887b      	ldrh	r3, [r7, #2]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d307      	bcc.n	8000af4 <lcd_show_string+0x4c>
        {
            x = x0;
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	80fb      	strh	r3, [r7, #6]
            y += size;
 8000ae8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	88bb      	ldrh	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break;           /* Quit */
 8000af4:	88ba      	ldrh	r2, [r7, #4]
 8000af6:	883b      	ldrh	r3, [r7, #0]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d220      	bcs.n	8000b3e <lcd_show_string+0x96>

        lcd_show_char(x, y, *p, size, 0, color);
 8000afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afe:	781a      	ldrb	r2, [r3, #0]
 8000b00:	f897 4020 	ldrb.w	r4, [r7, #32]
 8000b04:	88b9      	ldrh	r1, [r7, #4]
 8000b06:	88f8      	ldrh	r0, [r7, #6]
 8000b08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	4623      	mov	r3, r4
 8000b12:	f7ff fe99 	bl	8000848 <lcd_show_char>
        x += size / 2;
 8000b16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b1a:	085b      	lsrs	r3, r3, #1
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	4413      	add	r3, r2
 8000b24:	80fb      	strh	r3, [r7, #6]
        p++;
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	3301      	adds	r3, #1
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
    while ((*p <= '~') && (*p >= ' '))   /* Check whether it is an illegal character! */
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b7e      	cmp	r3, #126	; 0x7e
 8000b32:	d805      	bhi.n	8000b40 <lcd_show_string+0x98>
 8000b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b1f      	cmp	r3, #31
 8000b3a:	d8cf      	bhi.n	8000adc <lcd_show_string+0x34>
    }
}
 8000b3c:	e000      	b.n	8000b40 <lcd_show_string+0x98>
        if (y >= height)break;           /* Quit */
 8000b3e:	bf00      	nop
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd90      	pop	{r4, r7, pc}

08000b48 <lcd_init>:
 * @brief   LCD initialization
 * @remark  None.
 * @retval  None.
 */
void lcd_init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
    lcd_gpio_init();            /* Hardware interface initialization */
 8000b4c:	f7ff fd34 	bl	80005b8 <lcd_gpio_init>

    HAL_Delay(120);
 8000b50:	2078      	movs	r0, #120	; 0x78
 8000b52:	f000 fe81 	bl	8001858 <HAL_Delay>
    /* Sleep Out */
    lcd_write_cmd(0x11);
 8000b56:	2011      	movs	r0, #17
 8000b58:	f7ff fd98 	bl	800068c <lcd_write_cmd>
    /* wait for power stability */
    HAL_Delay(120);
 8000b5c:	2078      	movs	r0, #120	; 0x78
 8000b5e:	f000 fe7b 	bl	8001858 <HAL_Delay>

    /* Memory Data Access Control */
    lcd_write_cmd(0x36);
 8000b62:	2036      	movs	r0, #54	; 0x36
 8000b64:	f7ff fd92 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0x00);
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f7ff fda5 	bl	80006b8 <lcd_write_data>

    /* RGB 5-6-5-bit  */
    lcd_write_cmd(0x3A);
 8000b6e:	203a      	movs	r0, #58	; 0x3a
 8000b70:	f7ff fd8c 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0x65);
 8000b74:	2065      	movs	r0, #101	; 0x65
 8000b76:	f7ff fd9f 	bl	80006b8 <lcd_write_data>

    /* Porch Setting */
    lcd_write_cmd(0xB2);
 8000b7a:	20b2      	movs	r0, #178	; 0xb2
 8000b7c:	f7ff fd86 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0x0C);
 8000b80:	200c      	movs	r0, #12
 8000b82:	f7ff fd99 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x0C);
 8000b86:	200c      	movs	r0, #12
 8000b88:	f7ff fd96 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x00);
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f7ff fd93 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x33);
 8000b92:	2033      	movs	r0, #51	; 0x33
 8000b94:	f7ff fd90 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x33);
 8000b98:	2033      	movs	r0, #51	; 0x33
 8000b9a:	f7ff fd8d 	bl	80006b8 <lcd_write_data>

    /*  Gate Control */
    lcd_write_cmd(0xB7);
 8000b9e:	20b7      	movs	r0, #183	; 0xb7
 8000ba0:	f7ff fd74 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0x72);
 8000ba4:	2072      	movs	r0, #114	; 0x72
 8000ba6:	f7ff fd87 	bl	80006b8 <lcd_write_data>

    /* VCOM Setting */
    lcd_write_cmd(0xBB);
 8000baa:	20bb      	movs	r0, #187	; 0xbb
 8000bac:	f7ff fd6e 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0x3D);
 8000bb0:	203d      	movs	r0, #61	; 0x3d
 8000bb2:	f7ff fd81 	bl	80006b8 <lcd_write_data>

    /* LCM Control */
    lcd_write_cmd(0xC0);
 8000bb6:	20c0      	movs	r0, #192	; 0xc0
 8000bb8:	f7ff fd68 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0x2C);
 8000bbc:	202c      	movs	r0, #44	; 0x2c
 8000bbe:	f7ff fd7b 	bl	80006b8 <lcd_write_data>

    /* VDV and VRH Command Enable */
    lcd_write_cmd(0xC2);
 8000bc2:	20c2      	movs	r0, #194	; 0xc2
 8000bc4:	f7ff fd62 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0x01);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f7ff fd75 	bl	80006b8 <lcd_write_data>

    /* VRH Set */
    lcd_write_cmd(0xC3);
 8000bce:	20c3      	movs	r0, #195	; 0xc3
 8000bd0:	f7ff fd5c 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0x19);
 8000bd4:	2019      	movs	r0, #25
 8000bd6:	f7ff fd6f 	bl	80006b8 <lcd_write_data>

    /* VDV Set */
    lcd_write_cmd(0xC4);
 8000bda:	20c4      	movs	r0, #196	; 0xc4
 8000bdc:	f7ff fd56 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0x20);
 8000be0:	2020      	movs	r0, #32
 8000be2:	f7ff fd69 	bl	80006b8 <lcd_write_data>

    /* Frame Rate Control in Normal Mode */
    lcd_write_cmd(0xC6);
 8000be6:	20c6      	movs	r0, #198	; 0xc6
 8000be8:	f7ff fd50 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0x0F);
 8000bec:	200f      	movs	r0, #15
 8000bee:	f7ff fd63 	bl	80006b8 <lcd_write_data>

    /* Power Control 1 */
    lcd_write_cmd(0xD0);
 8000bf2:	20d0      	movs	r0, #208	; 0xd0
 8000bf4:	f7ff fd4a 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0xA4);
 8000bf8:	20a4      	movs	r0, #164	; 0xa4
 8000bfa:	f7ff fd5d 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0xA1);
 8000bfe:	20a1      	movs	r0, #161	; 0xa1
 8000c00:	f7ff fd5a 	bl	80006b8 <lcd_write_data>

    /* Positive Voltage Gamma Control */
    lcd_write_cmd(0xE0);
 8000c04:	20e0      	movs	r0, #224	; 0xe0
 8000c06:	f7ff fd41 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0xD0);
 8000c0a:	20d0      	movs	r0, #208	; 0xd0
 8000c0c:	f7ff fd54 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x04);
 8000c10:	2004      	movs	r0, #4
 8000c12:	f7ff fd51 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x0D);
 8000c16:	200d      	movs	r0, #13
 8000c18:	f7ff fd4e 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x11);
 8000c1c:	2011      	movs	r0, #17
 8000c1e:	f7ff fd4b 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x13);
 8000c22:	2013      	movs	r0, #19
 8000c24:	f7ff fd48 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x2B);
 8000c28:	202b      	movs	r0, #43	; 0x2b
 8000c2a:	f7ff fd45 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x3F);
 8000c2e:	203f      	movs	r0, #63	; 0x3f
 8000c30:	f7ff fd42 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x54);
 8000c34:	2054      	movs	r0, #84	; 0x54
 8000c36:	f7ff fd3f 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x4C);
 8000c3a:	204c      	movs	r0, #76	; 0x4c
 8000c3c:	f7ff fd3c 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x18);
 8000c40:	2018      	movs	r0, #24
 8000c42:	f7ff fd39 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x0D);
 8000c46:	200d      	movs	r0, #13
 8000c48:	f7ff fd36 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x0B);
 8000c4c:	200b      	movs	r0, #11
 8000c4e:	f7ff fd33 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x1F);
 8000c52:	201f      	movs	r0, #31
 8000c54:	f7ff fd30 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x23);
 8000c58:	2023      	movs	r0, #35	; 0x23
 8000c5a:	f7ff fd2d 	bl	80006b8 <lcd_write_data>

    /* Negative Voltage Gamma Control */
    lcd_write_cmd(0xE1);
 8000c5e:	20e1      	movs	r0, #225	; 0xe1
 8000c60:	f7ff fd14 	bl	800068c <lcd_write_cmd>
    lcd_write_data(0xD0);
 8000c64:	20d0      	movs	r0, #208	; 0xd0
 8000c66:	f7ff fd27 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x04);
 8000c6a:	2004      	movs	r0, #4
 8000c6c:	f7ff fd24 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x0C);
 8000c70:	200c      	movs	r0, #12
 8000c72:	f7ff fd21 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x11);
 8000c76:	2011      	movs	r0, #17
 8000c78:	f7ff fd1e 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x13);
 8000c7c:	2013      	movs	r0, #19
 8000c7e:	f7ff fd1b 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x2C);
 8000c82:	202c      	movs	r0, #44	; 0x2c
 8000c84:	f7ff fd18 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x3F);
 8000c88:	203f      	movs	r0, #63	; 0x3f
 8000c8a:	f7ff fd15 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x44);
 8000c8e:	2044      	movs	r0, #68	; 0x44
 8000c90:	f7ff fd12 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x51);
 8000c94:	2051      	movs	r0, #81	; 0x51
 8000c96:	f7ff fd0f 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x2F);
 8000c9a:	202f      	movs	r0, #47	; 0x2f
 8000c9c:	f7ff fd0c 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x1F);
 8000ca0:	201f      	movs	r0, #31
 8000ca2:	f7ff fd09 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x1F);
 8000ca6:	201f      	movs	r0, #31
 8000ca8:	f7ff fd06 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x20);
 8000cac:	2020      	movs	r0, #32
 8000cae:	f7ff fd03 	bl	80006b8 <lcd_write_data>
    lcd_write_data(0x23);
 8000cb2:	2023      	movs	r0, #35	; 0x23
 8000cb4:	f7ff fd00 	bl	80006b8 <lcd_write_data>

    /* Display Inversion On */
    lcd_write_cmd(0x21);
 8000cb8:	2021      	movs	r0, #33	; 0x21
 8000cba:	f7ff fce7 	bl	800068c <lcd_write_cmd>

    lcd_write_cmd(0x29);
 8000cbe:	2029      	movs	r0, #41	; 0x29
 8000cc0:	f7ff fce4 	bl	800068c <lcd_write_cmd>

    lcd_address_set(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 8000cc4:	23ef      	movs	r3, #239	; 0xef
 8000cc6:	22ef      	movs	r2, #239	; 0xef
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fd2a 	bl	8000724 <lcd_address_set>

    lcd_clear(WHITE);
 8000cd0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000cd4:	f7ff fd72 	bl	80007bc <lcd_clear>

    LCD_PWR(1);                 /* Enable display */
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2102      	movs	r1, #2
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <lcd_init+0x1a0>)
 8000cde:	f001 f8e5 	bl	8001eac <HAL_GPIO_WritePin>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	42020000 	.word	0x42020000

08000cec <pwr_pvd_init>:
 *   @arg    PWR_PVDLEVEL_6,2.8V;
 *   @arg    PWR_PVDLEVEL_7,2.9V;
 * @retval   None
 */
void pwr_pvd_init(uint32_t pls)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
    PWR_PVDTypeDef pwr_pvd = {0};
 8000cf4:	f107 0308 	add.w	r3, r7, #8
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]

    pwr_pvd.PVDLevel = pls;                          /* Detecting voltage level */
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	60bb      	str	r3, [r7, #8]
    pwr_pvd.Mode = PWR_PVD_MODE_IT_RISING_FALLING;   /* A double edge trigger using the rising
 8000d02:	2307      	movs	r3, #7
 8000d04:	60fb      	str	r3, [r7, #12]
                                                      * and falling edge of the interrupt line is used */
    HAL_PWR_ConfigPVD(&pwr_pvd);
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 f910 	bl	8001f30 <HAL_PWR_ConfigPVD>

    HAL_NVIC_SetPriority(PVD_AVD_IRQn, 3 ,3);
 8000d10:	2203      	movs	r2, #3
 8000d12:	2103      	movs	r1, #3
 8000d14:	2001      	movs	r0, #1
 8000d16:	f000 fe9e 	bl	8001a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f000 feb5 	bl	8001a8a <HAL_NVIC_EnableIRQ>
    HAL_PWR_EnablePVD();                             /* Enable PVD detection */
 8000d20:	f001 f96e 	bl	8002000 <HAL_PWR_EnablePVD>
}
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d42:	4b2a      	ldr	r3, [pc, #168]	; (8000dec <MX_GPIO_Init+0xc0>)
 8000d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d48:	4a28      	ldr	r2, [pc, #160]	; (8000dec <MX_GPIO_Init+0xc0>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d52:	4b26      	ldr	r3, [pc, #152]	; (8000dec <MX_GPIO_Init+0xc0>)
 8000d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d60:	4b22      	ldr	r3, [pc, #136]	; (8000dec <MX_GPIO_Init+0xc0>)
 8000d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d66:	4a21      	ldr	r2, [pc, #132]	; (8000dec <MX_GPIO_Init+0xc0>)
 8000d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d6c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d70:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <MX_GPIO_Init+0xc0>)
 8000d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <MX_GPIO_Init+0xc0>)
 8000d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d84:	4a19      	ldr	r2, [pc, #100]	; (8000dec <MX_GPIO_Init+0xc0>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <MX_GPIO_Init+0xc0>)
 8000d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_PWR_Pin|LCD_RST_Pin|LCD_WR_Pin|LCD_CS_Pin
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8000da2:	4813      	ldr	r0, [pc, #76]	; (8000df0 <MX_GPIO_Init+0xc4>)
 8000da4:	f001 f882 	bl	8001eac <HAL_GPIO_WritePin>
                          |LED_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_PWR_Pin|LCD_RST_Pin|LCD_WR_Pin|LCD_CS_Pin;
 8000da8:	231e      	movs	r3, #30
 8000daa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480c      	ldr	r0, [pc, #48]	; (8000df0 <MX_GPIO_Init+0xc4>)
 8000dc0:	f000 ff22 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <MX_GPIO_Init+0xc4>)
 8000dde:	f000 ff13 	bl	8001c08 <HAL_GPIO_Init>

}
 8000de2:	bf00      	nop
 8000de4:	3720      	adds	r7, #32
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	44020c00 	.word	0x44020c00
 8000df0:	42020000 	.word	0x42020000

08000df4 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000df8:	f001 f88a 	bl	8001f10 <HAL_ICACHE_Enable>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000e02:	f000 f8ff 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <stm32h503cb_show_mesg>:
 * @brief   Displays information about the experiment
 * @param   None
 * @retval  None
 */
void stm32h503cb_show_mesg(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	/* The serial port outputs the experimental information */
	printf("\n");
 8000e10:	200a      	movs	r0, #10
 8000e12:	f006 fd7b 	bl	800790c <putchar>
	printf("********************************\r\n");
 8000e16:	480a      	ldr	r0, [pc, #40]	; (8000e40 <stm32h503cb_show_mesg+0x34>)
 8000e18:	f006 fdd4 	bl	80079c4 <puts>
	printf("STM32H503\r\n");
 8000e1c:	4809      	ldr	r0, [pc, #36]	; (8000e44 <stm32h503cb_show_mesg+0x38>)
 8000e1e:	f006 fdd1 	bl	80079c4 <puts>
	printf("PVD Test\r\n");
 8000e22:	4809      	ldr	r0, [pc, #36]	; (8000e48 <stm32h503cb_show_mesg+0x3c>)
 8000e24:	f006 fdce 	bl	80079c4 <puts>
	printf("ATOM@ALIENTEK\r\n");
 8000e28:	4808      	ldr	r0, [pc, #32]	; (8000e4c <stm32h503cb_show_mesg+0x40>)
 8000e2a:	f006 fdcb 	bl	80079c4 <puts>
	printf("********************************\r\n");
 8000e2e:	4804      	ldr	r0, [pc, #16]	; (8000e40 <stm32h503cb_show_mesg+0x34>)
 8000e30:	f006 fdc8 	bl	80079c4 <puts>
	printf("\r\n");
 8000e34:	4806      	ldr	r0, [pc, #24]	; (8000e50 <stm32h503cb_show_mesg+0x44>)
 8000e36:	f006 fdc5 	bl	80079c4 <puts>
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	0800816c 	.word	0x0800816c
 8000e44:	08008190 	.word	0x08008190
 8000e48:	0800819c 	.word	0x0800819c
 8000e4c:	080081a8 	.word	0x080081a8
 8000e50:	080081b8 	.word	0x080081b8

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint8_t t = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5e:	f000 fc7f 	bl	8001760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e62:	f000 f869 	bl	8000f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e66:	f7ff ff61 	bl	8000d2c <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000e6a:	f7ff ffc3 	bl	8000df4 <MX_ICACHE_Init>
  MX_SPI1_Init();
 8000e6e:	f000 f8cf 	bl	8001010 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000e72:	f000 fb17 	bl	80014a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  pwr_pvd_init(PWR_PVDLEVEL_5);
 8000e76:	200a      	movs	r0, #10
 8000e78:	f7ff ff38 	bl	8000cec <pwr_pvd_init>
  stm32h503cb_show_mesg();
 8000e7c:	f7ff ffc6 	bl	8000e0c <stm32h503cb_show_mesg>
  lcd_init();
 8000e80:	f7ff fe62 	bl	8000b48 <lcd_init>
  lcd_show_string(0, 5, 240, 32, 32, "STM32H503CBT6", RED);
 8000e84:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e88:	9302      	str	r3, [sp, #8]
 8000e8a:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <main+0xcc>)
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	2320      	movs	r3, #32
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2320      	movs	r3, #32
 8000e94:	22f0      	movs	r2, #240	; 0xf0
 8000e96:	2105      	movs	r1, #5
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff fe05 	bl	8000aa8 <lcd_show_string>
  lcd_show_string(0, 34, 240, 24, 24, "PVD", RED);
 8000e9e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ea2:	9302      	str	r3, [sp, #8]
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <main+0xd0>)
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	2318      	movs	r3, #24
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	2318      	movs	r3, #24
 8000eae:	22f0      	movs	r2, #240	; 0xf0
 8000eb0:	2122      	movs	r1, #34	; 0x22
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f7ff fdf8 	bl	8000aa8 <lcd_show_string>
  lcd_show_string(0, 60, 240, 16, 16, "ATOM@ALIENTEK", RED);
 8000eb8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ebc:	9302      	str	r3, [sp, #8]
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <main+0xd4>)
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	2310      	movs	r3, #16
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2310      	movs	r3, #16
 8000ec8:	22f0      	movs	r2, #240	; 0xf0
 8000eca:	213c      	movs	r1, #60	; 0x3c
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff fdeb 	bl	8000aa8 <lcd_show_string>
  /* The default LCD display voltage is normal */
  lcd_show_string(30, 110, 200, 16, 16, "PVD Voltage OK! ", BLUE);
 8000ed2:	231f      	movs	r3, #31
 8000ed4:	9302      	str	r3, [sp, #8]
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <main+0xd8>)
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	2310      	movs	r3, #16
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2310      	movs	r3, #16
 8000ee0:	22c8      	movs	r2, #200	; 0xc8
 8000ee2:	216e      	movs	r1, #110	; 0x6e
 8000ee4:	201e      	movs	r0, #30
 8000ee6:	f7ff fddf 	bl	8000aa8 <lcd_show_string>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ((t % 20) == 0)
 8000eea:	79fa      	ldrb	r2, [r7, #7]
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <main+0xdc>)
 8000eee:	fba3 1302 	umull	r1, r3, r3, r2
 8000ef2:	0919      	lsrs	r1, r3, #4
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	440b      	add	r3, r1
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d104      	bne.n	8000f0e <main+0xba>
	  {
	      LED_TOGGLE();   /* LED state is flipped */
 8000f04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f08:	480a      	ldr	r0, [pc, #40]	; (8000f34 <main+0xe0>)
 8000f0a:	f000 ffe7 	bl	8001edc <HAL_GPIO_TogglePin>
	  }

	  t++;
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	3301      	adds	r3, #1
 8000f12:	71fb      	strb	r3, [r7, #7]
	  HAL_Delay(500);
 8000f14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f18:	f000 fc9e 	bl	8001858 <HAL_Delay>
	  if ((t % 20) == 0)
 8000f1c:	e7e5      	b.n	8000eea <main+0x96>
 8000f1e:	bf00      	nop
 8000f20:	080081bc 	.word	0x080081bc
 8000f24:	080081cc 	.word	0x080081cc
 8000f28:	080081d0 	.word	0x080081d0
 8000f2c:	080081e0 	.word	0x080081e0
 8000f30:	cccccccd 	.word	0xcccccccd
 8000f34:	42020000 	.word	0x42020000

08000f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b09c      	sub	sp, #112	; 0x70
 8000f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 0320 	add.w	r3, r7, #32
 8000f42:	2250      	movs	r2, #80	; 0x50
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f006 fe1c 	bl	8007b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
 8000f5c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f5e:	4b28      	ldr	r3, [pc, #160]	; (8001000 <SystemClock_Config+0xc8>)
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	4a27      	ldr	r2, [pc, #156]	; (8001000 <SystemClock_Config+0xc8>)
 8000f64:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000f68:	6113      	str	r3, [r2, #16]
 8000f6a:	4b25      	ldr	r3, [pc, #148]	; (8001000 <SystemClock_Config+0xc8>)
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f76:	bf00      	nop
 8000f78:	4b21      	ldr	r3, [pc, #132]	; (8001000 <SystemClock_Config+0xc8>)
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	f003 0308 	and.w	r3, r3, #8
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	d1f9      	bne.n	8000f78 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f84:	2301      	movs	r3, #1
 8000f86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000f92:	2303      	movs	r3, #3
 8000f94:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f96:	2304      	movs	r3, #4
 8000f98:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000f9a:	23fa      	movs	r3, #250	; 0xfa
 8000f9c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000faa:	2304      	movs	r3, #4
 8000fac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 f830 	bl	8002020 <HAL_RCC_OscConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000fc6:	f000 f81d 	bl	8001004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fca:	231f      	movs	r3, #31
 8000fcc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	2105      	movs	r1, #5
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f001 fc51 	bl	8002890 <HAL_RCC_ClockConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ff4:	f000 f806 	bl	8001004 <Error_Handler>
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	3770      	adds	r7, #112	; 0x70
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	44020800 	.word	0x44020800

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	e7fe      	b.n	800100c <Error_Handler+0x8>
	...

08001010 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001014:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <MX_SPI1_Init+0xa4>)
 8001016:	4a28      	ldr	r2, [pc, #160]	; (80010b8 <MX_SPI1_Init+0xa8>)
 8001018:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <MX_SPI1_Init+0xa4>)
 800101c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001020:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001022:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <MX_SPI1_Init+0xa4>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <MX_SPI1_Init+0xa4>)
 800102a:	2207      	movs	r2, #7
 800102c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <MX_SPI1_Init+0xa4>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <MX_SPI1_Init+0xa4>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800103a:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <MX_SPI1_Init+0xa4>)
 800103c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001040:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <MX_SPI1_Init+0xa4>)
 8001044:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001048:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_SPI1_Init+0xa4>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <MX_SPI1_Init+0xa4>)
 8001052:	2200      	movs	r2, #0
 8001054:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_SPI1_Init+0xa4>)
 8001058:	2200      	movs	r2, #0
 800105a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <MX_SPI1_Init+0xa4>)
 800105e:	2207      	movs	r2, #7
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_SPI1_Init+0xa4>)
 8001064:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001068:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <MX_SPI1_Init+0xa4>)
 800106c:	2200      	movs	r2, #0
 800106e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <MX_SPI1_Init+0xa4>)
 8001072:	2200      	movs	r2, #0
 8001074:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_SPI1_Init+0xa4>)
 8001078:	2200      	movs	r2, #0
 800107a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <MX_SPI1_Init+0xa4>)
 800107e:	2200      	movs	r2, #0
 8001080:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <MX_SPI1_Init+0xa4>)
 8001084:	2200      	movs	r2, #0
 8001086:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <MX_SPI1_Init+0xa4>)
 800108a:	2200      	movs	r2, #0
 800108c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <MX_SPI1_Init+0xa4>)
 8001090:	2200      	movs	r2, #0
 8001092:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <MX_SPI1_Init+0xa4>)
 8001096:	2200      	movs	r2, #0
 8001098:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MX_SPI1_Init+0xa4>)
 800109c:	2200      	movs	r2, #0
 800109e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010a0:	4804      	ldr	r0, [pc, #16]	; (80010b4 <MX_SPI1_Init+0xa4>)
 80010a2:	f004 f805 	bl	80050b0 <HAL_SPI_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80010ac:	f7ff ffaa 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000508 	.word	0x20000508
 80010b8:	40013000 	.word	0x40013000

080010bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b0ac      	sub	sp, #176	; 0xb0
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	2288      	movs	r2, #136	; 0x88
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f006 fd51 	bl	8007b84 <memset>
  if(spiHandle->Instance==SPI1)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a30      	ldr	r2, [pc, #192]	; (80011a8 <HAL_SPI_MspInit+0xec>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d159      	bne.n	80011a0 <HAL_SPI_MspInit+0xe4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 80010f8:	2300      	movs	r3, #0
 80010fa:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	4618      	mov	r0, r3
 8001102:	f001 ff07 	bl	8002f14 <HAL_RCCEx_PeriphCLKConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800110c:	f7ff ff7a 	bl	8001004 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001110:	4b26      	ldr	r3, [pc, #152]	; (80011ac <HAL_SPI_MspInit+0xf0>)
 8001112:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001116:	4a25      	ldr	r2, [pc, #148]	; (80011ac <HAL_SPI_MspInit+0xf0>)
 8001118:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800111c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <HAL_SPI_MspInit+0xf0>)
 8001122:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <HAL_SPI_MspInit+0xf0>)
 8001130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001134:	4a1d      	ldr	r2, [pc, #116]	; (80011ac <HAL_SPI_MspInit+0xf0>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800113e:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <HAL_SPI_MspInit+0xf0>)
 8001140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA0     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800114c:	2301      	movs	r3, #1
 800114e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SPI1;
 8001164:	230c      	movs	r3, #12
 8001166:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800116e:	4619      	mov	r1, r3
 8001170:	480f      	ldr	r0, [pc, #60]	; (80011b0 <HAL_SPI_MspInit+0xf4>)
 8001172:	f000 fd49 	bl	8001c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 8001176:	23a0      	movs	r3, #160	; 0xa0
 8001178:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001182:	2301      	movs	r3, #1
 8001184:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800118e:	2305      	movs	r3, #5
 8001190:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001198:	4619      	mov	r1, r3
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <HAL_SPI_MspInit+0xf4>)
 800119c:	f000 fd34 	bl	8001c08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011a0:	bf00      	nop
 80011a2:	37b0      	adds	r7, #176	; 0xb0
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40013000 	.word	0x40013000
 80011ac:	44020c00 	.word	0x44020c00
 80011b0:	42020000 	.word	0x42020000

080011b4 <spi1_write_data>:
  * @param  tx_data: pointer to data buffer
  * @param  Size   : amount of data to be sent
  * @retval None.
  */
void spi1_write_data(uint8_t *tx_data, uint16_t size)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, tx_data, size, HAL_MAX_DELAY);
 80011c0:	887a      	ldrh	r2, [r7, #2]
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	4803      	ldr	r0, [pc, #12]	; (80011d8 <spi1_write_data+0x24>)
 80011ca:	f004 f86d 	bl	80052a8 <HAL_SPI_Transmit>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000508 	.word	0x20000508

080011dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011ee:	e7fe      	b.n	80011ee <NMI_Handler+0x4>

080011f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <HardFault_Handler+0x4>

080011f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <MemManage_Handler+0x4>

080011fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <BusFault_Handler+0x4>

08001202 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <UsageFault_Handler+0x4>

08001208 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001236:	f000 faef 	bl	8001818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <USART1_IRQHandler+0x10>)
 8001246:	f004 fc71 	bl	8005b2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2000066c 	.word	0x2000066c

08001254 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	e00a      	b.n	800127c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001266:	f3af 8000 	nop.w
 800126a:	4601      	mov	r1, r0
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	60ba      	str	r2, [r7, #8]
 8001272:	b2ca      	uxtb	r2, r1
 8001274:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	dbf0      	blt.n	8001266 <_read+0x12>
  }

  return len;
 8001284:	687b      	ldr	r3, [r7, #4]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	e009      	b.n	80012b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	60ba      	str	r2, [r7, #8]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f8e9 	bl	8001480 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbf1      	blt.n	80012a0 <_write+0x12>
  }
  return len;
 80012bc:	687b      	ldr	r3, [r7, #4]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_close>:

int _close(int file)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ee:	605a      	str	r2, [r3, #4]
  return 0;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <_isatty>:

int _isatty(int file)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001338:	4a14      	ldr	r2, [pc, #80]	; (800138c <_sbrk+0x5c>)
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <_sbrk+0x60>)
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <_sbrk+0x64>)
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <_sbrk+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	429a      	cmp	r2, r3
 800135e:	d207      	bcs.n	8001370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001360:	f006 fc5e 	bl	8007c20 <__errno>
 8001364:	4603      	mov	r3, r0
 8001366:	220c      	movs	r2, #12
 8001368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	e009      	b.n	8001384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <_sbrk+0x64>)
 8001380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001382:	68fb      	ldr	r3, [r7, #12]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20008000 	.word	0x20008000
 8001390:	00000400 	.word	0x00000400
 8001394:	20000598 	.word	0x20000598
 8001398:	20000850 	.word	0x20000850

0800139c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013a2:	4b30      	ldr	r3, [pc, #192]	; (8001464 <SystemInit+0xc8>)
 80013a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a8:	4a2e      	ldr	r2, [pc, #184]	; (8001464 <SystemInit+0xc8>)
 80013aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80013b2:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <SystemInit+0xcc>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80013b8:	4b2b      	ldr	r3, [pc, #172]	; (8001468 <SystemInit+0xcc>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80013be:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <SystemInit+0xcc>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80013c4:	4b28      	ldr	r3, [pc, #160]	; (8001468 <SystemInit+0xcc>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4927      	ldr	r1, [pc, #156]	; (8001468 <SystemInit+0xcc>)
 80013ca:	4b28      	ldr	r3, [pc, #160]	; (800146c <SystemInit+0xd0>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80013d0:	4b25      	ldr	r3, [pc, #148]	; (8001468 <SystemInit+0xcc>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <SystemInit+0xcc>)
 80013d8:	2200      	movs	r2, #0
 80013da:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <SystemInit+0xcc>)
 80013de:	4a24      	ldr	r2, [pc, #144]	; (8001470 <SystemInit+0xd4>)
 80013e0:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <SystemInit+0xcc>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <SystemInit+0xcc>)
 80013ea:	4a21      	ldr	r2, [pc, #132]	; (8001470 <SystemInit+0xd4>)
 80013ec:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <SystemInit+0xcc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	641a      	str	r2, [r3, #64]	; 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <SystemInit+0xcc>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a1b      	ldr	r2, [pc, #108]	; (8001468 <SystemInit+0xcc>)
 80013fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <SystemInit+0xcc>)
 8001402:	2200      	movs	r2, #0
 8001404:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <SystemInit+0xc8>)
 8001408:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800140c:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <SystemInit+0xd8>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001416:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800141e:	d003      	beq.n	8001428 <SystemInit+0x8c>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001426:	d117      	bne.n	8001458 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <SystemInit+0xd8>)
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <SystemInit+0xd8>)
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <SystemInit+0xdc>)
 8001438:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <SystemInit+0xd8>)
 800143c:	4a0f      	ldr	r2, [pc, #60]	; (800147c <SystemInit+0xe0>)
 800143e:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <SystemInit+0xd8>)
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <SystemInit+0xd8>)
 8001446:	f043 0302 	orr.w	r3, r3, #2
 800144a:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <SystemInit+0xd8>)
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	4a08      	ldr	r2, [pc, #32]	; (8001474 <SystemInit+0xd8>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	61d3      	str	r3, [r2, #28]
  }
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00
 8001468:	44020c00 	.word	0x44020c00
 800146c:	fae2eae3 	.word	0xfae2eae3
 8001470:	01010280 	.word	0x01010280
 8001474:	40022000 	.word	0x40022000
 8001478:	08192a3b 	.word	0x08192a3b
 800147c:	4c5d6e7f 	.word	0x4c5d6e7f

08001480 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001488:	1d39      	adds	r1, r7, #4
 800148a:	f04f 33ff 	mov.w	r3, #4294967295
 800148e:	2201      	movs	r2, #1
 8001490:	4803      	ldr	r0, [pc, #12]	; (80014a0 <__io_putchar+0x20>)
 8001492:	f004 fa52 	bl	800593a <HAL_UART_Transmit>
	return ch;
 8001496:	687b      	ldr	r3, [r7, #4]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2000066c 	.word	0x2000066c

080014a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014a8:	4b25      	ldr	r3, [pc, #148]	; (8001540 <MX_USART1_UART_Init+0x9c>)
 80014aa:	4a26      	ldr	r2, [pc, #152]	; (8001544 <MX_USART1_UART_Init+0xa0>)
 80014ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014ae:	4b24      	ldr	r3, [pc, #144]	; (8001540 <MX_USART1_UART_Init+0x9c>)
 80014b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014b6:	4b22      	ldr	r3, [pc, #136]	; (8001540 <MX_USART1_UART_Init+0x9c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014bc:	4b20      	ldr	r3, [pc, #128]	; (8001540 <MX_USART1_UART_Init+0x9c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014c2:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <MX_USART1_UART_Init+0x9c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <MX_USART1_UART_Init+0x9c>)
 80014ca:	220c      	movs	r2, #12
 80014cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ce:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <MX_USART1_UART_Init+0x9c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <MX_USART1_UART_Init+0x9c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <MX_USART1_UART_Init+0x9c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <MX_USART1_UART_Init+0x9c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <MX_USART1_UART_Init+0x9c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ec:	4814      	ldr	r0, [pc, #80]	; (8001540 <MX_USART1_UART_Init+0x9c>)
 80014ee:	f004 f9d4 	bl	800589a <HAL_UART_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014f8:	f7ff fd84 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014fc:	2100      	movs	r1, #0
 80014fe:	4810      	ldr	r0, [pc, #64]	; (8001540 <MX_USART1_UART_Init+0x9c>)
 8001500:	f006 f877 	bl	80075f2 <HAL_UARTEx_SetTxFifoThreshold>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800150a:	f7ff fd7b 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800150e:	2100      	movs	r1, #0
 8001510:	480b      	ldr	r0, [pc, #44]	; (8001540 <MX_USART1_UART_Init+0x9c>)
 8001512:	f006 f8ac 	bl	800766e <HAL_UARTEx_SetRxFifoThreshold>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800151c:	f7ff fd72 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001520:	4807      	ldr	r0, [pc, #28]	; (8001540 <MX_USART1_UART_Init+0x9c>)
 8001522:	f006 f82d 	bl	8007580 <HAL_UARTEx_DisableFifoMode>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800152c:	f7ff fd6a 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* This function enables the receive interrupt: flag UART_IT_RXNE and sets
   * the receive buffer and the maximum amount of data the receive buffer can receive */
    HAL_UART_Receive_IT(&huart1, (uint8_t *)g_rx_buffer, RXBUFFERSIZE);
 8001530:	2201      	movs	r2, #1
 8001532:	4905      	ldr	r1, [pc, #20]	; (8001548 <MX_USART1_UART_Init+0xa4>)
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <MX_USART1_UART_Init+0x9c>)
 8001536:	f004 fa9f 	bl	8005a78 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000066c 	.word	0x2000066c
 8001544:	40013800 	.word	0x40013800
 8001548:	20000668 	.word	0x20000668

0800154c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b0ac      	sub	sp, #176	; 0xb0
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	2288      	movs	r2, #136	; 0x88
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f006 fb09 	bl	8007b84 <memset>
  if(uartHandle->Instance==USART1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a35      	ldr	r2, [pc, #212]	; (800164c <HAL_UART_MspInit+0x100>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d163      	bne.n	8001644 <HAL_UART_MspInit+0xf8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800157c:	f04f 0201 	mov.w	r2, #1
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001588:	2300      	movs	r3, #0
 800158a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	4618      	mov	r0, r3
 8001592:	f001 fcbf 	bl	8002f14 <HAL_RCCEx_PeriphCLKConfig>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 800159c:	f7ff fd32 	bl	8001004 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015a0:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <HAL_UART_MspInit+0x104>)
 80015a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80015a6:	4a2a      	ldr	r2, [pc, #168]	; (8001650 <HAL_UART_MspInit+0x104>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ac:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80015b0:	4b27      	ldr	r3, [pc, #156]	; (8001650 <HAL_UART_MspInit+0x104>)
 80015b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80015b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	4b24      	ldr	r3, [pc, #144]	; (8001650 <HAL_UART_MspInit+0x104>)
 80015c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015c4:	4a22      	ldr	r2, [pc, #136]	; (8001650 <HAL_UART_MspInit+0x104>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <HAL_UART_MspInit+0x104>)
 80015d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f0:	2302      	movs	r3, #2
 80015f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015f6:	2307      	movs	r3, #7
 80015f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001600:	4619      	mov	r1, r3
 8001602:	4814      	ldr	r0, [pc, #80]	; (8001654 <HAL_UART_MspInit+0x108>)
 8001604:	f000 fb00 	bl	8001c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800160c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001622:	2307      	movs	r3, #7
 8001624:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800162c:	4619      	mov	r1, r3
 800162e:	4809      	ldr	r0, [pc, #36]	; (8001654 <HAL_UART_MspInit+0x108>)
 8001630:	f000 faea 	bl	8001c08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	2103      	movs	r1, #3
 8001638:	203a      	movs	r0, #58	; 0x3a
 800163a:	f000 fa0c 	bl	8001a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800163e:	203a      	movs	r0, #58	; 0x3a
 8001640:	f000 fa23 	bl	8001a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001644:	bf00      	nop
 8001646:	37b0      	adds	r7, #176	; 0xb0
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40013800 	.word	0x40013800
 8001650:	44020c00 	.word	0x44020c00
 8001654:	42020000 	.word	0x42020000

08001658 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)                      /* if it is serial port USART1 */
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a24      	ldr	r2, [pc, #144]	; (80016f8 <HAL_UART_RxCpltCallback+0xa0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d142      	bne.n	80016f0 <HAL_UART_RxCpltCallback+0x98>
    {
        if ((g_usart_rx_sta & 0x8000) == 0)             /* receipt not completed */
 800166a:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_UART_RxCpltCallback+0xa4>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	b21b      	sxth	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	db38      	blt.n	80016e6 <HAL_UART_RxCpltCallback+0x8e>
        {
            if (g_usart_rx_sta & 0x4000)                /* 0x0d has been received (the Enter key). */
 8001674:	4b21      	ldr	r3, [pc, #132]	; (80016fc <HAL_UART_RxCpltCallback+0xa4>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d011      	beq.n	80016a4 <HAL_UART_RxCpltCallback+0x4c>
            {
                if (g_rx_buffer[0] != 0x0a)             /* this is not 0x0a (that is, not a newline key) */
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <HAL_UART_RxCpltCallback+0xa8>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b0a      	cmp	r3, #10
 8001686:	d003      	beq.n	8001690 <HAL_UART_RxCpltCallback+0x38>
                {
                    g_usart_rx_sta = 0;                 /* receive error,restart */
 8001688:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <HAL_UART_RxCpltCallback+0xa4>)
 800168a:	2200      	movs	r2, #0
 800168c:	801a      	strh	r2, [r3, #0]
 800168e:	e02a      	b.n	80016e6 <HAL_UART_RxCpltCallback+0x8e>
                }
                else                                    /* it gets 0x0a (the newline key) */
                {
                    g_usart_rx_sta |= 0x8000;           /* the reception is complete */
 8001690:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <HAL_UART_RxCpltCallback+0xa4>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800169c:	b29a      	uxth	r2, r3
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <HAL_UART_RxCpltCallback+0xa4>)
 80016a0:	801a      	strh	r2, [r3, #0]
 80016a2:	e020      	b.n	80016e6 <HAL_UART_RxCpltCallback+0x8e>
                }
            }
            else                                        /* 0X0d has not been reached yet (the Enter key) */
            {
                if (g_rx_buffer[0] == 0x0d)
 80016a4:	4b16      	ldr	r3, [pc, #88]	; (8001700 <HAL_UART_RxCpltCallback+0xa8>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b0d      	cmp	r3, #13
 80016aa:	d107      	bne.n	80016bc <HAL_UART_RxCpltCallback+0x64>
                    g_usart_rx_sta |= 0x4000;
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <HAL_UART_RxCpltCallback+0xa4>)
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_UART_RxCpltCallback+0xa4>)
 80016b8:	801a      	strh	r2, [r3, #0]
 80016ba:	e014      	b.n	80016e6 <HAL_UART_RxCpltCallback+0x8e>
                else
                {
                    g_usart_rx_buf[g_usart_rx_sta & 0X3FFF] = g_rx_buffer[0];
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_UART_RxCpltCallback+0xa4>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016c4:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <HAL_UART_RxCpltCallback+0xa8>)
 80016c6:	7811      	ldrb	r1, [r2, #0]
 80016c8:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <HAL_UART_RxCpltCallback+0xac>)
 80016ca:	54d1      	strb	r1, [r2, r3]
                    g_usart_rx_sta++;
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_UART_RxCpltCallback+0xa4>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_UART_RxCpltCallback+0xa4>)
 80016d6:	801a      	strh	r2, [r3, #0]

                    if (g_usart_rx_sta > (USART_REC_LEN - 1))
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <HAL_UART_RxCpltCallback+0xa4>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	2bc7      	cmp	r3, #199	; 0xc7
 80016de:	d902      	bls.n	80016e6 <HAL_UART_RxCpltCallback+0x8e>
                    {
                        g_usart_rx_sta = 0;             /* receive data error, start receive again */
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_UART_RxCpltCallback+0xa4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	801a      	strh	r2, [r3, #0]
                    }
                }
            }
        }

        HAL_UART_Receive_IT(&huart1, (uint8_t *)g_rx_buffer, RXBUFFERSIZE);
 80016e6:	2201      	movs	r2, #1
 80016e8:	4905      	ldr	r1, [pc, #20]	; (8001700 <HAL_UART_RxCpltCallback+0xa8>)
 80016ea:	4807      	ldr	r0, [pc, #28]	; (8001708 <HAL_UART_RxCpltCallback+0xb0>)
 80016ec:	f004 f9c4 	bl	8005a78 <HAL_UART_Receive_IT>
    }
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40013800 	.word	0x40013800
 80016fc:	20000664 	.word	0x20000664
 8001700:	20000668 	.word	0x20000668
 8001704:	2000059c 	.word	0x2000059c
 8001708:	2000066c 	.word	0x2000066c

0800170c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800170c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001744 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001710:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001712:	e003      	b.n	800171c <LoopCopyDataInit>

08001714 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001716:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001718:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800171a:	3104      	adds	r1, #4

0800171c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800171c:	480b      	ldr	r0, [pc, #44]	; (800174c <LoopForever+0xa>)
	ldr	r3, =_edata
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001720:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001722:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001724:	d3f6      	bcc.n	8001714 <CopyDataInit>
	ldr	r2, =_sbss
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001728:	e002      	b.n	8001730 <LoopFillZerobss>

0800172a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800172a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800172c:	f842 3b04 	str.w	r3, [r2], #4

08001730 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <LoopForever+0x16>)
	cmp	r2, r3
 8001732:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001734:	d3f9      	bcc.n	800172a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001736:	f7ff fe31 	bl	800139c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800173a:	f006 fa77 	bl	8007c2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800173e:	f7ff fb89 	bl	8000e54 <main>

08001742 <LoopForever>:

LoopForever:
    b LoopForever
 8001742:	e7fe      	b.n	8001742 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001744:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8001748:	0800cdf8 	.word	0x0800cdf8
	ldr	r0, =_sdata
 800174c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001750:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 8001754:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 8001758:	20000850 	.word	0x20000850

0800175c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800175c:	e7fe      	b.n	800175c <ADC1_IRQHandler>
	...

08001760 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001764:	2003      	movs	r0, #3
 8001766:	f000 f96b 	bl	8001a40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800176a:	f001 fa49 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 800176e:	4602      	mov	r2, r0
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_Init+0x40>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	f003 030f 	and.w	r3, r3, #15
 8001778:	490a      	ldr	r1, [pc, #40]	; (80017a4 <HAL_Init+0x44>)
 800177a:	5ccb      	ldrb	r3, [r1, r3]
 800177c:	fa22 f303 	lsr.w	r3, r2, r3
 8001780:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <HAL_Init+0x48>)
 8001782:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001784:	2001      	movs	r0, #1
 8001786:	f000 f811 	bl	80017ac <HAL_InitTick>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e002      	b.n	800179a <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001794:	f7ff fd22 	bl	80011dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	44020c00 	.word	0x44020c00
 80017a4:	0800cda8 	.word	0x0800cda8
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_InitTick+0x60>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e021      	b.n	8001804 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <HAL_InitTick+0x64>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_InitTick+0x60>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f965 	bl	8001aa6 <HAL_SYSTICK_Config>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00e      	b.n	8001804 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b0f      	cmp	r3, #15
 80017ea:	d80a      	bhi.n	8001802 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ec:	2200      	movs	r2, #0
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f000 f92f 	bl	8001a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f8:	4a06      	ldr	r2, [pc, #24]	; (8001814 <HAL_InitTick+0x68>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	e000      	b.n	8001804 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2000000c 	.word	0x2000000c
 8001810:	20000004 	.word	0x20000004
 8001814:	20000008 	.word	0x20000008

08001818 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_IncTick+0x20>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_IncTick+0x24>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4413      	add	r3, r2
 8001828:	4a04      	ldr	r2, [pc, #16]	; (800183c <HAL_IncTick+0x24>)
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	2000000c 	.word	0x2000000c
 800183c:	20000700 	.word	0x20000700

08001840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return uwTick;
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <HAL_GetTick+0x14>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000700 	.word	0x20000700

08001858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001860:	f7ff ffee 	bl	8001840 <HAL_GetTick>
 8001864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001870:	d005      	beq.n	800187e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_Delay+0x44>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4413      	add	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800187e:	bf00      	nop
 8001880:	f7ff ffde 	bl	8001840 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	429a      	cmp	r2, r3
 800188e:	d8f7      	bhi.n	8001880 <HAL_Delay+0x28>
  {
  }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000000c 	.word	0x2000000c

080018a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018bc:	4013      	ands	r3, r2
 80018be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d2:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <__NVIC_SetPriorityGrouping+0x44>)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	60d3      	str	r3, [r2, #12]
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <__NVIC_GetPriorityGrouping+0x18>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	f003 0307 	and.w	r3, r3, #7
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800190e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001912:	2b00      	cmp	r3, #0
 8001914:	db0b      	blt.n	800192e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	f003 021f 	and.w	r2, r3, #31
 800191c:	4907      	ldr	r1, [pc, #28]	; (800193c <__NVIC_EnableIRQ+0x38>)
 800191e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001922:	095b      	lsrs	r3, r3, #5
 8001924:	2001      	movs	r0, #1
 8001926:	fa00 f202 	lsl.w	r2, r0, r2
 800192a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000e100 	.word	0xe000e100

08001940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	6039      	str	r1, [r7, #0]
 800194a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800194c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001950:	2b00      	cmp	r3, #0
 8001952:	db0a      	blt.n	800196a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	490c      	ldr	r1, [pc, #48]	; (800198c <__NVIC_SetPriority+0x4c>)
 800195a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800195e:	0112      	lsls	r2, r2, #4
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	440b      	add	r3, r1
 8001964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001968:	e00a      	b.n	8001980 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4908      	ldr	r1, [pc, #32]	; (8001990 <__NVIC_SetPriority+0x50>)
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	3b04      	subs	r3, #4
 8001978:	0112      	lsls	r2, r2, #4
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	440b      	add	r3, r1
 800197e:	761a      	strb	r2, [r3, #24]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000e100 	.word	0xe000e100
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	; 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f1c3 0307 	rsb	r3, r3, #7
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	bf28      	it	cs
 80019b2:	2304      	movcs	r3, #4
 80019b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3304      	adds	r3, #4
 80019ba:	2b06      	cmp	r3, #6
 80019bc:	d902      	bls.n	80019c4 <NVIC_EncodePriority+0x30>
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3b03      	subs	r3, #3
 80019c2:	e000      	b.n	80019c6 <NVIC_EncodePriority+0x32>
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	f04f 32ff 	mov.w	r2, #4294967295
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43da      	mvns	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	401a      	ands	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	43d9      	mvns	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	4313      	orrs	r3, r2
         );
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3724      	adds	r7, #36	; 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a0c:	d301      	bcc.n	8001a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e00f      	b.n	8001a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <SysTick_Config+0x40>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1a:	210f      	movs	r1, #15
 8001a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a20:	f7ff ff8e 	bl	8001940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <SysTick_Config+0x40>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2a:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <SysTick_Config+0x40>)
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	e000e010 	.word	0xe000e010

08001a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff29 	bl	80018a0 <__NVIC_SetPriorityGrouping>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b086      	sub	sp, #24
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a64:	f7ff ff40 	bl	80018e8 <__NVIC_GetPriorityGrouping>
 8001a68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	6978      	ldr	r0, [r7, #20]
 8001a70:	f7ff ff90 	bl	8001994 <NVIC_EncodePriority>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff5f 	bl	8001940 <__NVIC_SetPriority>
}
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff33 	bl	8001904 <__NVIC_EnableIRQ>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ffa4 	bl	80019fc <SysTick_Config>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b084      	sub	sp, #16
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001ac6:	f7ff febb 	bl	8001840 <HAL_GetTick>
 8001aca:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e06b      	b.n	8001bae <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d008      	beq.n	8001af4 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e05c      	b.n	8001bae <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	695a      	ldr	r2, [r3, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0204 	orr.w	r2, r2, #4
 8001b02:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2205      	movs	r2, #5
 8001b08:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001b0c:	e020      	b.n	8001b50 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001b0e:	f7ff fe97 	bl	8001840 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b05      	cmp	r3, #5
 8001b1a:	d919      	bls.n	8001b50 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b20:	f043 0210 	orr.w	r2, r3, #16
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b40:	2201      	movs	r2, #1
 8001b42:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e02e      	b.n	8001bae <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0d7      	beq.n	8001b0e <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0202 	orr.w	r2, r2, #2
 8001b6c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2204      	movs	r2, #4
 8001b72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8001b7e:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d007      	beq.n	8001ba4 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b98:	2201      	movs	r2, #1
 8001b9a:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e019      	b.n	8001bfc <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d004      	beq.n	8001bde <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00e      	b.n	8001bfc <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2204      	movs	r2, #4
 8001be2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c16:	e136      	b.n	8001e86 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8128 	beq.w	8001e80 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x38>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b12      	cmp	r3, #18
 8001c3e:	d125      	bne.n	8001c8c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	08da      	lsrs	r2, r3, #3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3208      	adds	r2, #8
 8001c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	220f      	movs	r2, #15
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	4013      	ands	r3, r2
 8001c62:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	f003 020f 	and.w	r2, r3, #15
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	08da      	lsrs	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3208      	adds	r2, #8
 8001c86:	6979      	ldr	r1, [r7, #20]
 8001c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	2203      	movs	r2, #3
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0203 	and.w	r2, r3, #3
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d00b      	beq.n	8001ce0 <HAL_GPIO_Init+0xd8>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d007      	beq.n	8001ce0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cd4:	2b11      	cmp	r3, #17
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b12      	cmp	r3, #18
 8001cde:	d130      	bne.n	8001d42 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d16:	2201      	movs	r2, #1
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	4013      	ands	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	091b      	lsrs	r3, r3, #4
 8001d2c:	f003 0201 	and.w	r2, r3, #1
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d017      	beq.n	8001d7a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	2203      	movs	r2, #3
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d07c      	beq.n	8001e80 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001d86:	4a47      	ldr	r2, [pc, #284]	; (8001ea4 <HAL_GPIO_Init+0x29c>)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	089b      	lsrs	r3, r3, #2
 8001d8c:	3318      	adds	r3, #24
 8001d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d92:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	220f      	movs	r2, #15
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	4013      	ands	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	0a9a      	lsrs	r2, r3, #10
 8001dae:	4b3e      	ldr	r3, [pc, #248]	; (8001ea8 <HAL_GPIO_Init+0x2a0>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	f002 0203 	and.w	r2, r2, #3
 8001db8:	00d2      	lsls	r2, r2, #3
 8001dba:	4093      	lsls	r3, r2
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001dc2:	4938      	ldr	r1, [pc, #224]	; (8001ea4 <HAL_GPIO_Init+0x29c>)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	089b      	lsrs	r3, r3, #2
 8001dc8:	3318      	adds	r3, #24
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001dd0:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <HAL_GPIO_Init+0x29c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001df4:	4a2b      	ldr	r2, [pc, #172]	; (8001ea4 <HAL_GPIO_Init+0x29c>)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001dfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ea4 <HAL_GPIO_Init+0x29c>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	4013      	ands	r3, r2
 8001e08:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001e1e:	4a21      	ldr	r2, [pc, #132]	; (8001ea4 <HAL_GPIO_Init+0x29c>)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001e24:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <HAL_GPIO_Init+0x29c>)
 8001e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e2a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	4013      	ands	r3, r2
 8001e34:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001e4a:	4a16      	ldr	r2, [pc, #88]	; (8001ea4 <HAL_GPIO_Init+0x29c>)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001e52:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <HAL_GPIO_Init+0x29c>)
 8001e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e58:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4013      	ands	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001e78:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <HAL_GPIO_Init+0x29c>)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	3301      	adds	r3, #1
 8001e84:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f47f aec1 	bne.w	8001c18 <HAL_GPIO_Init+0x10>
  }
}
 8001e96:	bf00      	nop
 8001e98:	bf00      	nop
 8001e9a:	371c      	adds	r7, #28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	44022000 	.word	0x44022000
 8001ea8:	002f7f7f 	.word	0x002f7f7f

08001eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ebc:	787b      	ldrb	r3, [r7, #1]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ec2:	887a      	ldrh	r2, [r7, #2]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ec8:	e002      	b.n	8001ed0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eca:	887a      	ldrh	r2, [r7, #2]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eee:	887a      	ldrh	r2, [r7, #2]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	041a      	lsls	r2, r3, #16
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	43d9      	mvns	r1, r3
 8001efa:	887b      	ldrh	r3, [r7, #2]
 8001efc:	400b      	ands	r3, r1
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	619a      	str	r2, [r3, #24]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_ICACHE_Enable+0x1c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <HAL_ICACHE_Enable+0x1c>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	40030400 	.word	0x40030400

08001f30 <HAL_PWR_ConfigPVD>:
  * @param  sConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
  *                      PVD configuration information (PVDLevel and EventMode).
  * @retval None.
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(const PWR_PVDTypeDef *sConfigPVD)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[3:1] bits according to PVDLevel value */
  MODIFY_REG(PWR->VMCR, PWR_VMCR_PLS, sConfigPVD->PVDLevel);
 8001f38:	4b2f      	ldr	r3, [pc, #188]	; (8001ff8 <HAL_PWR_ConfigPVD+0xc8>)
 8001f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3c:	f023 020e 	bic.w	r2, r3, #14
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	492c      	ldr	r1, [pc, #176]	; (8001ff8 <HAL_PWR_ConfigPVD+0xc8>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	634b      	str	r3, [r1, #52]	; 0x34

  /* Disable PVD Event/Interrupt */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8001f4a:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <HAL_PWR_ConfigPVD+0xcc>)
 8001f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f50:	4a2a      	ldr	r2, [pc, #168]	; (8001ffc <HAL_PWR_ConfigPVD+0xcc>)
 8001f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8001f5a:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <HAL_PWR_ConfigPVD+0xcc>)
 8001f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f60:	4a26      	ldr	r2, [pc, #152]	; (8001ffc <HAL_PWR_ConfigPVD+0xcc>)
 8001f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f66:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8001f6a:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <HAL_PWR_ConfigPVD+0xcc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a23      	ldr	r2, [pc, #140]	; (8001ffc <HAL_PWR_ConfigPVD+0xcc>)
 8001f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f74:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8001f76:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <HAL_PWR_ConfigPVD+0xcc>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4a20      	ldr	r2, [pc, #128]	; (8001ffc <HAL_PWR_ConfigPVD+0xcc>)
 8001f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f80:	6053      	str	r3, [r2, #4]

  /* Configure the PVD in interrupt mode */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d007      	beq.n	8001f9e <HAL_PWR_ConfigPVD+0x6e>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <HAL_PWR_ConfigPVD+0xcc>)
 8001f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f94:	4a19      	ldr	r2, [pc, #100]	; (8001ffc <HAL_PWR_ConfigPVD+0xcc>)
 8001f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the PVD in event mode */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d007      	beq.n	8001fba <HAL_PWR_ConfigPVD+0x8a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8001faa:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <HAL_PWR_ConfigPVD+0xcc>)
 8001fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fb0:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <HAL_PWR_ConfigPVD+0xcc>)
 8001fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }

  /* Configure the PVD in rising edge */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_PWR_ConfigPVD+0xa2>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <HAL_PWR_ConfigPVD+0xcc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a0c      	ldr	r2, [pc, #48]	; (8001ffc <HAL_PWR_ConfigPVD+0xcc>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
  }

  /* Configure the PVD in falling edge */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_PWR_ConfigPVD+0xba>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <HAL_PWR_ConfigPVD+0xcc>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4a06      	ldr	r2, [pc, #24]	; (8001ffc <HAL_PWR_ConfigPVD+0xcc>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe8:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	44020800 	.word	0x44020800
 8001ffc:	44022000 	.word	0x44022000

08002000 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  SET_BIT(PWR->VMCR, PWR_VMCR_PVDEN);
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_PWR_EnablePVD+0x1c>)
 8002006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002008:	4a04      	ldr	r2, [pc, #16]	; (800201c <HAL_PWR_EnablePVD+0x1c>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	44020800 	.word	0x44020800

08002020 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	f000 bc28 	b.w	8002884 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002034:	4b94      	ldr	r3, [pc, #592]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	f003 0318 	and.w	r3, r3, #24
 800203c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800203e:	4b92      	ldr	r3, [pc, #584]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	2b00      	cmp	r3, #0
 8002052:	d05b      	beq.n	800210c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	2b08      	cmp	r3, #8
 8002058:	d005      	beq.n	8002066 <HAL_RCC_OscConfig+0x46>
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	2b18      	cmp	r3, #24
 800205e:	d114      	bne.n	800208a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d111      	bne.n	800208a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	f000 bc08 	b.w	8002884 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002074:	4b84      	ldr	r3, [pc, #528]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	041b      	lsls	r3, r3, #16
 8002082:	4981      	ldr	r1, [pc, #516]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 8002084:	4313      	orrs	r3, r2
 8002086:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002088:	e040      	b.n	800210c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d023      	beq.n	80020da <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002092:	4b7d      	ldr	r3, [pc, #500]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a7c      	ldr	r2, [pc, #496]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 8002098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209e:	f7ff fbcf 	bl	8001840 <HAL_GetTick>
 80020a2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80020a6:	f7ff fbcb 	bl	8001840 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e3e5      	b.n	8002884 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80020b8:	4b73      	ldr	r3, [pc, #460]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80020c4:	4b70      	ldr	r3, [pc, #448]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	496d      	ldr	r1, [pc, #436]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	618b      	str	r3, [r1, #24]
 80020d8:	e018      	b.n	800210c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80020da:	4b6b      	ldr	r3, [pc, #428]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a6a      	ldr	r2, [pc, #424]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 80020e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7ff fbab 	bl	8001840 <HAL_GetTick>
 80020ea:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80020ee:	f7ff fba7 	bl	8001840 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e3c1      	b.n	8002884 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002100:	4b61      	ldr	r3, [pc, #388]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f0      	bne.n	80020ee <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 80a0 	beq.w	800225a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	2b10      	cmp	r3, #16
 800211e:	d005      	beq.n	800212c <HAL_RCC_OscConfig+0x10c>
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	2b18      	cmp	r3, #24
 8002124:	d109      	bne.n	800213a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d106      	bne.n	800213a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	f040 8092 	bne.w	800225a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e3a4      	b.n	8002884 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002142:	d106      	bne.n	8002152 <HAL_RCC_OscConfig+0x132>
 8002144:	4b50      	ldr	r3, [pc, #320]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a4f      	ldr	r2, [pc, #316]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 800214a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	e058      	b.n	8002204 <HAL_RCC_OscConfig+0x1e4>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d112      	bne.n	8002180 <HAL_RCC_OscConfig+0x160>
 800215a:	4b4b      	ldr	r3, [pc, #300]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a4a      	ldr	r2, [pc, #296]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 8002160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b48      	ldr	r3, [pc, #288]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a47      	ldr	r2, [pc, #284]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 800216c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	4b45      	ldr	r3, [pc, #276]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a44      	ldr	r2, [pc, #272]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 8002178:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	e041      	b.n	8002204 <HAL_RCC_OscConfig+0x1e4>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002188:	d112      	bne.n	80021b0 <HAL_RCC_OscConfig+0x190>
 800218a:	4b3f      	ldr	r3, [pc, #252]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a3e      	ldr	r2, [pc, #248]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 8002190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4b3c      	ldr	r3, [pc, #240]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a3b      	ldr	r2, [pc, #236]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 800219c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b39      	ldr	r3, [pc, #228]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a38      	ldr	r2, [pc, #224]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e029      	b.n	8002204 <HAL_RCC_OscConfig+0x1e4>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80021b8:	d112      	bne.n	80021e0 <HAL_RCC_OscConfig+0x1c0>
 80021ba:	4b33      	ldr	r3, [pc, #204]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a32      	ldr	r2, [pc, #200]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 80021c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b30      	ldr	r3, [pc, #192]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a2f      	ldr	r2, [pc, #188]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 80021cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	4b2d      	ldr	r3, [pc, #180]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a2c      	ldr	r2, [pc, #176]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 80021d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	e011      	b.n	8002204 <HAL_RCC_OscConfig+0x1e4>
 80021e0:	4b29      	ldr	r3, [pc, #164]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a28      	ldr	r2, [pc, #160]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 80021e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	4b26      	ldr	r3, [pc, #152]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a25      	ldr	r2, [pc, #148]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 80021f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b23      	ldr	r3, [pc, #140]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a22      	ldr	r2, [pc, #136]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 80021fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d013      	beq.n	8002234 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7ff fb18 	bl	8001840 <HAL_GetTick>
 8002210:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002214:	f7ff fb14 	bl	8001840 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	; 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e32e      	b.n	8002884 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x1f4>
 8002232:	e012      	b.n	800225a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7ff fb04 	bl	8001840 <HAL_GetTick>
 8002238:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800223c:	f7ff fb00 	bl	8001840 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	; 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e31a      	b.n	8002884 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <HAL_RCC_OscConfig+0x268>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 809a 	beq.w	800239c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <HAL_RCC_OscConfig+0x25a>
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	2b18      	cmp	r3, #24
 8002272:	d149      	bne.n	8002308 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d146      	bne.n	8002308 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d104      	bne.n	800228c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e2fe      	b.n	8002884 <HAL_RCC_OscConfig+0x864>
 8002286:	bf00      	nop
 8002288:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d11c      	bne.n	80022cc <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002292:	4b9a      	ldr	r3, [pc, #616]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0218 	and.w	r2, r3, #24
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d014      	beq.n	80022cc <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80022a2:	4b96      	ldr	r3, [pc, #600]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 0218 	bic.w	r2, r3, #24
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	4993      	ldr	r1, [pc, #588]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80022b4:	f000 fdd0 	bl	8002e58 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022b8:	4b91      	ldr	r3, [pc, #580]	; (8002500 <HAL_RCC_OscConfig+0x4e0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fa75 	bl	80017ac <HAL_InitTick>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e2db      	b.n	8002884 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7ff fab8 	bl	8001840 <HAL_GetTick>
 80022d0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80022d4:	f7ff fab4 	bl	8001840 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e2ce      	b.n	8002884 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022e6:	4b85      	ldr	r3, [pc, #532]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80022f2:	4b82      	ldr	r3, [pc, #520]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	041b      	lsls	r3, r3, #16
 8002300:	497e      	ldr	r1, [pc, #504]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 8002302:	4313      	orrs	r3, r2
 8002304:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002306:	e049      	b.n	800239c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d02c      	beq.n	800236a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002310:	4b7a      	ldr	r3, [pc, #488]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f023 0218 	bic.w	r2, r3, #24
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	4977      	ldr	r1, [pc, #476]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002322:	4b76      	ldr	r3, [pc, #472]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a75      	ldr	r2, [pc, #468]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232e:	f7ff fa87 	bl	8001840 <HAL_GetTick>
 8002332:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002336:	f7ff fa83 	bl	8001840 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e29d      	b.n	8002884 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002348:	4b6c      	ldr	r3, [pc, #432]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002354:	4b69      	ldr	r3, [pc, #420]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	041b      	lsls	r3, r3, #16
 8002362:	4966      	ldr	r1, [pc, #408]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 8002364:	4313      	orrs	r3, r2
 8002366:	610b      	str	r3, [r1, #16]
 8002368:	e018      	b.n	800239c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236a:	4b64      	ldr	r3, [pc, #400]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a63      	ldr	r2, [pc, #396]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002376:	f7ff fa63 	bl	8001840 <HAL_GetTick>
 800237a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800237e:	f7ff fa5f 	bl	8001840 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e279      	b.n	8002884 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002390:	4b5a      	ldr	r3, [pc, #360]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f0      	bne.n	800237e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d03c      	beq.n	8002422 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d01c      	beq.n	80023ea <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b0:	4b52      	ldr	r3, [pc, #328]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 80023b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023b6:	4a51      	ldr	r2, [pc, #324]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 80023b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c0:	f7ff fa3e 	bl	8001840 <HAL_GetTick>
 80023c4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80023c8:	f7ff fa3a 	bl	8001840 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e254      	b.n	8002884 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80023da:	4b48      	ldr	r3, [pc, #288]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 80023dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0ef      	beq.n	80023c8 <HAL_RCC_OscConfig+0x3a8>
 80023e8:	e01b      	b.n	8002422 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ea:	4b44      	ldr	r3, [pc, #272]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 80023ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023f0:	4a42      	ldr	r2, [pc, #264]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 80023f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fa:	f7ff fa21 	bl	8001840 <HAL_GetTick>
 80023fe:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002402:	f7ff fa1d 	bl	8001840 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e237      	b.n	8002884 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002414:	4b39      	ldr	r3, [pc, #228]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 8002416:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800241a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1ef      	bne.n	8002402 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 80d2 	beq.w	80025d4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002430:	4b34      	ldr	r3, [pc, #208]	; (8002504 <HAL_RCC_OscConfig+0x4e4>)
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d118      	bne.n	800246e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800243c:	4b31      	ldr	r3, [pc, #196]	; (8002504 <HAL_RCC_OscConfig+0x4e4>)
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	4a30      	ldr	r2, [pc, #192]	; (8002504 <HAL_RCC_OscConfig+0x4e4>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002448:	f7ff f9fa 	bl	8001840 <HAL_GetTick>
 800244c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002450:	f7ff f9f6 	bl	8001840 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e210      	b.n	8002884 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002462:	4b28      	ldr	r3, [pc, #160]	; (8002504 <HAL_RCC_OscConfig+0x4e4>)
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d108      	bne.n	8002488 <HAL_RCC_OscConfig+0x468>
 8002476:	4b21      	ldr	r3, [pc, #132]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 8002478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800247c:	4a1f      	ldr	r2, [pc, #124]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002486:	e074      	b.n	8002572 <HAL_RCC_OscConfig+0x552>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d118      	bne.n	80024c2 <HAL_RCC_OscConfig+0x4a2>
 8002490:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 8002492:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002496:	4a19      	ldr	r2, [pc, #100]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024a0:	4b16      	ldr	r3, [pc, #88]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 80024a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024a6:	4a15      	ldr	r2, [pc, #84]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 80024a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024b0:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 80024b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024b6:	4a11      	ldr	r2, [pc, #68]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 80024b8:	f023 0304 	bic.w	r3, r3, #4
 80024bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024c0:	e057      	b.n	8002572 <HAL_RCC_OscConfig+0x552>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b05      	cmp	r3, #5
 80024c8:	d11e      	bne.n	8002508 <HAL_RCC_OscConfig+0x4e8>
 80024ca:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 80024cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024d0:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 80024d2:	f043 0304 	orr.w	r3, r3, #4
 80024d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 80024dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024e0:	4a06      	ldr	r2, [pc, #24]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 80024e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 80024ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024f0:	4a02      	ldr	r2, [pc, #8]	; (80024fc <HAL_RCC_OscConfig+0x4dc>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024fa:	e03a      	b.n	8002572 <HAL_RCC_OscConfig+0x552>
 80024fc:	44020c00 	.word	0x44020c00
 8002500:	20000008 	.word	0x20000008
 8002504:	44020800 	.word	0x44020800
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2b85      	cmp	r3, #133	; 0x85
 800250e:	d118      	bne.n	8002542 <HAL_RCC_OscConfig+0x522>
 8002510:	4ba2      	ldr	r3, [pc, #648]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002516:	4aa1      	ldr	r2, [pc, #644]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002520:	4b9e      	ldr	r3, [pc, #632]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002526:	4a9d      	ldr	r2, [pc, #628]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800252c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002530:	4b9a      	ldr	r3, [pc, #616]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002536:	4a99      	ldr	r2, [pc, #612]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002540:	e017      	b.n	8002572 <HAL_RCC_OscConfig+0x552>
 8002542:	4b96      	ldr	r3, [pc, #600]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002548:	4a94      	ldr	r2, [pc, #592]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 800254a:	f023 0301 	bic.w	r3, r3, #1
 800254e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002552:	4b92      	ldr	r3, [pc, #584]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002554:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002558:	4a90      	ldr	r2, [pc, #576]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 800255a:	f023 0304 	bic.w	r3, r3, #4
 800255e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002562:	4b8e      	ldr	r3, [pc, #568]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002564:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002568:	4a8c      	ldr	r2, [pc, #560]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 800256a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800256e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d016      	beq.n	80025a8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257a:	f7ff f961 	bl	8001840 <HAL_GetTick>
 800257e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002580:	e00a      	b.n	8002598 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7ff f95d 	bl	8001840 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e175      	b.n	8002884 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002598:	4b80      	ldr	r3, [pc, #512]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 800259a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0ed      	beq.n	8002582 <HAL_RCC_OscConfig+0x562>
 80025a6:	e015      	b.n	80025d4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a8:	f7ff f94a 	bl	8001840 <HAL_GetTick>
 80025ac:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ae:	e00a      	b.n	80025c6 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b0:	f7ff f946 	bl	8001840 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e15e      	b.n	8002884 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c6:	4b75      	ldr	r3, [pc, #468]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 80025c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1ed      	bne.n	80025b0 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d036      	beq.n	800264e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d019      	beq.n	800261c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025e8:	4b6c      	ldr	r3, [pc, #432]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a6b      	ldr	r2, [pc, #428]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 80025ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7ff f924 	bl	8001840 <HAL_GetTick>
 80025f8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80025fc:	f7ff f920 	bl	8001840 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e13a      	b.n	8002884 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800260e:	4b63      	ldr	r3, [pc, #396]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x5dc>
 800261a:	e018      	b.n	800264e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800261c:	4b5f      	ldr	r3, [pc, #380]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a5e      	ldr	r2, [pc, #376]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002622:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002626:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7ff f90a 	bl	8001840 <HAL_GetTick>
 800262c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002630:	f7ff f906 	bl	8001840 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e120      	b.n	8002884 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002642:	4b56      	ldr	r3, [pc, #344]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8115 	beq.w	8002882 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	2b18      	cmp	r3, #24
 800265c:	f000 80af 	beq.w	80027be <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002664:	2b02      	cmp	r3, #2
 8002666:	f040 8086 	bne.w	8002776 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800266a:	4b4c      	ldr	r3, [pc, #304]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a4b      	ldr	r2, [pc, #300]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002670:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002676:	f7ff f8e3 	bl	8001840 <HAL_GetTick>
 800267a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800267e:	f7ff f8df 	bl	8001840 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e0f9      	b.n	8002884 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002690:	4b42      	ldr	r3, [pc, #264]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f0      	bne.n	800267e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800269c:	4b3f      	ldr	r3, [pc, #252]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80026a4:	f023 0303 	bic.w	r3, r3, #3
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026b0:	0212      	lsls	r2, r2, #8
 80026b2:	430a      	orrs	r2, r1
 80026b4:	4939      	ldr	r1, [pc, #228]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	628b      	str	r3, [r1, #40]	; 0x28
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026be:	3b01      	subs	r3, #1
 80026c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c8:	3b01      	subs	r3, #1
 80026ca:	025b      	lsls	r3, r3, #9
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d4:	3b01      	subs	r3, #1
 80026d6:	041b      	lsls	r3, r3, #16
 80026d8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	3b01      	subs	r3, #1
 80026e4:	061b      	lsls	r3, r3, #24
 80026e6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80026ea:	492c      	ldr	r1, [pc, #176]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80026f0:	4b2a      	ldr	r3, [pc, #168]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	4a29      	ldr	r2, [pc, #164]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 80026f6:	f023 0310 	bic.w	r3, r3, #16
 80026fa:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002700:	4a26      	ldr	r2, [pc, #152]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002706:	4b25      	ldr	r3, [pc, #148]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	4a24      	ldr	r2, [pc, #144]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 800270c:	f043 0310 	orr.w	r3, r3, #16
 8002710:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002712:	4b22      	ldr	r3, [pc, #136]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002716:	f023 020c 	bic.w	r2, r3, #12
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	491f      	ldr	r1, [pc, #124]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002720:	4313      	orrs	r3, r2
 8002722:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002724:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002728:	f023 0220 	bic.w	r2, r3, #32
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002730:	491a      	ldr	r1, [pc, #104]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002732:	4313      	orrs	r3, r2
 8002734:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002736:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273a:	4a18      	ldr	r2, [pc, #96]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 800273c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002740:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002742:	4b16      	ldr	r3, [pc, #88]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a15      	ldr	r2, [pc, #84]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002748:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800274c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274e:	f7ff f877 	bl	8001840 <HAL_GetTick>
 8002752:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002756:	f7ff f873 	bl	8001840 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e08d      	b.n	8002884 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x736>
 8002774:	e085      	b.n	8002882 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a08      	ldr	r2, [pc, #32]	; (800279c <HAL_RCC_OscConfig+0x77c>)
 800277c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002782:	f7ff f85d 	bl	8001840 <HAL_GetTick>
 8002786:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002788:	e00a      	b.n	80027a0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800278a:	f7ff f859 	bl	8001840 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d903      	bls.n	80027a0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e073      	b.n	8002884 <HAL_RCC_OscConfig+0x864>
 800279c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80027a0:	4b3a      	ldr	r3, [pc, #232]	; (800288c <HAL_RCC_OscConfig+0x86c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1ee      	bne.n	800278a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80027ac:	4b37      	ldr	r3, [pc, #220]	; (800288c <HAL_RCC_OscConfig+0x86c>)
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	4a36      	ldr	r2, [pc, #216]	; (800288c <HAL_RCC_OscConfig+0x86c>)
 80027b2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80027b6:	f023 0303 	bic.w	r3, r3, #3
 80027ba:	6293      	str	r3, [r2, #40]	; 0x28
 80027bc:	e061      	b.n	8002882 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80027be:	4b33      	ldr	r3, [pc, #204]	; (800288c <HAL_RCC_OscConfig+0x86c>)
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80027c4:	4b31      	ldr	r3, [pc, #196]	; (800288c <HAL_RCC_OscConfig+0x86c>)
 80027c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c8:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d031      	beq.n	8002836 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	f003 0203 	and.w	r2, r3, #3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d12a      	bne.n	8002836 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	0a1b      	lsrs	r3, r3, #8
 80027e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d122      	bne.n	8002836 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fa:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d11a      	bne.n	8002836 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	0a5b      	lsrs	r3, r3, #9
 8002804:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800280e:	429a      	cmp	r2, r3
 8002810:	d111      	bne.n	8002836 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	0c1b      	lsrs	r3, r3, #16
 8002816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d108      	bne.n	8002836 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	0e1b      	lsrs	r3, r3, #24
 8002828:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d001      	beq.n	800283a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e024      	b.n	8002884 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <HAL_RCC_OscConfig+0x86c>)
 800283c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283e:	08db      	lsrs	r3, r3, #3
 8002840:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002848:	429a      	cmp	r2, r3
 800284a:	d01a      	beq.n	8002882 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_RCC_OscConfig+0x86c>)
 800284e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002850:	4a0e      	ldr	r2, [pc, #56]	; (800288c <HAL_RCC_OscConfig+0x86c>)
 8002852:	f023 0310 	bic.w	r3, r3, #16
 8002856:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe fff2 	bl	8001840 <HAL_GetTick>
 800285c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800285e:	bf00      	nop
 8002860:	f7fe ffee 	bl	8001840 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	4293      	cmp	r3, r2
 800286a:	d0f9      	beq.n	8002860 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002870:	4a06      	ldr	r2, [pc, #24]	; (800288c <HAL_RCC_OscConfig+0x86c>)
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_RCC_OscConfig+0x86c>)
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	4a04      	ldr	r2, [pc, #16]	; (800288c <HAL_RCC_OscConfig+0x86c>)
 800287c:	f043 0310 	orr.w	r3, r3, #16
 8002880:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3720      	adds	r7, #32
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	44020c00 	.word	0x44020c00

08002890 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e19e      	b.n	8002be2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028a4:	4b83      	ldr	r3, [pc, #524]	; (8002ab4 <HAL_RCC_ClockConfig+0x224>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d910      	bls.n	80028d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b2:	4b80      	ldr	r3, [pc, #512]	; (8002ab4 <HAL_RCC_ClockConfig+0x224>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 020f 	bic.w	r2, r3, #15
 80028ba:	497e      	ldr	r1, [pc, #504]	; (8002ab4 <HAL_RCC_ClockConfig+0x224>)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b7c      	ldr	r3, [pc, #496]	; (8002ab4 <HAL_RCC_ClockConfig+0x224>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e186      	b.n	8002be2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d012      	beq.n	8002906 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	4b74      	ldr	r3, [pc, #464]	; (8002ab8 <HAL_RCC_ClockConfig+0x228>)
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d909      	bls.n	8002906 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80028f2:	4b71      	ldr	r3, [pc, #452]	; (8002ab8 <HAL_RCC_ClockConfig+0x228>)
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	021b      	lsls	r3, r3, #8
 8002900:	496d      	ldr	r1, [pc, #436]	; (8002ab8 <HAL_RCC_ClockConfig+0x228>)
 8002902:	4313      	orrs	r3, r2
 8002904:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d012      	beq.n	8002938 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	4b68      	ldr	r3, [pc, #416]	; (8002ab8 <HAL_RCC_ClockConfig+0x228>)
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002920:	429a      	cmp	r2, r3
 8002922:	d909      	bls.n	8002938 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002924:	4b64      	ldr	r3, [pc, #400]	; (8002ab8 <HAL_RCC_ClockConfig+0x228>)
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	4961      	ldr	r1, [pc, #388]	; (8002ab8 <HAL_RCC_ClockConfig+0x228>)
 8002934:	4313      	orrs	r3, r2
 8002936:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d010      	beq.n	8002966 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	4b5b      	ldr	r3, [pc, #364]	; (8002ab8 <HAL_RCC_ClockConfig+0x228>)
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002950:	429a      	cmp	r2, r3
 8002952:	d908      	bls.n	8002966 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002954:	4b58      	ldr	r3, [pc, #352]	; (8002ab8 <HAL_RCC_ClockConfig+0x228>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4955      	ldr	r1, [pc, #340]	; (8002ab8 <HAL_RCC_ClockConfig+0x228>)
 8002962:	4313      	orrs	r3, r2
 8002964:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d010      	beq.n	8002994 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	4b50      	ldr	r3, [pc, #320]	; (8002ab8 <HAL_RCC_ClockConfig+0x228>)
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	429a      	cmp	r2, r3
 8002980:	d908      	bls.n	8002994 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002982:	4b4d      	ldr	r3, [pc, #308]	; (8002ab8 <HAL_RCC_ClockConfig+0x228>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	f023 020f 	bic.w	r2, r3, #15
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	494a      	ldr	r1, [pc, #296]	; (8002ab8 <HAL_RCC_ClockConfig+0x228>)
 8002990:	4313      	orrs	r3, r2
 8002992:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8093 	beq.w	8002ac8 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80029aa:	4b43      	ldr	r3, [pc, #268]	; (8002ab8 <HAL_RCC_ClockConfig+0x228>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d121      	bne.n	80029fa <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e113      	b.n	8002be2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029c2:	4b3d      	ldr	r3, [pc, #244]	; (8002ab8 <HAL_RCC_ClockConfig+0x228>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d115      	bne.n	80029fa <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e107      	b.n	8002be2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d107      	bne.n	80029ea <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80029da:	4b37      	ldr	r3, [pc, #220]	; (8002ab8 <HAL_RCC_ClockConfig+0x228>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e0fb      	b.n	8002be2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029ea:	4b33      	ldr	r3, [pc, #204]	; (8002ab8 <HAL_RCC_ClockConfig+0x228>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e0f3      	b.n	8002be2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80029fa:	4b2f      	ldr	r3, [pc, #188]	; (8002ab8 <HAL_RCC_ClockConfig+0x228>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f023 0203 	bic.w	r2, r3, #3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	492c      	ldr	r1, [pc, #176]	; (8002ab8 <HAL_RCC_ClockConfig+0x228>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a0c:	f7fe ff18 	bl	8001840 <HAL_GetTick>
 8002a10:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d112      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a1c:	f7fe ff10 	bl	8001840 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e0d7      	b.n	8002be2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a32:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <HAL_RCC_ClockConfig+0x228>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f003 0318 	and.w	r3, r3, #24
 8002a3a:	2b18      	cmp	r3, #24
 8002a3c:	d1ee      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x18c>
 8002a3e:	e043      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d112      	bne.n	8002a6e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a48:	e00a      	b.n	8002a60 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a4a:	f7fe fef9 	bl	8001840 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e0c0      	b.n	8002be2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <HAL_RCC_ClockConfig+0x228>)
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	f003 0318 	and.w	r3, r3, #24
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d1ee      	bne.n	8002a4a <HAL_RCC_ClockConfig+0x1ba>
 8002a6c:	e02c      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d122      	bne.n	8002abc <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a78:	f7fe fee2 	bl	8001840 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e0a9      	b.n	8002be2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <HAL_RCC_ClockConfig+0x228>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f003 0318 	and.w	r3, r3, #24
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d1ee      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x1e8>
 8002a9a:	e015      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a9c:	f7fe fed0 	bl	8001840 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d906      	bls.n	8002abc <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e097      	b.n	8002be2 <HAL_RCC_ClockConfig+0x352>
 8002ab2:	bf00      	nop
 8002ab4:	40022000 	.word	0x40022000
 8002ab8:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002abc:	4b4b      	ldr	r3, [pc, #300]	; (8002bec <HAL_RCC_ClockConfig+0x35c>)
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	f003 0318 	and.w	r3, r3, #24
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1e9      	bne.n	8002a9c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d010      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	4b44      	ldr	r3, [pc, #272]	; (8002bec <HAL_RCC_ClockConfig+0x35c>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d208      	bcs.n	8002af6 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002ae4:	4b41      	ldr	r3, [pc, #260]	; (8002bec <HAL_RCC_ClockConfig+0x35c>)
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	f023 020f 	bic.w	r2, r3, #15
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	493e      	ldr	r1, [pc, #248]	; (8002bec <HAL_RCC_ClockConfig+0x35c>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002af6:	4b3e      	ldr	r3, [pc, #248]	; (8002bf0 <HAL_RCC_ClockConfig+0x360>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d210      	bcs.n	8002b26 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b04:	4b3a      	ldr	r3, [pc, #232]	; (8002bf0 <HAL_RCC_ClockConfig+0x360>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f023 020f 	bic.w	r2, r3, #15
 8002b0c:	4938      	ldr	r1, [pc, #224]	; (8002bf0 <HAL_RCC_ClockConfig+0x360>)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b14:	4b36      	ldr	r3, [pc, #216]	; (8002bf0 <HAL_RCC_ClockConfig+0x360>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d001      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e05d      	b.n	8002be2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d010      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <HAL_RCC_ClockConfig+0x35c>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d208      	bcs.n	8002b54 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002b42:	4b2a      	ldr	r3, [pc, #168]	; (8002bec <HAL_RCC_ClockConfig+0x35c>)
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	4927      	ldr	r1, [pc, #156]	; (8002bec <HAL_RCC_ClockConfig+0x35c>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d012      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	4b21      	ldr	r3, [pc, #132]	; (8002bec <HAL_RCC_ClockConfig+0x35c>)
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d209      	bcs.n	8002b86 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002b72:	4b1e      	ldr	r3, [pc, #120]	; (8002bec <HAL_RCC_ClockConfig+0x35c>)
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	491a      	ldr	r1, [pc, #104]	; (8002bec <HAL_RCC_ClockConfig+0x35c>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d012      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	4b15      	ldr	r3, [pc, #84]	; (8002bec <HAL_RCC_ClockConfig+0x35c>)
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	0a1b      	lsrs	r3, r3, #8
 8002b9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d209      	bcs.n	8002bb8 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002ba4:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_RCC_ClockConfig+0x35c>)
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	490e      	ldr	r1, [pc, #56]	; (8002bec <HAL_RCC_ClockConfig+0x35c>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002bb8:	f000 f822 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCC_ClockConfig+0x35c>)
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	490b      	ldr	r1, [pc, #44]	; (8002bf4 <HAL_RCC_ClockConfig+0x364>)
 8002bc8:	5ccb      	ldrb	r3, [r1, r3]
 8002bca:	fa22 f303 	lsr.w	r3, r2, r3
 8002bce:	4a0a      	ldr	r2, [pc, #40]	; (8002bf8 <HAL_RCC_ClockConfig+0x368>)
 8002bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <HAL_RCC_ClockConfig+0x36c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fde8 	bl	80017ac <HAL_InitTick>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002be0:	7afb      	ldrb	r3, [r7, #11]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	44020c00 	.word	0x44020c00
 8002bf0:	40022000 	.word	0x40022000
 8002bf4:	0800cda8 	.word	0x0800cda8
 8002bf8:	20000004 	.word	0x20000004
 8002bfc:	20000008 	.word	0x20000008

08002c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	; 0x24
 8002c04:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002c06:	4b8c      	ldr	r3, [pc, #560]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f003 0318 	and.w	r3, r3, #24
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d102      	bne.n	8002c18 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002c12:	4b8a      	ldr	r3, [pc, #552]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x23c>)
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	e107      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c18:	4b87      	ldr	r3, [pc, #540]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	f003 0318 	and.w	r3, r3, #24
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d112      	bne.n	8002c4a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002c24:	4b84      	ldr	r3, [pc, #528]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d009      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002c30:	4b81      	ldr	r3, [pc, #516]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	08db      	lsrs	r3, r3, #3
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	4a81      	ldr	r2, [pc, #516]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x240>)
 8002c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c40:	61fb      	str	r3, [r7, #28]
 8002c42:	e0f1      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002c44:	4b7e      	ldr	r3, [pc, #504]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x240>)
 8002c46:	61fb      	str	r3, [r7, #28]
 8002c48:	e0ee      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c4a:	4b7b      	ldr	r3, [pc, #492]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f003 0318 	and.w	r3, r3, #24
 8002c52:	2b10      	cmp	r3, #16
 8002c54:	d102      	bne.n	8002c5c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c56:	4b7b      	ldr	r3, [pc, #492]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x244>)
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	e0e5      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c5c:	4b76      	ldr	r3, [pc, #472]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	f003 0318 	and.w	r3, r3, #24
 8002c64:	2b18      	cmp	r3, #24
 8002c66:	f040 80dd 	bne.w	8002e24 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002c6a:	4b73      	ldr	r3, [pc, #460]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002c74:	4b70      	ldr	r3, [pc, #448]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	0a1b      	lsrs	r3, r3, #8
 8002c7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c7e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002c80:	4b6d      	ldr	r3, [pc, #436]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	091b      	lsrs	r3, r3, #4
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002c8c:	4b6a      	ldr	r3, [pc, #424]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002c90:	08db      	lsrs	r3, r3, #3
 8002c92:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	fb02 f303 	mul.w	r3, r2, r3
 8002c9c:	ee07 3a90 	vmov	s15, r3
 8002ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ca4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 80b7 	beq.w	8002e1e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d003      	beq.n	8002cbe <HAL_RCC_GetSysClockFreq+0xbe>
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d056      	beq.n	8002d6a <HAL_RCC_GetSysClockFreq+0x16a>
 8002cbc:	e077      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002cbe:	4b5e      	ldr	r3, [pc, #376]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x238>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d02d      	beq.n	8002d26 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002cca:	4b5b      	ldr	r3, [pc, #364]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	08db      	lsrs	r3, r3, #3
 8002cd0:	f003 0303 	and.w	r3, r3, #3
 8002cd4:	4a5a      	ldr	r2, [pc, #360]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x240>)
 8002cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cda:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	ee07 3a90 	vmov	s15, r3
 8002cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cf4:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x238>)
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cfc:	ee07 3a90 	vmov	s15, r3
 8002d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d04:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d08:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002e48 <HAL_RCC_GetSysClockFreq+0x248>
 8002d0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d10:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d18:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d20:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002d24:	e065      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	ee07 3a90 	vmov	s15, r3
 8002d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d30:	eddf 6a46 	vldr	s13, [pc, #280]	; 8002e4c <HAL_RCC_GetSysClockFreq+0x24c>
 8002d34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d38:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d40:	ee07 3a90 	vmov	s15, r3
 8002d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d48:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d4c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002e48 <HAL_RCC_GetSysClockFreq+0x248>
 8002d50:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d54:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d64:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002d68:	e043      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	ee07 3a90 	vmov	s15, r3
 8002d70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d74:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002e50 <HAL_RCC_GetSysClockFreq+0x250>
 8002d78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d7c:	4b2e      	ldr	r3, [pc, #184]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d84:	ee07 3a90 	vmov	s15, r3
 8002d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d90:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002e48 <HAL_RCC_GetSysClockFreq+0x248>
 8002d94:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d98:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002da0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002da8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002dac:	e021      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	ee07 3a90 	vmov	s15, r3
 8002db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002db8:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002e54 <HAL_RCC_GetSysClockFreq+0x254>
 8002dbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x238>)
 8002dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc8:	ee07 3a90 	vmov	s15, r3
 8002dcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dd0:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dd4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002e48 <HAL_RCC_GetSysClockFreq+0x248>
 8002dd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ddc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002de0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002de4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dec:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002df0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x238>)
 8002df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df6:	0a5b      	lsrs	r3, r3, #9
 8002df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	ee07 3a90 	vmov	s15, r3
 8002e06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e0a:	edd7 6a06 	vldr	s13, [r7, #24]
 8002e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e16:	ee17 3a90 	vmov	r3, s15
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	e004      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
 8002e22:	e001      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x240>)
 8002e26:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002e28:	69fb      	ldr	r3, [r7, #28]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3724      	adds	r7, #36	; 0x24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	44020c00 	.word	0x44020c00
 8002e3c:	003d0900 	.word	0x003d0900
 8002e40:	03d09000 	.word	0x03d09000
 8002e44:	007a1200 	.word	0x007a1200
 8002e48:	46000000 	.word	0x46000000
 8002e4c:	4c742400 	.word	0x4c742400
 8002e50:	4af42400 	.word	0x4af42400
 8002e54:	4a742400 	.word	0x4a742400

08002e58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002e5c:	f7ff fed0 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8002e60:	4602      	mov	r2, r0
 8002e62:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002e64:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002e66:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002e6a:	4907      	ldr	r1, [pc, #28]	; (8002e88 <HAL_RCC_GetHCLKFreq+0x30>)
 8002e6c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002e6e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002e72:	fa22 f303 	lsr.w	r3, r2, r3
 8002e76:	4a05      	ldr	r2, [pc, #20]	; (8002e8c <HAL_RCC_GetHCLKFreq+0x34>)
 8002e78:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002e7a:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <HAL_RCC_GetHCLKFreq+0x34>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	44020c00 	.word	0x44020c00
 8002e88:	0800cda8 	.word	0x0800cda8
 8002e8c:	20000004 	.word	0x20000004

08002e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002e94:	f7ff ffe0 	bl	8002e58 <HAL_RCC_GetHCLKFreq>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	091b      	lsrs	r3, r3, #4
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	4904      	ldr	r1, [pc, #16]	; (8002eb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ea6:	5ccb      	ldrb	r3, [r1, r3]
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	44020c00 	.word	0x44020c00
 8002eb8:	0800cdb8 	.word	0x0800cdb8

08002ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002ec0:	f7ff ffca 	bl	8002e58 <HAL_RCC_GetHCLKFreq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	0a1b      	lsrs	r3, r3, #8
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	4904      	ldr	r1, [pc, #16]	; (8002ee4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	44020c00 	.word	0x44020c00
 8002ee4:	0800cdb8 	.word	0x0800cdb8

08002ee8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002eec:	f7ff ffb4 	bl	8002e58 <HAL_RCC_GetHCLKFreq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <HAL_RCC_GetPCLK3Freq+0x24>)
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	0b1b      	lsrs	r3, r3, #12
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	4904      	ldr	r1, [pc, #16]	; (8002f10 <HAL_RCC_GetPCLK3Freq+0x28>)
 8002efe:	5ccb      	ldrb	r3, [r1, r3]
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	44020c00 	.word	0x44020c00
 8002f10:	0800cdb8 	.word	0x0800cdb8

08002f14 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f18:	b0aa      	sub	sp, #168	; 0xa8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f20:	2300      	movs	r3, #0
 8002f22:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f26:	2300      	movs	r3, #0
 8002f28:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002f2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f34:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8002f38:	2500      	movs	r5, #0
 8002f3a:	ea54 0305 	orrs.w	r3, r4, r5
 8002f3e:	d00b      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002f40:	4bb8      	ldr	r3, [pc, #736]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f46:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8002f4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	4ab4      	ldr	r2, [pc, #720]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f52:	430b      	orrs	r3, r1
 8002f54:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f60:	f002 0801 	and.w	r8, r2, #1
 8002f64:	f04f 0900 	mov.w	r9, #0
 8002f68:	ea58 0309 	orrs.w	r3, r8, r9
 8002f6c:	d038      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002f6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f74:	2b05      	cmp	r3, #5
 8002f76:	d819      	bhi.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002f78:	a201      	add	r2, pc, #4	; (adr r2, 8002f80 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7e:	bf00      	nop
 8002f80:	08002fb5 	.word	0x08002fb5
 8002f84:	08002f99 	.word	0x08002f99
 8002f88:	08002fad 	.word	0x08002fad
 8002f8c:	08002fb5 	.word	0x08002fb5
 8002f90:	08002fb5 	.word	0x08002fb5
 8002f94:	08002fb5 	.word	0x08002fb5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f9c:	3308      	adds	r3, #8
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f001 ffee 	bl	8004f80 <RCCEx_PLL2_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8002faa:	e004      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8002fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fb6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002fbe:	4b99      	ldr	r3, [pc, #612]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fc4:	f023 0107 	bic.w	r1, r3, #7
 8002fc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fce:	4a95      	ldr	r2, [pc, #596]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002fd6:	e003      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd8:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002fdc:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fe0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe8:	f002 0a02 	and.w	sl, r2, #2
 8002fec:	f04f 0b00 	mov.w	fp, #0
 8002ff0:	ea5a 030b 	orrs.w	r3, sl, fp
 8002ff4:	d03c      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002ff6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	2b28      	cmp	r3, #40	; 0x28
 8002ffe:	d01b      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8003000:	2b28      	cmp	r3, #40	; 0x28
 8003002:	d815      	bhi.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003004:	2b20      	cmp	r3, #32
 8003006:	d019      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003008:	2b20      	cmp	r3, #32
 800300a:	d811      	bhi.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800300c:	2b18      	cmp	r3, #24
 800300e:	d017      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8003010:	2b18      	cmp	r3, #24
 8003012:	d80d      	bhi.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003014:	2b00      	cmp	r3, #0
 8003016:	d015      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003018:	2b08      	cmp	r3, #8
 800301a:	d109      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800301c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003020:	3308      	adds	r3, #8
 8003022:	4618      	mov	r0, r3
 8003024:	f001 ffac 	bl	8004f80 <RCCEx_PLL2_Config>
 8003028:	4603      	mov	r3, r0
 800302a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 800302e:	e00a      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003036:	e006      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003038:	bf00      	nop
 800303a:	e004      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800303c:	bf00      	nop
 800303e:	e002      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003040:	bf00      	nop
 8003042:	e000      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003046:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10c      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800304e:	4b75      	ldr	r3, [pc, #468]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003050:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003054:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003058:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800305c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305e:	4a71      	ldr	r2, [pc, #452]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003060:	430b      	orrs	r3, r1
 8003062:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003066:	e003      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003068:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800306c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003070:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003078:	f002 0304 	and.w	r3, r2, #4
 800307c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003080:	2300      	movs	r3, #0
 8003082:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003086:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800308a:	460b      	mov	r3, r1
 800308c:	4313      	orrs	r3, r2
 800308e:	d040      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003090:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003096:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800309a:	d01e      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800309c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80030a0:	d817      	bhi.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80030a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030a6:	d01a      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80030a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ac:	d811      	bhi.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80030ae:	2bc0      	cmp	r3, #192	; 0xc0
 80030b0:	d017      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80030b2:	2bc0      	cmp	r3, #192	; 0xc0
 80030b4:	d80d      	bhi.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d015      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80030ba:	2b40      	cmp	r3, #64	; 0x40
 80030bc:	d109      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030c2:	3308      	adds	r3, #8
 80030c4:	4618      	mov	r0, r3
 80030c6:	f001 ff5b 	bl	8004f80 <RCCEx_PLL2_Config>
 80030ca:	4603      	mov	r3, r0
 80030cc:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 80030d0:	e00a      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80030d8:	e006      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80030da:	bf00      	nop
 80030dc:	e004      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80030de:	bf00      	nop
 80030e0:	e002      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80030e2:	bf00      	nop
 80030e4:	e000      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80030e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e8:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10c      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80030f0:	4b4c      	ldr	r3, [pc, #304]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80030f6:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80030fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003100:	4a48      	ldr	r2, [pc, #288]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003102:	430b      	orrs	r3, r1
 8003104:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003108:	e003      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800310a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800310e:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003112:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800311e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003122:	2300      	movs	r3, #0
 8003124:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003128:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800312c:	460b      	mov	r3, r1
 800312e:	4313      	orrs	r3, r2
 8003130:	d043      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003132:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800313c:	d021      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800313e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003142:	d81a      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003144:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003148:	d01d      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x272>
 800314a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800314e:	d814      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003150:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003154:	d019      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8003156:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800315a:	d80e      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x266>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d016      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8003160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003164:	d109      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003166:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800316a:	3308      	adds	r3, #8
 800316c:	4618      	mov	r0, r3
 800316e:	f001 ff07 	bl	8004f80 <RCCEx_PLL2_Config>
 8003172:	4603      	mov	r3, r0
 8003174:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003178:	e00a      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003180:	e006      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003182:	bf00      	nop
 8003184:	e004      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003186:	bf00      	nop
 8003188:	e002      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800318a:	bf00      	nop
 800318c:	e000      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800318e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003190:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10c      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003198:	4b22      	ldr	r3, [pc, #136]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800319a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800319e:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80031a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	4a1e      	ldr	r2, [pc, #120]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031aa:	430b      	orrs	r3, r1
 80031ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031b0:	e003      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b2:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80031b6:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80031c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80031c8:	2300      	movs	r3, #0
 80031ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80031d0:	460b      	mov	r3, r1
 80031d2:	4313      	orrs	r3, r2
 80031d4:	d03e      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80031d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031e0:	d01b      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x306>
 80031e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031e6:	d814      	bhi.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80031e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031ec:	d017      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80031ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031f2:	d80e      	bhi.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d017      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80031f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fc:	d109      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003202:	3308      	adds	r3, #8
 8003204:	4618      	mov	r0, r3
 8003206:	f001 febb 	bl	8004f80 <RCCEx_PLL2_Config>
 800320a:	4603      	mov	r3, r0
 800320c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003210:	e00b      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003218:	e007      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800321a:	bf00      	nop
 800321c:	e005      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800321e:	bf00      	nop
 8003220:	e003      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x316>
 8003222:	bf00      	nop
 8003224:	44020c00 	.word	0x44020c00
        break;
 8003228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800322a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10c      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003232:	4ba5      	ldr	r3, [pc, #660]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003234:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003238:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800323c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	4aa1      	ldr	r2, [pc, #644]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003244:	430b      	orrs	r3, r1
 8003246:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800324a:	e003      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003250:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003254:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003260:	673b      	str	r3, [r7, #112]	; 0x70
 8003262:	2300      	movs	r3, #0
 8003264:	677b      	str	r3, [r7, #116]	; 0x74
 8003266:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800326a:	460b      	mov	r3, r1
 800326c:	4313      	orrs	r3, r2
 800326e:	d03b      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003270:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003276:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800327a:	d01b      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800327c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003280:	d814      	bhi.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003282:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003286:	d017      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003288:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800328c:	d80e      	bhi.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x398>
 800328e:	2b00      	cmp	r3, #0
 8003290:	d014      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003292:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003296:	d109      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003298:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800329c:	3308      	adds	r3, #8
 800329e:	4618      	mov	r0, r3
 80032a0:	f001 fe6e 	bl	8004f80 <RCCEx_PLL2_Config>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80032aa:	e008      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80032b2:	e004      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80032b4:	bf00      	nop
 80032b6:	e002      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80032b8:	bf00      	nop
 80032ba:	e000      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80032bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032be:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80032c6:	4b80      	ldr	r3, [pc, #512]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80032c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80032cc:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80032d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d6:	4a7c      	ldr	r2, [pc, #496]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80032d8:	430b      	orrs	r3, r1
 80032da:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80032de:	e003      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e0:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80032e4:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80032e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f0:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80032f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80032f6:	2300      	movs	r3, #0
 80032f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032fa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80032fe:	460b      	mov	r3, r1
 8003300:	4313      	orrs	r3, r2
 8003302:	d033      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003304:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800330e:	d015      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003310:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003314:	d80e      	bhi.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003316:	2b00      	cmp	r3, #0
 8003318:	d012      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800331a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800331e:	d109      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003320:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003324:	3308      	adds	r3, #8
 8003326:	4618      	mov	r0, r3
 8003328:	f001 fe2a 	bl	8004f80 <RCCEx_PLL2_Config>
 800332c:	4603      	mov	r3, r0
 800332e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003332:	e006      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800333a:	e002      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 800333c:	bf00      	nop
 800333e:	e000      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8003340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003342:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10c      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800334a:	4b5f      	ldr	r3, [pc, #380]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800334c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003350:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8003354:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335a:	4a5b      	ldr	r2, [pc, #364]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800335c:	430b      	orrs	r3, r1
 800335e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003362:	e003      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003364:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003368:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 800336c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003374:	2100      	movs	r1, #0
 8003376:	6639      	str	r1, [r7, #96]	; 0x60
 8003378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800337c:	667b      	str	r3, [r7, #100]	; 0x64
 800337e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003382:	460b      	mov	r3, r1
 8003384:	4313      	orrs	r3, r2
 8003386:	d033      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8003388:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800338c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003392:	d015      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8003394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003398:	d80e      	bhi.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800339a:	2b00      	cmp	r3, #0
 800339c:	d012      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800339e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033a2:	d109      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* I3C2 clock source config set later after clock selection check */
        break;

      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80033a8:	3308      	adds	r3, #8
 80033aa:	4618      	mov	r0, r3
 80033ac:	f001 fde8 	bl	8004f80 <RCCEx_PLL2_Config>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* I3C2 clock source config set later after clock selection check */
        break;
 80033b6:	e006      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80033be:	e002      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 80033c0:	bf00      	nop
 80033c2:	e000      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 80033c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 80033ce:	4b3e      	ldr	r3, [pc, #248]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80033d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80033d4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80033d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80033dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033de:	4a3a      	ldr	r2, [pc, #232]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80033e0:	430b      	orrs	r3, r1
 80033e2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80033e6:	e003      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e8:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80033ec:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80033f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80033f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f8:	2100      	movs	r1, #0
 80033fa:	65b9      	str	r1, [r7, #88]	; 0x58
 80033fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003400:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003402:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003406:	460b      	mov	r3, r1
 8003408:	4313      	orrs	r3, r2
 800340a:	d00e      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800340c:	4b2e      	ldr	r3, [pc, #184]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	4a2d      	ldr	r2, [pc, #180]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003412:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003416:	61d3      	str	r3, [r2, #28]
 8003418:	4b2b      	ldr	r3, [pc, #172]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800341a:	69d9      	ldr	r1, [r3, #28]
 800341c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003420:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003424:	4a28      	ldr	r2, [pc, #160]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003426:	430b      	orrs	r3, r1
 8003428:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800342a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003436:	653b      	str	r3, [r7, #80]	; 0x50
 8003438:	2300      	movs	r3, #0
 800343a:	657b      	str	r3, [r7, #84]	; 0x54
 800343c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003440:	460b      	mov	r3, r1
 8003442:	4313      	orrs	r3, r2
 8003444:	d046      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003446:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800344a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003450:	d021      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003452:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003456:	d81a      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345c:	d01d      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x586>
 800345e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003462:	d814      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003464:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003468:	d019      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800346a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800346e:	d80e      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003470:	2b00      	cmp	r3, #0
 8003472:	d016      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8003474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003478:	d109      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800347a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800347e:	3308      	adds	r3, #8
 8003480:	4618      	mov	r0, r3
 8003482:	f001 fd7d 	bl	8004f80 <RCCEx_PLL2_Config>
 8003486:	4603      	mov	r3, r0
 8003488:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800348c:	e00a      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003494:	e006      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003496:	bf00      	nop
 8003498:	e004      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800349a:	bf00      	nop
 800349c:	e002      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800349e:	bf00      	nop
 80034a0:	e000      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80034a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10f      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80034ae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80034b2:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80034b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034bc:	4a02      	ldr	r2, [pc, #8]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80034be:	430b      	orrs	r3, r1
 80034c0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80034c4:	e006      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80034c6:	bf00      	nop
 80034c8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034cc:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80034d0:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80034d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034dc:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80034e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80034e2:	2300      	movs	r3, #0
 80034e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034e6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80034ea:	460b      	mov	r3, r1
 80034ec:	4313      	orrs	r3, r2
 80034ee:	d043      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80034f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80034fa:	d021      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 80034fc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003500:	d81a      	bhi.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003502:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003506:	d01d      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8003508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800350c:	d814      	bhi.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800350e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003512:	d019      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8003514:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003518:	d80e      	bhi.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d016      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x638>
 800351e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003522:	d109      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003524:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003528:	3308      	adds	r3, #8
 800352a:	4618      	mov	r0, r3
 800352c:	f001 fd28 	bl	8004f80 <RCCEx_PLL2_Config>
 8003530:	4603      	mov	r3, r0
 8003532:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003536:	e00a      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800353e:	e006      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003540:	bf00      	nop
 8003542:	e004      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003544:	bf00      	nop
 8003546:	e002      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003548:	bf00      	nop
 800354a:	e000      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 800354c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800354e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10c      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003556:	4bb6      	ldr	r3, [pc, #728]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003558:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800355c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003560:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003566:	4ab2      	ldr	r2, [pc, #712]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003568:	430b      	orrs	r3, r1
 800356a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800356e:	e003      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003570:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003574:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003578:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003584:	643b      	str	r3, [r7, #64]	; 0x40
 8003586:	2300      	movs	r3, #0
 8003588:	647b      	str	r3, [r7, #68]	; 0x44
 800358a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800358e:	460b      	mov	r3, r1
 8003590:	4313      	orrs	r3, r2
 8003592:	d030      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003594:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800359a:	2b05      	cmp	r3, #5
 800359c:	d80f      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d211      	bcs.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d911      	bls.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d109      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80035ae:	3308      	adds	r3, #8
 80035b0:	4618      	mov	r0, r3
 80035b2:	f001 fce5 	bl	8004f80 <RCCEx_PLL2_Config>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80035bc:	e006      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80035c4:	e002      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 80035c6:	bf00      	nop
 80035c8:	e000      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 80035ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035cc:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10c      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80035d4:	4b96      	ldr	r3, [pc, #600]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80035d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035da:	f023 0107 	bic.w	r1, r3, #7
 80035de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80035e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035e4:	4a92      	ldr	r2, [pc, #584]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80035e6:	430b      	orrs	r3, r1
 80035e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035ec:	e003      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ee:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80035f2:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80035f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80035fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fe:	2100      	movs	r1, #0
 8003600:	63b9      	str	r1, [r7, #56]	; 0x38
 8003602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003608:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800360c:	460b      	mov	r3, r1
 800360e:	4313      	orrs	r3, r2
 8003610:	d022      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003612:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x714>
 800361c:	2b08      	cmp	r3, #8
 800361e:	d005      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003626:	e002      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003628:	bf00      	nop
 800362a:	e000      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 800362c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800362e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10c      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003636:	4b7e      	ldr	r3, [pc, #504]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003638:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800363c:	f023 0108 	bic.w	r1, r3, #8
 8003640:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003646:	4a7a      	ldr	r2, [pc, #488]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003648:	430b      	orrs	r3, r1
 800364a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800364e:	e003      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003650:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003654:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003658:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003664:	633b      	str	r3, [r7, #48]	; 0x30
 8003666:	2300      	movs	r3, #0
 8003668:	637b      	str	r3, [r7, #52]	; 0x34
 800366a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800366e:	460b      	mov	r3, r1
 8003670:	4313      	orrs	r3, r2
 8003672:	f000 80b0 	beq.w	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003676:	4b6f      	ldr	r3, [pc, #444]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	4a6e      	ldr	r2, [pc, #440]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003682:	f7fe f8dd 	bl	8001840 <HAL_GetTick>
 8003686:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800368a:	e00b      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368c:	f7fe f8d8 	bl	8001840 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d903      	bls.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80036a2:	e005      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80036a4:	4b63      	ldr	r3, [pc, #396]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0ed      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 80036b0:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f040 808a 	bne.w	80037ce <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036ba:	4b5d      	ldr	r3, [pc, #372]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80036c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d022      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x802>
 80036d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80036d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036d6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80036da:	429a      	cmp	r2, r3
 80036dc:	d01b      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036de:	4b54      	ldr	r3, [pc, #336]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036ec:	4b50      	ldr	r3, [pc, #320]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036f2:	4a4f      	ldr	r2, [pc, #316]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036fc:	4b4c      	ldr	r3, [pc, #304]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003702:	4a4b      	ldr	r2, [pc, #300]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003708:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800370c:	4a48      	ldr	r2, [pc, #288]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800370e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003712:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003716:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d019      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003722:	f7fe f88d 	bl	8001840 <HAL_GetTick>
 8003726:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800372a:	e00d      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372c:	f7fe f888 	bl	8001840 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	f241 3288 	movw	r2, #5000	; 0x1388
 800373c:	4293      	cmp	r3, r2
 800373e:	d903      	bls.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
            break;
 8003746:	e006      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003748:	4b39      	ldr	r3, [pc, #228]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800374a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0ea      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8003756:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d132      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800375e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003768:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800376c:	d10f      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x87a>
 800376e:	4b30      	ldr	r3, [pc, #192]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003776:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800377a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003782:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003786:	4a2a      	ldr	r2, [pc, #168]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003788:	430b      	orrs	r3, r1
 800378a:	61d3      	str	r3, [r2, #28]
 800378c:	e005      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x886>
 800378e:	4b28      	ldr	r3, [pc, #160]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	4a27      	ldr	r2, [pc, #156]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003794:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003798:	61d3      	str	r3, [r2, #28]
 800379a:	4b25      	ldr	r3, [pc, #148]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800379c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037a0:	4a23      	ldr	r2, [pc, #140]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80037aa:	4b21      	ldr	r3, [pc, #132]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037ac:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 80037b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80037b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ba:	4a1d      	ldr	r2, [pc, #116]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037bc:	430b      	orrs	r3, r1
 80037be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80037c2:	e008      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037c4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80037c8:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 80037cc:	e003      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ce:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80037d2:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80037d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80037e4:	2300      	movs	r3, #0
 80037e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80037ec:	460b      	mov	r3, r1
 80037ee:	4313      	orrs	r3, r2
 80037f0:	d038      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80037f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80037f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f8:	2b30      	cmp	r3, #48	; 0x30
 80037fa:	d014      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x912>
 80037fc:	2b30      	cmp	r3, #48	; 0x30
 80037fe:	d80e      	bhi.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003800:	2b20      	cmp	r3, #32
 8003802:	d012      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x916>
 8003804:	2b20      	cmp	r3, #32
 8003806:	d80a      	bhi.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003808:	2b00      	cmp	r3, #0
 800380a:	d015      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800380c:	2b10      	cmp	r3, #16
 800380e:	d106      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003810:	4b07      	ldr	r3, [pc, #28]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	4a06      	ldr	r2, [pc, #24]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381a:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800381c:	e00d      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003824:	e009      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003826:	bf00      	nop
 8003828:	e007      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 800382a:	bf00      	nop
 800382c:	e005      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x926>
 800382e:	bf00      	nop
 8003830:	44020c00 	.word	0x44020c00
 8003834:	44020800 	.word	0x44020800
        break;
 8003838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800383a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10c      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003842:	4bb5      	ldr	r3, [pc, #724]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003844:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003848:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800384c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003852:	49b1      	ldr	r1, [pc, #708]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 800385a:	e003      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800385c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003860:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003864:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386c:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8003870:	623b      	str	r3, [r7, #32]
 8003872:	2300      	movs	r3, #0
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
 8003876:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800387a:	460b      	mov	r3, r1
 800387c:	4313      	orrs	r3, r2
 800387e:	d03c      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003880:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003886:	2b04      	cmp	r3, #4
 8003888:	d81d      	bhi.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 800388a:	a201      	add	r2, pc, #4	; (adr r2, 8003890 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800388c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003890:	080038a5 	.word	0x080038a5
 8003894:	080038b3 	.word	0x080038b3
 8003898:	080038c7 	.word	0x080038c7
 800389c:	080038cf 	.word	0x080038cf
 80038a0:	080038cf 	.word	0x080038cf
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038a4:	4b9c      	ldr	r3, [pc, #624]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	4a9b      	ldr	r2, [pc, #620]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80038aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ae:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80038b0:	e00e      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80038b6:	3308      	adds	r3, #8
 80038b8:	4618      	mov	r0, r3
 80038ba:	f001 fb61 	bl	8004f80 <RCCEx_PLL2_Config>
 80038be:	4603      	mov	r3, r0
 80038c0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80038c4:	e004      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80038cc:	e000      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 80038ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038d0:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10c      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80038d8:	4b8f      	ldr	r3, [pc, #572]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80038da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038de:	f023 0207 	bic.w	r2, r3, #7
 80038e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80038e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038e8:	498b      	ldr	r1, [pc, #556]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80038f0:	e003      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f2:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80038f6:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80038fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80038fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003902:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003906:	61bb      	str	r3, [r7, #24]
 8003908:	2300      	movs	r3, #0
 800390a:	61fb      	str	r3, [r7, #28]
 800390c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003910:	460b      	mov	r3, r1
 8003912:	4313      	orrs	r3, r2
 8003914:	d03c      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003916:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800391a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391c:	2b20      	cmp	r3, #32
 800391e:	d01f      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003920:	2b20      	cmp	r3, #32
 8003922:	d819      	bhi.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003924:	2b18      	cmp	r3, #24
 8003926:	d01d      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003928:	2b18      	cmp	r3, #24
 800392a:	d815      	bhi.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003930:	2b08      	cmp	r3, #8
 8003932:	d007      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003934:	e010      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003936:	4b78      	ldr	r3, [pc, #480]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393a:	4a77      	ldr	r2, [pc, #476]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800393c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003940:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003942:	e010      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003944:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003948:	3308      	adds	r3, #8
 800394a:	4618      	mov	r0, r3
 800394c:	f001 fb18 	bl	8004f80 <RCCEx_PLL2_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003956:	e006      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800395e:	e002      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003960:	bf00      	nop
 8003962:	e000      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003966:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10c      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800396e:	4b6a      	ldr	r3, [pc, #424]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003974:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003978:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800397c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397e:	4966      	ldr	r1, [pc, #408]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003986:	e003      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003988:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800398c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003990:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80039a6:	460b      	mov	r3, r1
 80039a8:	4313      	orrs	r3, r2
 80039aa:	d03e      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80039ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80039b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b6:	d020      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xae6>
 80039b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039bc:	d819      	bhi.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xade>
 80039be:	2bc0      	cmp	r3, #192	; 0xc0
 80039c0:	d01d      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xaea>
 80039c2:	2bc0      	cmp	r3, #192	; 0xc0
 80039c4:	d815      	bhi.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xade>
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 80039ca:	2b40      	cmp	r3, #64	; 0x40
 80039cc:	d007      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xaca>
 80039ce:	e010      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d0:	4b51      	ldr	r3, [pc, #324]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80039d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d4:	4a50      	ldr	r2, [pc, #320]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80039d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039da:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80039dc:	e010      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80039e2:	3308      	adds	r3, #8
 80039e4:	4618      	mov	r0, r3
 80039e6:	f001 facb 	bl	8004f80 <RCCEx_PLL2_Config>
 80039ea:	4603      	mov	r3, r0
 80039ec:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80039f0:	e006      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80039f8:	e002      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80039fa:	bf00      	nop
 80039fc:	e000      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80039fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a00:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10c      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003a08:	4b43      	ldr	r3, [pc, #268]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a0e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003a12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a18:	493f      	ldr	r1, [pc, #252]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003a20:	e003      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a22:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003a26:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a32:	2100      	movs	r1, #0
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a40:	460b      	mov	r3, r1
 8003a42:	4313      	orrs	r3, r2
 8003a44:	d038      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003a46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a50:	d00e      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a56:	d815      	bhi.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d017      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a60:	d110      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a62:	4b2d      	ldr	r3, [pc, #180]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	4a2c      	ldr	r2, [pc, #176]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a6c:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003a6e:	e00e      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a74:	3308      	adds	r3, #8
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 fa82 	bl	8004f80 <RCCEx_PLL2_Config>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003a82:	e004      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003a8a:	e000      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8003a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a8e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003a96:	4b20      	ldr	r3, [pc, #128]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa6:	491c      	ldr	r1, [pc, #112]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8003aae:	e003      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab0:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003ab4:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ab8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	6039      	str	r1, [r7, #0]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	607b      	str	r3, [r7, #4]
 8003aca:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	d039      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003ad4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ada:	2b30      	cmp	r3, #48	; 0x30
 8003adc:	d01e      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003ade:	2b30      	cmp	r3, #48	; 0x30
 8003ae0:	d815      	bhi.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003ae2:	2b10      	cmp	r3, #16
 8003ae4:	d002      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8003ae6:	2b20      	cmp	r3, #32
 8003ae8:	d007      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003aea:	e010      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aec:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	4a09      	ldr	r2, [pc, #36]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af6:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003af8:	e011      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003afa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003afe:	3308      	adds	r3, #8
 8003b00:	4618      	mov	r0, r3
 8003b02:	f001 fa3d 	bl	8004f80 <RCCEx_PLL2_Config>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003b0c:	e007      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8003b14:	e003      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8003b16:	bf00      	nop
 8003b18:	44020c00 	.word	0x44020c00
        break;
 8003b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b1e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10c      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003b26:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003b28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003b2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b36:	4908      	ldr	r1, [pc, #32]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003b3e:	e003      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b40:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003b44:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8003b48:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	37a8      	adds	r7, #168	; 0xa8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b56:	bf00      	nop
 8003b58:	44020c00 	.word	0x44020c00

08003b5c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b08b      	sub	sp, #44	; 0x2c
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003b64:	4bad      	ldr	r3, [pc, #692]	; (8003e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b6c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003b6e:	4bab      	ldr	r3, [pc, #684]	; (8003e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003b78:	4ba8      	ldr	r3, [pc, #672]	; (8003e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7c:	0a1b      	lsrs	r3, r3, #8
 8003b7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b82:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8003b84:	4ba5      	ldr	r3, [pc, #660]	; (8003e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003b8e:	4ba3      	ldr	r3, [pc, #652]	; (8003e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	08db      	lsrs	r3, r3, #3
 8003b94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	ee07 3a90 	vmov	s15, r3
 8003ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8126 	beq.w	8003dfe <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d053      	beq.n	8003c60 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	d86f      	bhi.n	8003c9e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d003      	beq.n	8003bcc <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d02b      	beq.n	8003c22 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8003bca:	e068      	b.n	8003c9e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003bcc:	4b93      	ldr	r3, [pc, #588]	; (8003e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	08db      	lsrs	r3, r3, #3
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	4a92      	ldr	r2, [pc, #584]	; (8003e20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bdc:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	ee07 3a90 	vmov	s15, r3
 8003be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	ee07 3a90 	vmov	s15, r3
 8003bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	ee07 3a90 	vmov	s15, r3
 8003bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c00:	ed97 6a04 	vldr	s12, [r7, #16]
 8003c04:	eddf 5a87 	vldr	s11, [pc, #540]	; 8003e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003c08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c1c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8003c20:	e068      	b.n	8003cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	ee07 3a90 	vmov	s15, r3
 8003c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8003e28 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003c30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c3e:	ed97 6a04 	vldr	s12, [r7, #16]
 8003c42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8003c5e:	e049      	b.n	8003cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6a:	eddf 6a70 	vldr	s13, [pc, #448]	; 8003e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8003c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	ee07 3a90 	vmov	s15, r3
 8003c78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c7c:	ed97 6a04 	vldr	s12, [r7, #16]
 8003c80:	eddf 5a68 	vldr	s11, [pc, #416]	; 8003e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003c84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c98:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8003c9c:	e02a      	b.n	8003cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c9e:	4b5f      	ldr	r3, [pc, #380]	; (8003e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	08db      	lsrs	r3, r3, #3
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	4a5d      	ldr	r2, [pc, #372]	; (8003e20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003caa:	fa22 f303 	lsr.w	r3, r2, r3
 8003cae:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	ee07 3a90 	vmov	s15, r3
 8003cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	ee07 3a90 	vmov	s15, r3
 8003cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cd2:	ed97 6a04 	vldr	s12, [r7, #16]
 8003cd6:	eddf 5a53 	vldr	s11, [pc, #332]	; 8003e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8003cf2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003cf4:	4b49      	ldr	r3, [pc, #292]	; (8003e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d00:	d121      	bne.n	8003d46 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003d02:	4b46      	ldr	r3, [pc, #280]	; (8003e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d017      	beq.n	8003d3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003d0e:	4b43      	ldr	r3, [pc, #268]	; (8003e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d12:	0a5b      	lsrs	r3, r3, #9
 8003d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d18:	ee07 3a90 	vmov	s15, r3
 8003d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8003d20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d24:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003d28:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d34:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	e006      	b.n	8003d4c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	e002      	b.n	8003d4c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003d4c:	4b33      	ldr	r3, [pc, #204]	; (8003e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d58:	d121      	bne.n	8003d9e <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003d5a:	4b30      	ldr	r3, [pc, #192]	; (8003e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d017      	beq.n	8003d96 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003d66:	4b2d      	ldr	r3, [pc, #180]	; (8003e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6a:	0c1b      	lsrs	r3, r3, #16
 8003d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d70:	ee07 3a90 	vmov	s15, r3
 8003d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003d78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d7c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003d80:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d8c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	605a      	str	r2, [r3, #4]
 8003d94:	e006      	b.n	8003da4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	605a      	str	r2, [r3, #4]
 8003d9c:	e002      	b.n	8003da4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003da4:	4b1d      	ldr	r3, [pc, #116]	; (8003e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003db0:	d121      	bne.n	8003df6 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003db2:	4b1a      	ldr	r3, [pc, #104]	; (8003e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d017      	beq.n	8003dee <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003dbe:	4b17      	ldr	r3, [pc, #92]	; (8003e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc2:	0e1b      	lsrs	r3, r3, #24
 8003dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dc8:	ee07 3a90 	vmov	s15, r3
 8003dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8003dd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dd4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003dd8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003de4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003dec:	e010      	b.n	8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	609a      	str	r2, [r3, #8]
}
 8003df4:	e00c      	b.n	8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	609a      	str	r2, [r3, #8]
}
 8003dfc:	e008      	b.n	8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	609a      	str	r2, [r3, #8]
}
 8003e10:	bf00      	nop
 8003e12:	372c      	adds	r7, #44	; 0x2c
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	44020c00 	.word	0x44020c00
 8003e20:	03d09000 	.word	0x03d09000
 8003e24:	46000000 	.word	0x46000000
 8003e28:	4a742400 	.word	0x4a742400
 8003e2c:	4af42400 	.word	0x4af42400

08003e30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b08b      	sub	sp, #44	; 0x2c
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003e38:	4bad      	ldr	r3, [pc, #692]	; (80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e40:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003e42:	4bab      	ldr	r3, [pc, #684]	; (80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8003e4c:	4ba8      	ldr	r3, [pc, #672]	; (80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	0a1b      	lsrs	r3, r3, #8
 8003e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e56:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8003e58:	4ba5      	ldr	r3, [pc, #660]	; (80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003e62:	4ba3      	ldr	r3, [pc, #652]	; (80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	08db      	lsrs	r3, r3, #3
 8003e68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	fb02 f303 	mul.w	r3, r2, r3
 8003e72:	ee07 3a90 	vmov	s15, r3
 8003e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 8126 	beq.w	80040d2 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	d053      	beq.n	8003f34 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	d86f      	bhi.n	8003f72 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d003      	beq.n	8003ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d02b      	beq.n	8003ef6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8003e9e:	e068      	b.n	8003f72 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003ea0:	4b93      	ldr	r3, [pc, #588]	; (80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	08db      	lsrs	r3, r3, #3
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	4a92      	ldr	r2, [pc, #584]	; (80040f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb0:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	ee07 3a90 	vmov	s15, r3
 8003eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	ee07 3a90 	vmov	s15, r3
 8003ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	ee07 3a90 	vmov	s15, r3
 8003ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ed4:	ed97 6a04 	vldr	s12, [r7, #16]
 8003ed8:	eddf 5a87 	vldr	s11, [pc, #540]	; 80040f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003edc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8003ef4:	e068      	b.n	8003fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	ee07 3a90 	vmov	s15, r3
 8003efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f00:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80040fc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003f04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f12:	ed97 6a04 	vldr	s12, [r7, #16]
 8003f16:	eddf 5a78 	vldr	s11, [pc, #480]	; 80040f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f2e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8003f32:	e049      	b.n	8003fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3e:	eddf 6a70 	vldr	s13, [pc, #448]	; 8004100 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8003f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	ee07 3a90 	vmov	s15, r3
 8003f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f50:	ed97 6a04 	vldr	s12, [r7, #16]
 8003f54:	eddf 5a68 	vldr	s11, [pc, #416]	; 80040f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003f58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8003f70:	e02a      	b.n	8003fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f72:	4b5f      	ldr	r3, [pc, #380]	; (80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	08db      	lsrs	r3, r3, #3
 8003f78:	f003 0303 	and.w	r3, r3, #3
 8003f7c:	4a5d      	ldr	r2, [pc, #372]	; (80040f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f82:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	ee07 3a90 	vmov	s15, r3
 8003f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	ee07 3a90 	vmov	s15, r3
 8003f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	ee07 3a90 	vmov	s15, r3
 8003fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fa6:	ed97 6a04 	vldr	s12, [r7, #16]
 8003faa:	eddf 5a53 	vldr	s11, [pc, #332]	; 80040f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8003fc6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003fc8:	4b49      	ldr	r3, [pc, #292]	; (80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fd4:	d121      	bne.n	800401a <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003fd6:	4b46      	ldr	r3, [pc, #280]	; (80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d017      	beq.n	8004012 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003fe2:	4b43      	ldr	r3, [pc, #268]	; (80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe6:	0a5b      	lsrs	r3, r3, #9
 8003fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fec:	ee07 3a90 	vmov	s15, r3
 8003ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8003ff4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ff8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003ffc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004008:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	e006      	b.n	8004020 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	e002      	b.n	8004020 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004020:	4b33      	ldr	r3, [pc, #204]	; (80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004028:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800402c:	d121      	bne.n	8004072 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800402e:	4b30      	ldr	r3, [pc, #192]	; (80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d017      	beq.n	800406a <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800403a:	4b2d      	ldr	r3, [pc, #180]	; (80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800403c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403e:	0c1b      	lsrs	r3, r3, #16
 8004040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004044:	ee07 3a90 	vmov	s15, r3
 8004048:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800404c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004050:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004054:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800405c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004060:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	605a      	str	r2, [r3, #4]
 8004068:	e006      	b.n	8004078 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	605a      	str	r2, [r3, #4]
 8004070:	e002      	b.n	8004078 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004078:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004080:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004084:	d121      	bne.n	80040ca <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004086:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d017      	beq.n	80040c2 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004092:	4b17      	ldr	r3, [pc, #92]	; (80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004096:	0e1b      	lsrs	r3, r3, #24
 8004098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800409c:	ee07 3a90 	vmov	s15, r3
 80040a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80040a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040a8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80040ac:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80040b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040b8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80040c0:	e010      	b.n	80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	609a      	str	r2, [r3, #8]
}
 80040c8:	e00c      	b.n	80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	609a      	str	r2, [r3, #8]
}
 80040d0:	e008      	b.n	80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	609a      	str	r2, [r3, #8]
}
 80040e4:	bf00      	nop
 80040e6:	372c      	adds	r7, #44	; 0x2c
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	44020c00 	.word	0x44020c00
 80040f4:	03d09000 	.word	0x03d09000
 80040f8:	46000000 	.word	0x46000000
 80040fc:	4a742400 	.word	0x4a742400
 8004100:	4af42400 	.word	0x4af42400

08004104 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08c      	sub	sp, #48	; 0x30
 8004108:	af00      	add	r7, sp, #0
 800410a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800410e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004112:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8004116:	430b      	orrs	r3, r1
 8004118:	d14b      	bne.n	80041b2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800411a:	4bc4      	ldr	r3, [pc, #784]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800411c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004124:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004126:	4bc1      	ldr	r3, [pc, #772]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b02      	cmp	r3, #2
 8004132:	d108      	bne.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413a:	d104      	bne.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800413c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004142:	f000 bf14 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004146:	4bb9      	ldr	r3, [pc, #740]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800414c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004150:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004154:	d108      	bne.n	8004168 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8004156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800415c:	d104      	bne.n	8004168 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800415e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004164:	f000 bf03 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8004168:	4bb0      	ldr	r3, [pc, #704]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004170:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004174:	d119      	bne.n	80041aa <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800417c:	d115      	bne.n	80041aa <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800417e:	4bab      	ldr	r3, [pc, #684]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8004186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800418a:	d30a      	bcc.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800418c:	4ba7      	ldr	r3, [pc, #668]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	0a1b      	lsrs	r3, r3, #8
 8004192:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004196:	4aa6      	ldr	r2, [pc, #664]	; (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8004198:	fbb2 f3f3 	udiv	r3, r2, r3
 800419c:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800419e:	f000 bee6 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80041a6:	f000 bee2 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ae:	f000 bede 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80041b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041b6:	f5a3 5180 	sub.w	r1, r3, #4096	; 0x1000
 80041ba:	ea52 0301 	orrs.w	r3, r2, r1
 80041be:	f000 838e 	beq.w	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 80041c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041c6:	2a01      	cmp	r2, #1
 80041c8:	f573 5380 	sbcs.w	r3, r3, #4096	; 0x1000
 80041cc:	f080 86cc 	bcs.w	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80041d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041d4:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 80041d8:	ea52 0301 	orrs.w	r3, r2, r1
 80041dc:	f000 82aa 	beq.w	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80041e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041e4:	2a01      	cmp	r2, #1
 80041e6:	f573 7300 	sbcs.w	r3, r3, #512	; 0x200
 80041ea:	f080 86bd 	bcs.w	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80041ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041f2:	f1a3 0110 	sub.w	r1, r3, #16
 80041f6:	ea52 0301 	orrs.w	r3, r2, r1
 80041fa:	f000 8681 	beq.w	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 80041fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004202:	2a01      	cmp	r2, #1
 8004204:	f173 0310 	sbcs.w	r3, r3, #16
 8004208:	f080 86ae 	bcs.w	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800420c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004210:	1f19      	subs	r1, r3, #4
 8004212:	ea52 0301 	orrs.w	r3, r2, r1
 8004216:	f000 84b1 	beq.w	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800421a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800421e:	2a01      	cmp	r2, #1
 8004220:	f173 0304 	sbcs.w	r3, r3, #4
 8004224:	f080 86a0 	bcs.w	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800422c:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 8004230:	430b      	orrs	r3, r1
 8004232:	f000 85aa 	beq.w	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 8004236:	e9d7 2300 	ldrd	r2, r3, [r7]
 800423a:	497e      	ldr	r1, [pc, #504]	; (8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 800423c:	428a      	cmp	r2, r1
 800423e:	f173 0300 	sbcs.w	r3, r3, #0
 8004242:	f080 8691 	bcs.w	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004246:	e9d7 2300 	ldrd	r2, r3, [r7]
 800424a:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800424e:	430b      	orrs	r3, r1
 8004250:	f000 8532 	beq.w	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8004254:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004258:	4977      	ldr	r1, [pc, #476]	; (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 800425a:	428a      	cmp	r2, r1
 800425c:	f173 0300 	sbcs.w	r3, r3, #0
 8004260:	f080 8682 	bcs.w	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004264:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004268:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800426c:	430b      	orrs	r3, r1
 800426e:	f000 84bc 	beq.w	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8004272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004276:	4971      	ldr	r1, [pc, #452]	; (800443c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8004278:	428a      	cmp	r2, r1
 800427a:	f173 0300 	sbcs.w	r3, r3, #0
 800427e:	f080 8673 	bcs.w	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004282:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004286:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800428a:	430b      	orrs	r3, r1
 800428c:	f000 85f2 	beq.w	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8004290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004294:	496a      	ldr	r1, [pc, #424]	; (8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8004296:	428a      	cmp	r2, r1
 8004298:	f173 0300 	sbcs.w	r3, r3, #0
 800429c:	f080 8664 	bcs.w	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80042a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042a4:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80042a8:	430b      	orrs	r3, r1
 80042aa:	f000 81e5 	beq.w	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80042ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042b2:	4964      	ldr	r1, [pc, #400]	; (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 80042b4:	428a      	cmp	r2, r1
 80042b6:	f173 0300 	sbcs.w	r3, r3, #0
 80042ba:	f080 8655 	bcs.w	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80042be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042c2:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80042c6:	430b      	orrs	r3, r1
 80042c8:	f000 83cc 	beq.w	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80042cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042d0:	495d      	ldr	r1, [pc, #372]	; (8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 80042d2:	428a      	cmp	r2, r1
 80042d4:	f173 0300 	sbcs.w	r3, r3, #0
 80042d8:	f080 8646 	bcs.w	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80042dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042e0:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 80042e4:	430b      	orrs	r3, r1
 80042e6:	f000 8331 	beq.w	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 80042ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042ee:	4957      	ldr	r1, [pc, #348]	; (800444c <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 80042f0:	428a      	cmp	r2, r1
 80042f2:	f173 0300 	sbcs.w	r3, r3, #0
 80042f6:	f080 8637 	bcs.w	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80042fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042fe:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8004302:	430b      	orrs	r3, r1
 8004304:	f000 82bb 	beq.w	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8004308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800430c:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8004310:	f173 0300 	sbcs.w	r3, r3, #0
 8004314:	f080 8628 	bcs.w	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800431c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8004320:	430b      	orrs	r3, r1
 8004322:	f000 826d 	beq.w	8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8004326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800432a:	f244 0101 	movw	r1, #16385	; 0x4001
 800432e:	428a      	cmp	r2, r1
 8004330:	f173 0300 	sbcs.w	r3, r3, #0
 8004334:	f080 8618 	bcs.w	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800433c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004340:	430b      	orrs	r3, r1
 8004342:	f000 821e 	beq.w	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8004346:	e9d7 2300 	ldrd	r2, r3, [r7]
 800434a:	f242 0101 	movw	r1, #8193	; 0x2001
 800434e:	428a      	cmp	r2, r1
 8004350:	f173 0300 	sbcs.w	r3, r3, #0
 8004354:	f080 8608 	bcs.w	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800435c:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004360:	430b      	orrs	r3, r1
 8004362:	f000 8137 	beq.w	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800436a:	f241 0101 	movw	r1, #4097	; 0x1001
 800436e:	428a      	cmp	r2, r1
 8004370:	f173 0300 	sbcs.w	r3, r3, #0
 8004374:	f080 85f8 	bcs.w	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800437c:	1f11      	subs	r1, r2, #4
 800437e:	430b      	orrs	r3, r1
 8004380:	f000 80d2 	beq.w	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8004384:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004388:	2a05      	cmp	r2, #5
 800438a:	f173 0300 	sbcs.w	r3, r3, #0
 800438e:	f080 85eb 	bcs.w	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004392:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004396:	1e51      	subs	r1, r2, #1
 8004398:	430b      	orrs	r3, r1
 800439a:	d006      	beq.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 800439c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043a0:	1e91      	subs	r1, r2, #2
 80043a2:	430b      	orrs	r3, r1
 80043a4:	d06c      	beq.n	8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80043a6:	f000 bddf 	b.w	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80043aa:	4b20      	ldr	r3, [pc, #128]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80043ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80043b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d104      	bne.n	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80043bc:	f7fe fd7e 	bl	8002ebc <HAL_RCC_GetPCLK2Freq>
 80043c0:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80043c2:	f000 bdd4 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80043c6:	4b19      	ldr	r3, [pc, #100]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043d2:	d10a      	bne.n	80043ea <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 80043d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d107      	bne.n	80043ea <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043da:	f107 030c 	add.w	r3, r7, #12
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff fd26 	bl	8003e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e8:	e048      	b.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80043ea:	4b10      	ldr	r3, [pc, #64]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d10c      	bne.n	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80043f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d109      	bne.n	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80043fc:	4b0b      	ldr	r3, [pc, #44]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	08db      	lsrs	r3, r3, #3
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	4a12      	ldr	r2, [pc, #72]	; (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004408:	fa22 f303 	lsr.w	r3, r2, r3
 800440c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800440e:	e035      	b.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8004410:	4b06      	ldr	r3, [pc, #24]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800441c:	d11c      	bne.n	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	2b04      	cmp	r3, #4
 8004422:	d119      	bne.n	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8004426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004428:	e028      	b.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800442a:	bf00      	nop
 800442c:	44020c00 	.word	0x44020c00
 8004430:	007a1200 	.word	0x007a1200
 8004434:	20000001 	.word	0x20000001
 8004438:	10000001 	.word	0x10000001
 800443c:	08000001 	.word	0x08000001
 8004440:	04000001 	.word	0x04000001
 8004444:	00200001 	.word	0x00200001
 8004448:	00040001 	.word	0x00040001
 800444c:	00020001 	.word	0x00020001
 8004450:	03d09000 	.word	0x03d09000
 8004454:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004458:	4b9f      	ldr	r3, [pc, #636]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800445a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b02      	cmp	r3, #2
 8004464:	d106      	bne.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8004466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004468:	2b05      	cmp	r3, #5
 800446a:	d103      	bne.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 800446c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004472:	e003      	b.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004478:	f000 bd79 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800447c:	f000 bd77 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004480:	4b95      	ldr	r3, [pc, #596]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004482:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004486:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800448a:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	2b00      	cmp	r3, #0
 8004490:	d104      	bne.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004492:	f7fe fcfd 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 8004496:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004498:	f000 bd69 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800449c:	4b8e      	ldr	r3, [pc, #568]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044a8:	d10a      	bne.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80044aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d107      	bne.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044b0:	f107 030c 	add.w	r3, r7, #12
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff fcbb 	bl	8003e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044be:	e031      	b.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80044c0:	4b85      	ldr	r3, [pc, #532]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d10c      	bne.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80044cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ce:	2b18      	cmp	r3, #24
 80044d0:	d109      	bne.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80044d2:	4b81      	ldr	r3, [pc, #516]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	08db      	lsrs	r3, r3, #3
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	4a7f      	ldr	r2, [pc, #508]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80044de:	fa22 f303 	lsr.w	r3, r2, r3
 80044e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044e4:	e01e      	b.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80044e6:	4b7c      	ldr	r3, [pc, #496]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f2:	d105      	bne.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 80044f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d102      	bne.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 80044fa:	4b79      	ldr	r3, [pc, #484]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80044fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044fe:	e011      	b.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004500:	4b75      	ldr	r3, [pc, #468]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b02      	cmp	r3, #2
 800450c:	d106      	bne.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800450e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004510:	2b28      	cmp	r3, #40	; 0x28
 8004512:	d103      	bne.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8004514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800451a:	e003      	b.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004520:	f000 bd25 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004524:	f000 bd23 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004528:	4b6b      	ldr	r3, [pc, #428]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800452a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800452e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004532:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	2b00      	cmp	r3, #0
 8004538:	d104      	bne.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800453a:	f7fe fca9 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 800453e:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8004540:	f000 bd15 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8004544:	4b64      	ldr	r3, [pc, #400]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800454c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004550:	d10a      	bne.n	8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8004552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004554:	2b40      	cmp	r3, #64	; 0x40
 8004556:	d107      	bne.n	8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004558:	f107 030c 	add.w	r3, r7, #12
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff fc67 	bl	8003e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004566:	e033      	b.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004568:	4b5b      	ldr	r3, [pc, #364]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b02      	cmp	r3, #2
 8004572:	d10c      	bne.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	2bc0      	cmp	r3, #192	; 0xc0
 8004578:	d109      	bne.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800457a:	4b57      	ldr	r3, [pc, #348]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	08db      	lsrs	r3, r3, #3
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	4a55      	ldr	r2, [pc, #340]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004586:	fa22 f303 	lsr.w	r3, r2, r3
 800458a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800458c:	e020      	b.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800458e:	4b52      	ldr	r3, [pc, #328]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800459a:	d106      	bne.n	80045aa <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 800459c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a2:	d102      	bne.n	80045aa <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 80045a4:	4b4e      	ldr	r3, [pc, #312]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80045a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045a8:	e012      	b.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80045aa:	4b4b      	ldr	r3, [pc, #300]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80045ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d107      	bne.n	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80045be:	d103      	bne.n	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 80045c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c6:	e003      	b.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045cc:	f000 bccf 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80045d0:	f000 bccd 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80045d4:	4b40      	ldr	r3, [pc, #256]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80045d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045da:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80045de:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80045e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d104      	bne.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80045e6:	f7fe fc7f 	bl	8002ee8 <HAL_RCC_GetPCLK3Freq>
 80045ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80045ec:	f000 bcbf 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045f6:	d108      	bne.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045f8:	f107 030c 	add.w	r3, r7, #12
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff fc17 	bl	8003e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004606:	f000 bcb2 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800460a:	4b33      	ldr	r3, [pc, #204]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b02      	cmp	r3, #2
 8004614:	d10d      	bne.n	8004632 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800461c:	d109      	bne.n	8004632 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800461e:	4b2e      	ldr	r3, [pc, #184]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	08db      	lsrs	r3, r3, #3
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	4a2c      	ldr	r2, [pc, #176]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800462a:	fa22 f303 	lsr.w	r3, r2, r3
 800462e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004630:	e020      	b.n	8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8004632:	4b29      	ldr	r3, [pc, #164]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800463a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800463e:	d106      	bne.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004646:	d102      	bne.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8004648:	4b25      	ldr	r3, [pc, #148]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800464c:	e012      	b.n	8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800464e:	4b22      	ldr	r3, [pc, #136]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004650:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b02      	cmp	r3, #2
 800465a:	d107      	bne.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004662:	d103      	bne.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8004664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800466a:	e003      	b.n	8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004670:	f000 bc7d 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004674:	f000 bc7b 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004678:	4b17      	ldr	r3, [pc, #92]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800467a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	2b00      	cmp	r3, #0
 8004688:	d104      	bne.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800468a:	f7fe fbe5 	bl	8002e58 <HAL_RCC_GetHCLKFreq>
 800468e:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004690:	f000 bc6d 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004696:	2b01      	cmp	r3, #1
 8004698:	d104      	bne.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 800469a:	f7fe fab1 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 800469e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80046a0:	f000 bc65 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d108      	bne.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046aa:	f107 030c 	add.w	r3, r7, #12
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff fbbe 	bl	8003e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046b8:	f000 bc59 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80046bc:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046c8:	d10e      	bne.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d10b      	bne.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 80046d0:	4b04      	ldr	r3, [pc, #16]	; (80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d4:	e02c      	b.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 80046d6:	bf00      	nop
 80046d8:	44020c00 	.word	0x44020c00
 80046dc:	03d09000 	.word	0x03d09000
 80046e0:	003d0900 	.word	0x003d0900
 80046e4:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80046e8:	4b95      	ldr	r3, [pc, #596]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d10c      	bne.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d109      	bne.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80046fa:	4b91      	ldr	r3, [pc, #580]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	08db      	lsrs	r3, r3, #3
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	4a8f      	ldr	r2, [pc, #572]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004706:	fa22 f303 	lsr.w	r3, r2, r3
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800470c:	e010      	b.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800470e:	4b8c      	ldr	r3, [pc, #560]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800471a:	d105      	bne.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	2b05      	cmp	r3, #5
 8004720:	d102      	bne.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8004722:	4b89      	ldr	r3, [pc, #548]	; (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004726:	e003      	b.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800472c:	f000 bc1f 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004730:	f000 bc1d 	b.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8004734:	4b82      	ldr	r3, [pc, #520]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004736:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8004740:	4b7f      	ldr	r3, [pc, #508]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004742:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b02      	cmp	r3, #2
 800474c:	d106      	bne.n	800475c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800474e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004750:	2b00      	cmp	r3, #0
 8004752:	d103      	bne.n	800475c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8004754:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800475a:	e011      	b.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800475c:	4b78      	ldr	r3, [pc, #480]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800475e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004762:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004766:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800476a:	d106      	bne.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 800476c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476e:	2b08      	cmp	r3, #8
 8004770:	d103      	bne.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8004772:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004778:	e002      	b.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        break;
 800477e:	e3f6      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004780:	e3f5      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004782:	4b6f      	ldr	r3, [pc, #444]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004784:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004788:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004790:	2b00      	cmp	r3, #0
 8004792:	d103      	bne.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004794:	f7fe fb7c 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 8004798:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800479a:	e3e8      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a2:	d107      	bne.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047a4:	f107 030c 	add.w	r3, r7, #12
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fb41 	bl	8003e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047b2:	e3dc      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80047b4:	4b62      	ldr	r3, [pc, #392]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d10d      	bne.n	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047c6:	d109      	bne.n	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80047c8:	4b5d      	ldr	r3, [pc, #372]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	08db      	lsrs	r3, r3, #3
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	4a5c      	ldr	r2, [pc, #368]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80047d4:	fa22 f303 	lsr.w	r3, r2, r3
 80047d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047da:	e010      	b.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80047dc:	4b58      	ldr	r3, [pc, #352]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e8:	d106      	bne.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80047ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80047f0:	d102      	bne.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 80047f2:	4b55      	ldr	r3, [pc, #340]	; (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80047f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047f6:	e002      	b.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047fc:	e3b7      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80047fe:	e3b6      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004800:	4b4f      	ldr	r3, [pc, #316]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004802:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004806:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800480a:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800480c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480e:	2b00      	cmp	r3, #0
 8004810:	d103      	bne.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004812:	f7fe fb3d 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 8004816:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004818:	e3a9      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 800481a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004820:	d107      	bne.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004822:	f107 030c 	add.w	r3, r7, #12
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff fb02 	bl	8003e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004830:	e39d      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004832:	4b43      	ldr	r3, [pc, #268]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b02      	cmp	r3, #2
 800483c:	d10d      	bne.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 800483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004840:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004844:	d109      	bne.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004846:	4b3e      	ldr	r3, [pc, #248]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	08db      	lsrs	r3, r3, #3
 800484c:	f003 0303 	and.w	r3, r3, #3
 8004850:	4a3c      	ldr	r2, [pc, #240]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004852:	fa22 f303 	lsr.w	r3, r2, r3
 8004856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004858:	e010      	b.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800485a:	4b39      	ldr	r3, [pc, #228]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004866:	d106      	bne.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800486e:	d102      	bne.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8004870:	4b35      	ldr	r3, [pc, #212]	; (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004874:	e002      	b.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800487a:	e378      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800487c:	e377      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800487e:	4b30      	ldr	r3, [pc, #192]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004880:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004884:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004888:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800488a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488c:	2b00      	cmp	r3, #0
 800488e:	d103      	bne.n	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004890:	f7fe fafe 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 8004894:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004896:	e36a      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800489e:	d107      	bne.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048a0:	f107 030c 	add.w	r3, r7, #12
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff fac3 	bl	8003e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048ae:	e35e      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80048b0:	4b23      	ldr	r3, [pc, #140]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d10d      	bne.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 80048bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048c2:	d109      	bne.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80048c4:	4b1e      	ldr	r3, [pc, #120]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	08db      	lsrs	r3, r3, #3
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	4a1d      	ldr	r2, [pc, #116]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80048d0:	fa22 f303 	lsr.w	r3, r2, r3
 80048d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048d6:	e34a      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048dc:	e347      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 80048de:	4b18      	ldr	r3, [pc, #96]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80048e4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d103      	bne.n	80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80048f0:	f7fe fafa 	bl	8002ee8 <HAL_RCC_GetPCLK3Freq>
 80048f4:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80048f6:	e33a      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048fe:	d107      	bne.n	8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004900:	f107 030c 	add.w	r3, r7, #12
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff fa93 	bl	8003e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800490e:	e32e      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b02      	cmp	r3, #2
 800491a:	d10d      	bne.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004922:	d109      	bne.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004924:	4b06      	ldr	r3, [pc, #24]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	08db      	lsrs	r3, r3, #3
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	4a05      	ldr	r2, [pc, #20]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004930:	fa22 f303 	lsr.w	r3, r2, r3
 8004934:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004936:	e31a      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800493c:	e317      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800493e:	bf00      	nop
 8004940:	44020c00 	.word	0x44020c00
 8004944:	03d09000 	.word	0x03d09000
 8004948:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800494c:	4b9b      	ldr	r3, [pc, #620]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800494e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004952:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800495e:	d044      	beq.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004966:	d879      	bhi.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800496e:	d02d      	beq.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004976:	d871      	bhi.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800497e:	d017      	beq.n	80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004986:	d869      	bhi.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498a:	2b00      	cmp	r3, #0
 800498c:	d004      	beq.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004994:	d004      	beq.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8004996:	e061      	b.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004998:	f7fe faa6 	bl	8002ee8 <HAL_RCC_GetPCLK3Freq>
 800499c:	62f8      	str	r0, [r7, #44]	; 0x2c
            break;
 800499e:	e060      	b.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049a0:	f107 030c 	add.w	r3, r7, #12
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff fa43 	bl	8003e30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80049ae:	e058      	b.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049b0:	4b82      	ldr	r3, [pc, #520]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80049b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d103      	bne.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 80049be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049c2:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80049c4:	e04d      	b.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80049ca:	e04a      	b.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80049cc:	4b7b      	ldr	r3, [pc, #492]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80049ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049da:	d103      	bne.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 80049dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80049e2:	e03e      	b.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 80049e4:	2300      	movs	r3, #0
 80049e6:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80049e8:	e03b      	b.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80049ea:	4b74      	ldr	r3, [pc, #464]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80049ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049f0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80049f6:	4b71      	ldr	r3, [pc, #452]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d10c      	bne.n	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d109      	bne.n	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a08:	4b6c      	ldr	r3, [pc, #432]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	08db      	lsrs	r3, r3, #3
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	4a6b      	ldr	r2, [pc, #428]	; (8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004a14:	fa22 f303 	lsr.w	r3, r2, r3
 8004a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a1a:	e01e      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a1c:	4b67      	ldr	r3, [pc, #412]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a28:	d106      	bne.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a30:	d102      	bne.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004a32:	4b64      	ldr	r3, [pc, #400]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a36:	e010      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a38:	4b60      	ldr	r3, [pc, #384]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a44:	d106      	bne.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a4c:	d102      	bne.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004a4e:	4b5e      	ldr	r3, [pc, #376]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a52:	e002      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 8004a58:	e003      	b.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8004a5a:	e002      	b.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004a60:	bf00      	nop
          }
        }
        break;
 8004a62:	e284      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004a64:	4b55      	ldr	r3, [pc, #340]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004a66:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004a6a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a72:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004a76:	d044      	beq.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004a7e:	d879      	bhi.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a86:	d02d      	beq.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a8e:	d871      	bhi.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a96:	d017      	beq.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a9e:	d869      	bhi.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d004      	beq.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aac:	d004      	beq.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004aae:	e061      	b.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8004ab0:	f7fe f9ee 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 8004ab4:	62f8      	str	r0, [r7, #44]	; 0x2c
            break;
 8004ab6:	e060      	b.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ab8:	f107 030c 	add.w	r3, r7, #12
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff f9b7 	bl	8003e30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004ac6:	e058      	b.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ac8:	4b3c      	ldr	r3, [pc, #240]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004aca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d103      	bne.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8004ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ada:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004adc:	e04d      	b.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004ae2:	e04a      	b.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004ae4:	4b35      	ldr	r3, [pc, #212]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ae6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004aea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004af2:	d103      	bne.n	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8004af4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004afa:	e03e      	b.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004b00:	e03b      	b.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004b02:	4b2e      	ldr	r3, [pc, #184]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b08:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b0e:	4b2b      	ldr	r3, [pc, #172]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d10c      	bne.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d109      	bne.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b20:	4b26      	ldr	r3, [pc, #152]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	08db      	lsrs	r3, r3, #3
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	4a25      	ldr	r2, [pc, #148]	; (8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b32:	e01e      	b.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b34:	4b21      	ldr	r3, [pc, #132]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b40:	d106      	bne.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b48:	d102      	bne.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004b4a:	4b1e      	ldr	r3, [pc, #120]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b4e:	e010      	b.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b50:	4b1a      	ldr	r3, [pc, #104]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b5c:	d106      	bne.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b64:	d102      	bne.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004b66:	4b18      	ldr	r3, [pc, #96]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b6a:	e002      	b.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 8004b70:	e003      	b.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8004b72:	e002      	b.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004b78:	bf00      	nop
          }
        }
        break;
 8004b7a:	e1f8      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004b7c:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b86:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8004b88:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b94:	d105      	bne.n	8004ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d102      	bne.n	8004ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8004ba0:	e1e5      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8004ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba8:	d110      	bne.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004baa:	f107 0318 	add.w	r3, r7, #24
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fe ffd4 	bl	8003b5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bb8:	e1d9      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004bba:	bf00      	nop
 8004bbc:	44020c00 	.word	0x44020c00
 8004bc0:	03d09000 	.word	0x03d09000
 8004bc4:	003d0900 	.word	0x003d0900
 8004bc8:	007a1200 	.word	0x007a1200
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8004bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd2:	d107      	bne.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bd4:	f107 030c 	add.w	r3, r7, #12
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff f929 	bl	8003e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004be2:	e1c4      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004be8:	e1c1      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004bea:	4b9d      	ldr	r3, [pc, #628]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d859      	bhi.n	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8004bfc:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c02:	bf00      	nop
 8004c04:	08004c19 	.word	0x08004c19
 8004c08:	08004c29 	.word	0x08004c29
 8004c0c:	08004cb1 	.word	0x08004cb1
 8004c10:	08004c39 	.word	0x08004c39
 8004c14:	08004c3f 	.word	0x08004c3f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c18:	f107 0318 	add.w	r3, r7, #24
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fe ff9d 	bl	8003b5c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004c26:	e046      	b.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c28:	f107 030c 	add.w	r3, r7, #12
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff f8ff 	bl	8003e30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004c36:	e03e      	b.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004c38:	4b8a      	ldr	r3, [pc, #552]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004c3c:	e03b      	b.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004c3e:	4b88      	ldr	r3, [pc, #544]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c44:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c4a:	4b85      	ldr	r3, [pc, #532]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d10c      	bne.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d109      	bne.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c5c:	4b80      	ldr	r3, [pc, #512]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	08db      	lsrs	r3, r3, #3
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	4a80      	ldr	r2, [pc, #512]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004c68:	fa22 f303 	lsr.w	r3, r2, r3
 8004c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c6e:	e01e      	b.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c70:	4b7b      	ldr	r3, [pc, #492]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c7c:	d106      	bne.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c84:	d102      	bne.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004c86:	4b79      	ldr	r3, [pc, #484]	; (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c8a:	e010      	b.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c8c:	4b74      	ldr	r3, [pc, #464]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c98:	d106      	bne.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ca0:	d102      	bne.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004ca2:	4b73      	ldr	r3, [pc, #460]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ca6:	e002      	b.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 8004cac:	e003      	b.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8004cae:	e002      	b.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004cb4:	bf00      	nop
          }
        }
        break;
 8004cb6:	e15a      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004cb8:	4b69      	ldr	r3, [pc, #420]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	d022      	beq.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d858      	bhi.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	2b18      	cmp	r3, #24
 8004cd4:	d019      	beq.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8004cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd8:	2b18      	cmp	r3, #24
 8004cda:	d852      	bhi.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8004ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d008      	beq.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8004ce8:	e04b      	b.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004cea:	f107 0318 	add.w	r3, r7, #24
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe ff34 	bl	8003b5c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004cf8:	e046      	b.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cfa:	f107 030c 	add.w	r3, r7, #12
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff f896 	bl	8003e30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004d08:	e03e      	b.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004d0a:	4b56      	ldr	r3, [pc, #344]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004d0e:	e03b      	b.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d10:	4b53      	ldr	r3, [pc, #332]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d16:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d1c:	4b50      	ldr	r3, [pc, #320]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d10c      	bne.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d109      	bne.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d2e:	4b4c      	ldr	r3, [pc, #304]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	08db      	lsrs	r3, r3, #3
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	4a4b      	ldr	r2, [pc, #300]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d40:	e01e      	b.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d42:	4b47      	ldr	r3, [pc, #284]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d4e:	d106      	bne.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d56:	d102      	bne.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004d58:	4b44      	ldr	r3, [pc, #272]	; (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d5c:	e010      	b.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d5e:	4b40      	ldr	r3, [pc, #256]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d6a:	d106      	bne.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d72:	d102      	bne.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004d74:	4b3e      	ldr	r3, [pc, #248]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d78:	e002      	b.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 8004d7e:	e003      	b.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8004d80:	e002      	b.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004d86:	bf00      	nop
          }
        }
        break;
 8004d88:	e0f1      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004d8a:	4b35      	ldr	r3, [pc, #212]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d90:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d9c:	d023      	beq.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8004d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004da4:	d858      	bhi.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	2bc0      	cmp	r3, #192	; 0xc0
 8004daa:	d019      	beq.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dae:	2bc0      	cmp	r3, #192	; 0xc0
 8004db0:	d852      	bhi.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	2b40      	cmp	r3, #64	; 0x40
 8004dbc:	d008      	beq.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8004dbe:	e04b      	b.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dc0:	f107 0318 	add.w	r3, r7, #24
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fe fec9 	bl	8003b5c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004dce:	e046      	b.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dd0:	f107 030c 	add.w	r3, r7, #12
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff f82b 	bl	8003e30 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004dde:	e03e      	b.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004de0:	4b20      	ldr	r3, [pc, #128]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004de2:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004de4:	e03b      	b.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004de6:	4b1e      	ldr	r3, [pc, #120]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004de8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dec:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004df2:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d10c      	bne.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d109      	bne.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e04:	4b16      	ldr	r3, [pc, #88]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	08db      	lsrs	r3, r3, #3
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	4a16      	ldr	r2, [pc, #88]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004e10:	fa22 f303 	lsr.w	r3, r2, r3
 8004e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e16:	e01e      	b.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e18:	4b11      	ldr	r3, [pc, #68]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e24:	d106      	bne.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2c:	d102      	bne.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004e2e:	4b0f      	ldr	r3, [pc, #60]	; (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e32:	e010      	b.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e34:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e40:	d106      	bne.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e48:	d102      	bne.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004e4a:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e4e:	e002      	b.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            break;
 8004e54:	e003      	b.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8004e56:	e002      	b.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004e5c:	bf00      	nop
          }
        }
        break;
 8004e5e:	e086      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004e60:	44020c00 	.word	0x44020c00
 8004e64:	00bb8000 	.word	0x00bb8000
 8004e68:	03d09000 	.word	0x03d09000
 8004e6c:	003d0900 	.word	0x003d0900
 8004e70:	007a1200 	.word	0x007a1200
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004e74:	4b40      	ldr	r3, [pc, #256]	; (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004e76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e7e:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8004e80:	4b3d      	ldr	r3, [pc, #244]	; (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e8c:	d105      	bne.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d102      	bne.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8004e94:	4b39      	ldr	r3, [pc, #228]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8004e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e98:	e031      	b.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8004e9a:	4b37      	ldr	r3, [pc, #220]	; (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ea6:	d10a      	bne.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8004ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eaa:	2b10      	cmp	r3, #16
 8004eac:	d107      	bne.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004eae:	f107 0318 	add.w	r3, r7, #24
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe fe52 	bl	8003b5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ebc:	e01f      	b.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8004ebe:	4b2e      	ldr	r3, [pc, #184]	; (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d106      	bne.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	d103      	bne.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8004ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ed8:	e011      	b.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8004eda:	4b27      	ldr	r3, [pc, #156]	; (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004edc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ee8:	d106      	bne.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	2b30      	cmp	r3, #48	; 0x30
 8004eee:	d103      	bne.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8004ef0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ef6:	e002      	b.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        break;
 8004efc:	e037      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004efe:	e036      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004f00:	4b1d      	ldr	r3, [pc, #116]	; (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004f02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004f06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f0a:	62bb      	str	r3, [r7, #40]	; 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	2b10      	cmp	r3, #16
 8004f10:	d107      	bne.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f12:	f107 0318 	add.w	r3, r7, #24
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fe fe20 	bl	8003b5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8004f20:	e025      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 8004f22:	4b15      	ldr	r3, [pc, #84]	; (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f2e:	d10a      	bne.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8004f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d107      	bne.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f36:	f107 030c 	add.w	r3, r7, #12
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fe ff78 	bl	8003e30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f44:	e00f      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8004f46:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f52:	d105      	bne.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f56:	2b30      	cmp	r3, #48	; 0x30
 8004f58:	d102      	bne.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 8004f5a:	4b08      	ldr	r3, [pc, #32]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f5e:	e002      	b.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        break;
 8004f64:	e003      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004f66:	e002      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f6c:	bf00      	nop
    }
  }

  return (frequency);
 8004f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3730      	adds	r7, #48	; 0x30
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	44020c00 	.word	0x44020c00
 8004f7c:	02dc6c00 	.word	0x02dc6c00

08004f80 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8004f88:	4b48      	ldr	r3, [pc, #288]	; (80050ac <RCCEx_PLL2_Config+0x12c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a47      	ldr	r2, [pc, #284]	; (80050ac <RCCEx_PLL2_Config+0x12c>)
 8004f8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f92:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f94:	f7fc fc54 	bl	8001840 <HAL_GetTick>
 8004f98:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f9a:	e008      	b.n	8004fae <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f9c:	f7fc fc50 	bl	8001840 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e07a      	b.n	80050a4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fae:	4b3f      	ldr	r3, [pc, #252]	; (80050ac <RCCEx_PLL2_Config+0x12c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1f0      	bne.n	8004f9c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004fba:	4b3c      	ldr	r3, [pc, #240]	; (80050ac <RCCEx_PLL2_Config+0x12c>)
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004fc2:	f023 0303 	bic.w	r3, r3, #3
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6811      	ldr	r1, [r2, #0]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6852      	ldr	r2, [r2, #4]
 8004fce:	0212      	lsls	r2, r2, #8
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	4936      	ldr	r1, [pc, #216]	; (80050ac <RCCEx_PLL2_Config+0x12c>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	025b      	lsls	r3, r3, #9
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	431a      	orrs	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	041b      	lsls	r3, r3, #16
 8004ff6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	3b01      	subs	r3, #1
 8005002:	061b      	lsls	r3, r3, #24
 8005004:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005008:	4928      	ldr	r1, [pc, #160]	; (80050ac <RCCEx_PLL2_Config+0x12c>)
 800500a:	4313      	orrs	r3, r2
 800500c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800500e:	4b27      	ldr	r3, [pc, #156]	; (80050ac <RCCEx_PLL2_Config+0x12c>)
 8005010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005012:	f023 020c 	bic.w	r2, r3, #12
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	4924      	ldr	r1, [pc, #144]	; (80050ac <RCCEx_PLL2_Config+0x12c>)
 800501c:	4313      	orrs	r3, r2
 800501e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005020:	4b22      	ldr	r3, [pc, #136]	; (80050ac <RCCEx_PLL2_Config+0x12c>)
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	f023 0220 	bic.w	r2, r3, #32
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	491f      	ldr	r1, [pc, #124]	; (80050ac <RCCEx_PLL2_Config+0x12c>)
 800502e:	4313      	orrs	r3, r2
 8005030:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005032:	4b1e      	ldr	r3, [pc, #120]	; (80050ac <RCCEx_PLL2_Config+0x12c>)
 8005034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	491c      	ldr	r1, [pc, #112]	; (80050ac <RCCEx_PLL2_Config+0x12c>)
 800503c:	4313      	orrs	r3, r2
 800503e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005040:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <RCCEx_PLL2_Config+0x12c>)
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	4a19      	ldr	r2, [pc, #100]	; (80050ac <RCCEx_PLL2_Config+0x12c>)
 8005046:	f023 0310 	bic.w	r3, r3, #16
 800504a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800504c:	4b17      	ldr	r3, [pc, #92]	; (80050ac <RCCEx_PLL2_Config+0x12c>)
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005054:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6a12      	ldr	r2, [r2, #32]
 800505c:	00d2      	lsls	r2, r2, #3
 800505e:	4913      	ldr	r1, [pc, #76]	; (80050ac <RCCEx_PLL2_Config+0x12c>)
 8005060:	4313      	orrs	r3, r2
 8005062:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005064:	4b11      	ldr	r3, [pc, #68]	; (80050ac <RCCEx_PLL2_Config+0x12c>)
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	4a10      	ldr	r2, [pc, #64]	; (80050ac <RCCEx_PLL2_Config+0x12c>)
 800506a:	f043 0310 	orr.w	r3, r3, #16
 800506e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005070:	4b0e      	ldr	r3, [pc, #56]	; (80050ac <RCCEx_PLL2_Config+0x12c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a0d      	ldr	r2, [pc, #52]	; (80050ac <RCCEx_PLL2_Config+0x12c>)
 8005076:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800507a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800507c:	f7fc fbe0 	bl	8001840 <HAL_GetTick>
 8005080:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005082:	e008      	b.n	8005096 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005084:	f7fc fbdc 	bl	8001840 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e006      	b.n	80050a4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005096:	4b05      	ldr	r3, [pc, #20]	; (80050ac <RCCEx_PLL2_Config+0x12c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0f0      	beq.n	8005084 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80050a2:	2300      	movs	r3, #0

}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	44020c00 	.word	0x44020c00

080050b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e0e7      	b.n	8005292 <HAL_SPI_Init+0x1e2>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d105      	bne.n	80050dc <HAL_SPI_Init+0x2c>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	2b0f      	cmp	r3, #15
 80050d6:	d901      	bls.n	80050dc <HAL_SPI_Init+0x2c>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e0da      	b.n	8005292 <HAL_SPI_Init+0x1e2>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fbc1 	bl	8005864 <SPI_GetPacketSize>
 80050e2:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d102      	bne.n	80050f2 <HAL_SPI_Init+0x42>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d811      	bhi.n	8005116 <HAL_SPI_Init+0x66>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80050f6:	4a69      	ldr	r2, [pc, #420]	; (800529c <HAL_SPI_Init+0x1ec>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d009      	beq.n	8005110 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a67      	ldr	r2, [pc, #412]	; (80052a0 <HAL_SPI_Init+0x1f0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d004      	beq.n	8005110 <HAL_SPI_Init+0x60>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a66      	ldr	r2, [pc, #408]	; (80052a4 <HAL_SPI_Init+0x1f4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d104      	bne.n	800511a <HAL_SPI_Init+0x6a>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2b10      	cmp	r3, #16
 8005114:	d901      	bls.n	800511a <HAL_SPI_Init+0x6a>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e0bb      	b.n	8005292 <HAL_SPI_Init+0x1e2>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <HAL_SPI_Init+0x84>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fb ffc4 	bl	80010bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0201 	bic.w	r2, r2, #1
 800514a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005156:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005160:	d119      	bne.n	8005196 <HAL_SPI_Init+0xe6>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800516a:	d103      	bne.n	8005174 <HAL_SPI_Init+0xc4>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005170:	2b00      	cmp	r3, #0
 8005172:	d008      	beq.n	8005186 <HAL_SPI_Init+0xd6>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10c      	bne.n	8005196 <HAL_SPI_Init+0xe6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005180:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005184:	d107      	bne.n	8005196 <HAL_SPI_Init+0xe6>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005194:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00f      	beq.n	80051c2 <HAL_SPI_Init+0x112>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	2b06      	cmp	r3, #6
 80051a8:	d90b      	bls.n	80051c2 <HAL_SPI_Init+0x112>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	e007      	b.n	80051d2 <HAL_SPI_Init+0x122>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69da      	ldr	r2, [r3, #28]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051da:	431a      	orrs	r2, r3
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e4:	ea42 0103 	orr.w	r1, r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	431a      	orrs	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	431a      	orrs	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	431a      	orrs	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523e:	ea42 0103 	orr.w	r1, r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0201 	bic.w	r2, r2, #1
 800525c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <HAL_SPI_Init+0x1d0>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40013000 	.word	0x40013000
 80052a0:	40003800 	.word	0x40003800
 80052a4:	40003c00 	.word	0x40003c00

080052a8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08a      	sub	sp, #40	; 0x28
 80052ac:	af02      	add	r7, sp, #8
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	603b      	str	r3, [r7, #0]
 80052b4:	4613      	mov	r3, r2
 80052b6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3320      	adds	r3, #32
 80052be:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_SPI_Transmit+0x2a>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e1f5      	b.n	80056be <HAL_SPI_Transmit+0x416>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052da:	f7fc fab1 	bl	8001840 <HAL_GetTick>
 80052de:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d007      	beq.n	80052fc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80052ec:	2302      	movs	r3, #2
 80052ee:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80052f8:	7efb      	ldrb	r3, [r7, #27]
 80052fa:	e1e0      	b.n	80056be <HAL_SPI_Transmit+0x416>
  }

  if ((pData == NULL) || (Size == 0UL))
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <HAL_SPI_Transmit+0x60>
 8005302:	88fb      	ldrh	r3, [r7, #6]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d107      	bne.n	8005318 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8005314:	7efb      	ldrb	r3, [r7, #27]
 8005316:	e1d2      	b.n	80056be <HAL_SPI_Transmit+0x416>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2203      	movs	r2, #3
 800531c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	88fa      	ldrh	r2, [r7, #6]
 8005332:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	88fa      	ldrh	r2, [r7, #6]
 800533a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005368:	d108      	bne.n	800537c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	e009      	b.n	8005390 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800538e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	0c1b      	lsrs	r3, r3, #16
 8005398:	041b      	lsls	r3, r3, #16
 800539a:	88f9      	ldrh	r1, [r7, #6]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	6812      	ldr	r2, [r2, #0]
 80053a0:	430b      	orrs	r3, r1
 80053a2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0201 	orr.w	r2, r2, #1
 80053b2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053bc:	d107      	bne.n	80053ce <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	2b0f      	cmp	r3, #15
 80053d4:	d956      	bls.n	8005484 <HAL_SPI_Transmit+0x1dc>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a8d      	ldr	r2, [pc, #564]	; (8005610 <HAL_SPI_Transmit+0x368>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d04a      	beq.n	8005476 <HAL_SPI_Transmit+0x1ce>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a8b      	ldr	r2, [pc, #556]	; (8005614 <HAL_SPI_Transmit+0x36c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d045      	beq.n	8005476 <HAL_SPI_Transmit+0x1ce>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a8a      	ldr	r2, [pc, #552]	; (8005618 <HAL_SPI_Transmit+0x370>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d147      	bne.n	8005484 <HAL_SPI_Transmit+0x1dc>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80053f4:	e03f      	b.n	8005476 <HAL_SPI_Transmit+0x1ce>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b02      	cmp	r3, #2
 8005402:	d114      	bne.n	800542e <HAL_SPI_Transmit+0x186>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6812      	ldr	r2, [r2, #0]
 800540e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005414:	1d1a      	adds	r2, r3, #4
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005420:	b29b      	uxth	r3, r3
 8005422:	3b01      	subs	r3, #1
 8005424:	b29a      	uxth	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800542c:	e023      	b.n	8005476 <HAL_SPI_Transmit+0x1ce>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800542e:	f7fc fa07 	bl	8001840 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d803      	bhi.n	8005446 <HAL_SPI_Transmit+0x19e>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005444:	d102      	bne.n	800544c <HAL_SPI_Transmit+0x1a4>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d114      	bne.n	8005476 <HAL_SPI_Transmit+0x1ce>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f93b 	bl	80056c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005460:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e123      	b.n	80056be <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800547c:	b29b      	uxth	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1b9      	bne.n	80053f6 <HAL_SPI_Transmit+0x14e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005482:	e0f6      	b.n	8005672 <HAL_SPI_Transmit+0x3ca>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	2b07      	cmp	r3, #7
 800548a:	f240 80eb 	bls.w	8005664 <HAL_SPI_Transmit+0x3bc>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800548e:	e05d      	b.n	800554c <HAL_SPI_Transmit+0x2a4>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b02      	cmp	r3, #2
 800549c:	d132      	bne.n	8005504 <HAL_SPI_Transmit+0x25c>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d918      	bls.n	80054dc <HAL_SPI_Transmit+0x234>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d014      	beq.n	80054dc <HAL_SPI_Transmit+0x234>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6812      	ldr	r2, [r2, #0]
 80054bc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054c2:	1d1a      	adds	r2, r3, #4
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3b02      	subs	r3, #2
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80054da:	e037      	b.n	800554c <HAL_SPI_Transmit+0x2a4>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054e0:	881a      	ldrh	r2, [r3, #0]
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ea:	1c9a      	adds	r2, r3, #2
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005502:	e023      	b.n	800554c <HAL_SPI_Transmit+0x2a4>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005504:	f7fc f99c 	bl	8001840 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	429a      	cmp	r2, r3
 8005512:	d803      	bhi.n	800551c <HAL_SPI_Transmit+0x274>
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551a:	d102      	bne.n	8005522 <HAL_SPI_Transmit+0x27a>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d114      	bne.n	800554c <HAL_SPI_Transmit+0x2a4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 f8d0 	bl	80056c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005536:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e0b8      	b.n	80056be <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005552:	b29b      	uxth	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d19b      	bne.n	8005490 <HAL_SPI_Transmit+0x1e8>
 8005558:	e08b      	b.n	8005672 <HAL_SPI_Transmit+0x3ca>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b02      	cmp	r3, #2
 8005566:	d159      	bne.n	800561c <HAL_SPI_Transmit+0x374>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800556e:	b29b      	uxth	r3, r3
 8005570:	2b03      	cmp	r3, #3
 8005572:	d918      	bls.n	80055a6 <HAL_SPI_Transmit+0x2fe>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005578:	2b40      	cmp	r3, #64	; 0x40
 800557a:	d914      	bls.n	80055a6 <HAL_SPI_Transmit+0x2fe>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6812      	ldr	r2, [r2, #0]
 8005586:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800558c:	1d1a      	adds	r2, r3, #4
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005598:	b29b      	uxth	r3, r3
 800559a:	3b04      	subs	r3, #4
 800559c:	b29a      	uxth	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80055a4:	e05e      	b.n	8005664 <HAL_SPI_Transmit+0x3bc>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d917      	bls.n	80055e2 <HAL_SPI_Transmit+0x33a>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d013      	beq.n	80055e2 <HAL_SPI_Transmit+0x33a>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055be:	881a      	ldrh	r2, [r3, #0]
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055c8:	1c9a      	adds	r2, r3, #2
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b02      	subs	r3, #2
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80055e0:	e040      	b.n	8005664 <HAL_SPI_Transmit+0x3bc>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3320      	adds	r3, #32
 80055ec:	7812      	ldrb	r2, [r2, #0]
 80055ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005600:	b29b      	uxth	r3, r3
 8005602:	3b01      	subs	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800560c:	e02a      	b.n	8005664 <HAL_SPI_Transmit+0x3bc>
 800560e:	bf00      	nop
 8005610:	40013000 	.word	0x40013000
 8005614:	40003800 	.word	0x40003800
 8005618:	40003c00 	.word	0x40003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800561c:	f7fc f910 	bl	8001840 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	429a      	cmp	r2, r3
 800562a:	d803      	bhi.n	8005634 <HAL_SPI_Transmit+0x38c>
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005632:	d102      	bne.n	800563a <HAL_SPI_Transmit+0x392>
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d114      	bne.n	8005664 <HAL_SPI_Transmit+0x3bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 f844 	bl	80056c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800564e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e02c      	b.n	80056be <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800566a:	b29b      	uxth	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	f47f af74 	bne.w	800555a <HAL_SPI_Transmit+0x2b2>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2200      	movs	r2, #0
 800567a:	2108      	movs	r1, #8
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 f8c3 	bl	8005808 <SPI_WaitOnFlagUntilTimeout>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d007      	beq.n	8005698 <HAL_SPI_Transmit+0x3f0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800568e:	f043 0220 	orr.w	r2, r3, #32
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 f815 	bl	80056c8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <HAL_SPI_Transmit+0x414>
  {
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e000      	b.n	80056be <HAL_SPI_Transmit+0x416>
  }
  return errorcode;
 80056bc:	7efb      	ldrb	r3, [r7, #27]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop

080056c8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0208 	orr.w	r2, r2, #8
 80056e6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0210 	orr.w	r2, r2, #16
 80056f6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0201 	bic.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8005716:	f023 0303 	bic.w	r3, r3, #3
 800571a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800572a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b04      	cmp	r3, #4
 8005736:	d014      	beq.n	8005762 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00f      	beq.n	8005762 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005748:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	699a      	ldr	r2, [r3, #24]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0220 	orr.w	r2, r2, #32
 8005760:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b03      	cmp	r3, #3
 800576c:	d014      	beq.n	8005798 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00f      	beq.n	8005798 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800577e:	f043 0204 	orr.w	r2, r3, #4
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699a      	ldr	r2, [r3, #24]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005796:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00f      	beq.n	80057c2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057a8:	f043 0201 	orr.w	r2, r3, #1
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699a      	ldr	r2, [r3, #24]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00f      	beq.n	80057ec <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057d2:	f043 0208 	orr.w	r2, r3, #8
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057ea:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 80057fc:	bf00      	nop
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	603b      	str	r3, [r7, #0]
 8005814:	4613      	mov	r3, r2
 8005816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005818:	e010      	b.n	800583c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800581a:	f7fc f811 	bl	8001840 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	429a      	cmp	r2, r3
 8005828:	d803      	bhi.n	8005832 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005830:	d102      	bne.n	8005838 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e00f      	b.n	800585c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695a      	ldr	r2, [r3, #20]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	4013      	ands	r3, r2
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	429a      	cmp	r2, r3
 800584a:	bf0c      	ite	eq
 800584c:	2301      	moveq	r3, #1
 800584e:	2300      	movne	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	461a      	mov	r2, r3
 8005854:	79fb      	ldrb	r3, [r7, #7]
 8005856:	429a      	cmp	r2, r3
 8005858:	d0df      	beq.n	800581a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005870:	095b      	lsrs	r3, r3, #5
 8005872:	3301      	adds	r3, #1
 8005874:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	3301      	adds	r3, #1
 800587c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	3307      	adds	r3, #7
 8005882:	08db      	lsrs	r3, r3, #3
 8005884:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	fb02 f303 	mul.w	r3, r2, r3
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b082      	sub	sp, #8
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e042      	b.n	8005932 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fb fe44 	bl	800154c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2224      	movs	r2, #36	; 0x24
 80058c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0201 	bic.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 fd93 	bl	8006410 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fc12 	bl	8006114 <UART_SetConfig>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d101      	bne.n	80058fa <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e01b      	b.n	8005932 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005908:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005918:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f042 0201 	orr.w	r2, r2, #1
 8005928:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fe12 	bl	8006554 <UART_CheckIdleState>
 8005930:	4603      	mov	r3, r0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b08a      	sub	sp, #40	; 0x28
 800593e:	af02      	add	r7, sp, #8
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	603b      	str	r3, [r7, #0]
 8005946:	4613      	mov	r3, r2
 8005948:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005950:	2b20      	cmp	r3, #32
 8005952:	f040 808b 	bne.w	8005a6c <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <HAL_UART_Transmit+0x28>
 800595c:	88fb      	ldrh	r3, [r7, #6]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e083      	b.n	8005a6e <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005970:	2b80      	cmp	r3, #128	; 0x80
 8005972:	d107      	bne.n	8005984 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689a      	ldr	r2, [r3, #8]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005982:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2221      	movs	r2, #33	; 0x21
 8005990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005994:	f7fb ff54 	bl	8001840 <HAL_GetTick>
 8005998:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	88fa      	ldrh	r2, [r7, #6]
 800599e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	88fa      	ldrh	r2, [r7, #6]
 80059a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b2:	d108      	bne.n	80059c6 <HAL_UART_Transmit+0x8c>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d104      	bne.n	80059c6 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80059bc:	2300      	movs	r3, #0
 80059be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	61bb      	str	r3, [r7, #24]
 80059c4:	e003      	b.n	80059ce <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059ce:	e030      	b.n	8005a32 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2200      	movs	r2, #0
 80059d8:	2180      	movs	r1, #128	; 0x80
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 fe64 	bl	80066a8 <UART_WaitOnFlagUntilTimeout>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d005      	beq.n	80059f2 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2220      	movs	r2, #32
 80059ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e03d      	b.n	8005a6e <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10b      	bne.n	8005a10 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	3302      	adds	r3, #2
 8005a0c:	61bb      	str	r3, [r7, #24]
 8005a0e:	e007      	b.n	8005a20 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	781a      	ldrb	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1c8      	bne.n	80059d0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2200      	movs	r2, #0
 8005a46:	2140      	movs	r1, #64	; 0x40
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 fe2d 	bl	80066a8 <UART_WaitOnFlagUntilTimeout>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d005      	beq.n	8005a60 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e006      	b.n	8005a6e <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e000      	b.n	8005a6e <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8005a6c:	2302      	movs	r3, #2
  }
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3720      	adds	r7, #32
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08a      	sub	sp, #40	; 0x28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	4613      	mov	r3, r2
 8005a84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	d146      	bne.n	8005b1e <HAL_UART_Receive_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <HAL_UART_Receive_IT+0x24>
 8005a96:	88fb      	ldrh	r3, [r7, #6]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e03f      	b.n	8005b20 <HAL_UART_Receive_IT+0xa8>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d107      	bne.n	8005ac4 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689a      	ldr	r2, [r3, #8]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ac2:	609a      	str	r2, [r3, #8]
    }

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a17      	ldr	r2, [pc, #92]	; (8005b28 <HAL_UART_Receive_IT+0xb0>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d01f      	beq.n	8005b0e <HAL_UART_Receive_IT+0x96>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d018      	beq.n	8005b0e <HAL_UART_Receive_IT+0x96>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	461a      	mov	r2, r3
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	623b      	str	r3, [r7, #32]
 8005afc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afe:	69f9      	ldr	r1, [r7, #28]
 8005b00:	6a3a      	ldr	r2, [r7, #32]
 8005b02:	e841 2300 	strex	r3, r2, [r1]
 8005b06:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1e6      	bne.n	8005adc <HAL_UART_Receive_IT+0x64>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b0e:	88fb      	ldrh	r3, [r7, #6]
 8005b10:	461a      	mov	r2, r3
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 fe2f 	bl	8006778 <UART_Start_Receive_IT>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	e000      	b.n	8005b20 <HAL_UART_Receive_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005b1e:	2302      	movs	r3, #2
  }
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3728      	adds	r7, #40	; 0x28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	44002400 	.word	0x44002400

08005b2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b0ae      	sub	sp, #184	; 0xb8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b56:	f640 030f 	movw	r3, #2063	; 0x80f
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 8005b60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d11b      	bne.n	8005ba0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d015      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b78:	f003 0320 	and.w	r3, r3, #32
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d105      	bne.n	8005b8c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d009      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 8293 	beq.w	80060bc <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	4798      	blx	r3
      }
      return;
 8005b9e:	e28d      	b.n	80060bc <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ba0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 80fd 	beq.w	8005da4 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005baa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005bae:	4b7a      	ldr	r3, [pc, #488]	; (8005d98 <HAL_UART_IRQHandler+0x26c>)
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005bb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005bba:	4b78      	ldr	r3, [pc, #480]	; (8005d9c <HAL_UART_IRQHandler+0x270>)
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 80f0 	beq.w	8005da4 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d011      	beq.n	8005bf4 <HAL_UART_IRQHandler+0xc8>
 8005bd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00b      	beq.n	8005bf4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2201      	movs	r2, #1
 8005be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bea:	f043 0201 	orr.w	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bf4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d011      	beq.n	8005c24 <HAL_UART_IRQHandler+0xf8>
 8005c00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00b      	beq.n	8005c24 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2202      	movs	r2, #2
 8005c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1a:	f043 0204 	orr.w	r2, r3, #4
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d011      	beq.n	8005c54 <HAL_UART_IRQHandler+0x128>
 8005c30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00b      	beq.n	8005c54 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2204      	movs	r2, #4
 8005c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4a:	f043 0202 	orr.w	r2, r3, #2
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d017      	beq.n	8005c90 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c64:	f003 0320 	and.w	r3, r3, #32
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d105      	bne.n	8005c78 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005c6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c70:	4b49      	ldr	r3, [pc, #292]	; (8005d98 <HAL_UART_IRQHandler+0x26c>)
 8005c72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00b      	beq.n	8005c90 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2208      	movs	r2, #8
 8005c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c86:	f043 0208 	orr.w	r2, r3, #8
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d012      	beq.n	8005cc2 <HAL_UART_IRQHandler+0x196>
 8005c9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ca0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00c      	beq.n	8005cc2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb8:	f043 0220 	orr.w	r2, r3, #32
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 81f9 	beq.w	80060c0 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005cce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d013      	beq.n	8005d02 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d105      	bne.n	8005cf2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d007      	beq.n	8005d02 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d16:	2b40      	cmp	r3, #64	; 0x40
 8005d18:	d005      	beq.n	8005d26 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d02e      	beq.n	8005d84 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fe48 	bl	80069bc <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d36:	2b40      	cmp	r3, #64	; 0x40
 8005d38:	d120      	bne.n	8005d7c <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d017      	beq.n	8005d74 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d4a:	4a15      	ldr	r2, [pc, #84]	; (8005da0 <HAL_UART_IRQHandler+0x274>)
 8005d4c:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fb ff2e 	bl	8001bb6 <HAL_DMA_Abort_IT>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d019      	beq.n	8005d94 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005d6e:	4610      	mov	r0, r2
 8005d70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d72:	e00f      	b.n	8005d94 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f9b7 	bl	80060e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d7a:	e00b      	b.n	8005d94 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f9b3 	bl	80060e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d82:	e007      	b.n	8005d94 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f9af 	bl	80060e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005d92:	e195      	b.n	80060c0 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d94:	bf00      	nop
    return;
 8005d96:	e193      	b.n	80060c0 <HAL_UART_IRQHandler+0x594>
 8005d98:	10000001 	.word	0x10000001
 8005d9c:	04000120 	.word	0x04000120
 8005da0:	08006a89 	.word	0x08006a89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	f040 8129 	bne.w	8006000 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005dae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005db2:	f003 0310 	and.w	r3, r3, #16
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 8122 	beq.w	8006000 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005dbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 811b 	beq.w	8006000 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2210      	movs	r2, #16
 8005dd0:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ddc:	2b40      	cmp	r3, #64	; 0x40
 8005dde:	f040 8091 	bne.w	8005f04 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dec:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 8005df0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 8165 	beq.w	80060c4 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e00:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005e04:	429a      	cmp	r2, r3
 8005e06:	f080 815d 	bcs.w	80060c4 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005e10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e1c:	2b81      	cmp	r3, #129	; 0x81
 8005e1e:	d060      	beq.n	8005ee2 <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e46:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e4e:	e841 2300 	strex	r3, r2, [r1]
 8005e52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1e2      	bne.n	8005e20 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3308      	adds	r3, #8
 8005e60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e64:	e853 3f00 	ldrex	r3, [r3]
 8005e68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e6c:	f023 0301 	bic.w	r3, r3, #1
 8005e70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3308      	adds	r3, #8
 8005e7a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005e7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e86:	e841 2300 	strex	r3, r2, [r1]
 8005e8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1e3      	bne.n	8005e5a <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea8:	e853 3f00 	ldrex	r3, [r3]
 8005eac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eb0:	f023 0310 	bic.w	r3, r3, #16
 8005eb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ec2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ec4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ec8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eca:	e841 2300 	strex	r3, r2, [r1]
 8005ece:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1e4      	bne.n	8005ea0 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fb fdee 	bl	8001abe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	4619      	mov	r1, r3
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f8fd 	bl	80060fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f02:	e0df      	b.n	80060c4 <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 80d1 	beq.w	80060c8 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8005f26:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 80cc 	beq.w	80060c8 <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f52:	647b      	str	r3, [r7, #68]	; 0x44
 8005f54:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f5a:	e841 2300 	strex	r3, r2, [r1]
 8005f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1e4      	bne.n	8005f30 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3308      	adds	r3, #8
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	e853 3f00 	ldrex	r3, [r3]
 8005f74:	623b      	str	r3, [r7, #32]
   return(result);
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f7c:	f023 0301 	bic.w	r3, r3, #1
 8005f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3308      	adds	r3, #8
 8005f8a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005f8e:	633a      	str	r2, [r7, #48]	; 0x30
 8005f90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1e1      	bne.n	8005f66 <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0310 	bic.w	r3, r3, #16
 8005fca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005fd8:	61fb      	str	r3, [r7, #28]
 8005fda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	69b9      	ldr	r1, [r7, #24]
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	e841 2300 	strex	r3, r2, [r1]
 8005fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e4      	bne.n	8005fb6 <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ff2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f87f 	bl	80060fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ffe:	e063      	b.n	80060c8 <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006000:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00e      	beq.n	800602a <HAL_UART_IRQHandler+0x4fe>
 800600c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d008      	beq.n	800602a <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006020:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f001 fa8e 	bl	8007544 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006028:	e051      	b.n	80060ce <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800602a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800602e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006032:	2b00      	cmp	r3, #0
 8006034:	d014      	beq.n	8006060 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006036:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800603a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603e:	2b00      	cmp	r3, #0
 8006040:	d105      	bne.n	800604e <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006046:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d008      	beq.n	8006060 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006052:	2b00      	cmp	r3, #0
 8006054:	d03a      	beq.n	80060cc <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	4798      	blx	r3
    }
    return;
 800605e:	e035      	b.n	80060cc <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006060:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006068:	2b00      	cmp	r3, #0
 800606a:	d009      	beq.n	8006080 <HAL_UART_IRQHandler+0x554>
 800606c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fd1b 	bl	8006ab4 <UART_EndTransmit_IT>
    return;
 800607e:	e026      	b.n	80060ce <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006080:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006084:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d009      	beq.n	80060a0 <HAL_UART_IRQHandler+0x574>
 800608c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006090:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d003      	beq.n	80060a0 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f001 fa67 	bl	800756c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800609e:	e016      	b.n	80060ce <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80060a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80060a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d010      	beq.n	80060ce <HAL_UART_IRQHandler+0x5a2>
 80060ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	da0c      	bge.n	80060ce <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f001 fa4f 	bl	8007558 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060ba:	e008      	b.n	80060ce <HAL_UART_IRQHandler+0x5a2>
      return;
 80060bc:	bf00      	nop
 80060be:	e006      	b.n	80060ce <HAL_UART_IRQHandler+0x5a2>
    return;
 80060c0:	bf00      	nop
 80060c2:	e004      	b.n	80060ce <HAL_UART_IRQHandler+0x5a2>
      return;
 80060c4:	bf00      	nop
 80060c6:	e002      	b.n	80060ce <HAL_UART_IRQHandler+0x5a2>
      return;
 80060c8:	bf00      	nop
 80060ca:	e000      	b.n	80060ce <HAL_UART_IRQHandler+0x5a2>
    return;
 80060cc:	bf00      	nop
  }
}
 80060ce:	37b8      	adds	r7, #184	; 0xb8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006118:	b094      	sub	sp, #80	; 0x50
 800611a:	af00      	add	r7, sp, #0
 800611c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	431a      	orrs	r2, r3
 800612e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	431a      	orrs	r2, r3
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	4313      	orrs	r3, r2
 800613a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	498a      	ldr	r1, [pc, #552]	; (800636c <UART_SetConfig+0x258>)
 8006144:	4019      	ands	r1, r3
 8006146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800614c:	430b      	orrs	r3, r1
 800614e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800615a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615c:	68d9      	ldr	r1, [r3, #12]
 800615e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	ea40 0301 	orr.w	r3, r0, r1
 8006166:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	4b7f      	ldr	r3, [pc, #508]	; (8006370 <UART_SetConfig+0x25c>)
 8006174:	429a      	cmp	r2, r3
 8006176:	d004      	beq.n	8006182 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617a:	6a1a      	ldr	r2, [r3, #32]
 800617c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800617e:	4313      	orrs	r3, r2
 8006180:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800618c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8006190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006196:	430b      	orrs	r3, r1
 8006198:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800619a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	f023 000f 	bic.w	r0, r3, #15
 80061a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80061a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	ea40 0301 	orr.w	r3, r0, r1
 80061b0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	4b6f      	ldr	r3, [pc, #444]	; (8006374 <UART_SetConfig+0x260>)
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d102      	bne.n	80061c2 <UART_SetConfig+0xae>
 80061bc:	2301      	movs	r3, #1
 80061be:	64bb      	str	r3, [r7, #72]	; 0x48
 80061c0:	e01a      	b.n	80061f8 <UART_SetConfig+0xe4>
 80061c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	4b6c      	ldr	r3, [pc, #432]	; (8006378 <UART_SetConfig+0x264>)
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d102      	bne.n	80061d2 <UART_SetConfig+0xbe>
 80061cc:	2302      	movs	r3, #2
 80061ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80061d0:	e012      	b.n	80061f8 <UART_SetConfig+0xe4>
 80061d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	4b69      	ldr	r3, [pc, #420]	; (800637c <UART_SetConfig+0x268>)
 80061d8:	429a      	cmp	r2, r3
 80061da:	d102      	bne.n	80061e2 <UART_SetConfig+0xce>
 80061dc:	2304      	movs	r3, #4
 80061de:	64bb      	str	r3, [r7, #72]	; 0x48
 80061e0:	e00a      	b.n	80061f8 <UART_SetConfig+0xe4>
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	4b62      	ldr	r3, [pc, #392]	; (8006370 <UART_SetConfig+0x25c>)
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d103      	bne.n	80061f4 <UART_SetConfig+0xe0>
 80061ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80061f2:	e001      	b.n	80061f8 <UART_SetConfig+0xe4>
 80061f4:	2300      	movs	r3, #0
 80061f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	4b5c      	ldr	r3, [pc, #368]	; (8006370 <UART_SetConfig+0x25c>)
 80061fe:	429a      	cmp	r2, r3
 8006200:	d171      	bne.n	80062e6 <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006204:	2200      	movs	r2, #0
 8006206:	623b      	str	r3, [r7, #32]
 8006208:	627a      	str	r2, [r7, #36]	; 0x24
 800620a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800620e:	f7fd ff79 	bl	8004104 <HAL_RCCEx_GetPeriphCLKFreq>
 8006212:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 80e2 	beq.w	80063e0 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	4a57      	ldr	r2, [pc, #348]	; (8006380 <UART_SetConfig+0x26c>)
 8006222:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006226:	461a      	mov	r2, r3
 8006228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800622a:	fbb3 f3f2 	udiv	r3, r3, r2
 800622e:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	4613      	mov	r3, r2
 8006236:	005b      	lsls	r3, r3, #1
 8006238:	4413      	add	r3, r2
 800623a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800623c:	429a      	cmp	r2, r3
 800623e:	d305      	bcc.n	800624c <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006248:	429a      	cmp	r2, r3
 800624a:	d903      	bls.n	8006254 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006252:	e0c5      	b.n	80063e0 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006256:	2200      	movs	r2, #0
 8006258:	61bb      	str	r3, [r7, #24]
 800625a:	61fa      	str	r2, [r7, #28]
 800625c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	4a47      	ldr	r2, [pc, #284]	; (8006380 <UART_SetConfig+0x26c>)
 8006262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006266:	b29b      	uxth	r3, r3
 8006268:	2200      	movs	r2, #0
 800626a:	613b      	str	r3, [r7, #16]
 800626c:	617a      	str	r2, [r7, #20]
 800626e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006272:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006276:	f7fa f80f 	bl	8000298 <__aeabi_uldivmod>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	4610      	mov	r0, r2
 8006280:	4619      	mov	r1, r3
 8006282:	f04f 0200 	mov.w	r2, #0
 8006286:	f04f 0300 	mov.w	r3, #0
 800628a:	020b      	lsls	r3, r1, #8
 800628c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006290:	0202      	lsls	r2, r0, #8
 8006292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006294:	6849      	ldr	r1, [r1, #4]
 8006296:	0849      	lsrs	r1, r1, #1
 8006298:	2000      	movs	r0, #0
 800629a:	460c      	mov	r4, r1
 800629c:	4605      	mov	r5, r0
 800629e:	eb12 0804 	adds.w	r8, r2, r4
 80062a2:	eb43 0905 	adc.w	r9, r3, r5
 80062a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	60bb      	str	r3, [r7, #8]
 80062ae:	60fa      	str	r2, [r7, #12]
 80062b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062b4:	4640      	mov	r0, r8
 80062b6:	4649      	mov	r1, r9
 80062b8:	f7f9 ffee 	bl	8000298 <__aeabi_uldivmod>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	4613      	mov	r3, r2
 80062c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ca:	d308      	bcc.n	80062de <UART_SetConfig+0x1ca>
 80062cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062d2:	d204      	bcs.n	80062de <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 80062d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062da:	60da      	str	r2, [r3, #12]
 80062dc:	e080      	b.n	80063e0 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80062e4:	e07c      	b.n	80063e0 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ee:	d149      	bne.n	8006384 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80062f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062f2:	2200      	movs	r2, #0
 80062f4:	603b      	str	r3, [r7, #0]
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062fc:	f7fd ff02 	bl	8004104 <HAL_RCCEx_GetPeriphCLKFreq>
 8006300:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	d06b      	beq.n	80063e0 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	4a1c      	ldr	r2, [pc, #112]	; (8006380 <UART_SetConfig+0x26c>)
 800630e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006312:	461a      	mov	r2, r3
 8006314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006316:	fbb3 f3f2 	udiv	r3, r3, r2
 800631a:	005a      	lsls	r2, r3, #1
 800631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	085b      	lsrs	r3, r3, #1
 8006322:	441a      	add	r2, r3
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	fbb2 f3f3 	udiv	r3, r2, r3
 800632c:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800632e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006330:	2b0f      	cmp	r3, #15
 8006332:	d916      	bls.n	8006362 <UART_SetConfig+0x24e>
 8006334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800633a:	d212      	bcs.n	8006362 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800633c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633e:	b29b      	uxth	r3, r3
 8006340:	f023 030f 	bic.w	r3, r3, #15
 8006344:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006348:	085b      	lsrs	r3, r3, #1
 800634a:	b29b      	uxth	r3, r3
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	b29a      	uxth	r2, r3
 8006352:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006354:	4313      	orrs	r3, r2
 8006356:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8006358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800635e:	60da      	str	r2, [r3, #12]
 8006360:	e03e      	b.n	80063e0 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006368:	e03a      	b.n	80063e0 <UART_SetConfig+0x2cc>
 800636a:	bf00      	nop
 800636c:	cfff69f3 	.word	0xcfff69f3
 8006370:	44002400 	.word	0x44002400
 8006374:	40013800 	.word	0x40013800
 8006378:	40004400 	.word	0x40004400
 800637c:	40004800 	.word	0x40004800
 8006380:	0800cdc0 	.word	0x0800cdc0
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006386:	2200      	movs	r2, #0
 8006388:	469a      	mov	sl, r3
 800638a:	4693      	mov	fp, r2
 800638c:	4650      	mov	r0, sl
 800638e:	4659      	mov	r1, fp
 8006390:	f7fd feb8 	bl	8004104 <HAL_RCCEx_GetPeriphCLKFreq>
 8006394:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8006396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006398:	2b00      	cmp	r3, #0
 800639a:	d021      	beq.n	80063e0 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	4a1a      	ldr	r2, [pc, #104]	; (800640c <UART_SetConfig+0x2f8>)
 80063a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063a6:	461a      	mov	r2, r3
 80063a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80063ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	085b      	lsrs	r3, r3, #1
 80063b4:	441a      	add	r2, r3
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80063be:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c2:	2b0f      	cmp	r3, #15
 80063c4:	d909      	bls.n	80063da <UART_SetConfig+0x2c6>
 80063c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063cc:	d205      	bcs.n	80063da <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60da      	str	r2, [r3, #12]
 80063d8:	e002      	b.n	80063e0 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e2:	2201      	movs	r2, #1
 80063e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80063e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ea:	2201      	movs	r2, #1
 80063ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f2:	2200      	movs	r2, #0
 80063f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80063f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f8:	2200      	movs	r2, #0
 80063fa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80063fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006400:	4618      	mov	r0, r3
 8006402:	3750      	adds	r7, #80	; 0x50
 8006404:	46bd      	mov	sp, r7
 8006406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800640a:	bf00      	nop
 800640c:	0800cdc0 	.word	0x0800cdc0

08006410 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641c:	f003 0308 	and.w	r3, r3, #8
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00a      	beq.n	800643a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a4:	f003 0310 	and.w	r3, r3, #16
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00a      	beq.n	80064c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d01a      	beq.n	8006526 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800650e:	d10a      	bne.n	8006526 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	605a      	str	r2, [r3, #4]
  }
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b098      	sub	sp, #96	; 0x60
 8006558:	af02      	add	r7, sp, #8
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006564:	f7fb f96c 	bl	8001840 <HAL_GetTick>
 8006568:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b08      	cmp	r3, #8
 8006576:	d12f      	bne.n	80065d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006578:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006580:	2200      	movs	r2, #0
 8006582:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f88e 	bl	80066a8 <UART_WaitOnFlagUntilTimeout>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d022      	beq.n	80065d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659a:	e853 3f00 	ldrex	r3, [r3]
 800659e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065a6:	653b      	str	r3, [r7, #80]	; 0x50
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	461a      	mov	r2, r3
 80065ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065b0:	647b      	str	r3, [r7, #68]	; 0x44
 80065b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065b8:	e841 2300 	strex	r3, r2, [r1]
 80065bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1e6      	bne.n	8006592 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e063      	b.n	80066a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0304 	and.w	r3, r3, #4
 80065e2:	2b04      	cmp	r3, #4
 80065e4:	d149      	bne.n	800667a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ee:	2200      	movs	r2, #0
 80065f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f857 	bl	80066a8 <UART_WaitOnFlagUntilTimeout>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d03c      	beq.n	800667a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	e853 3f00 	ldrex	r3, [r3]
 800660c:	623b      	str	r3, [r7, #32]
   return(result);
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006614:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	461a      	mov	r2, r3
 800661c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800661e:	633b      	str	r3, [r7, #48]	; 0x30
 8006620:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006626:	e841 2300 	strex	r3, r2, [r1]
 800662a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1e6      	bne.n	8006600 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	3308      	adds	r3, #8
 8006638:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	e853 3f00 	ldrex	r3, [r3]
 8006640:	60fb      	str	r3, [r7, #12]
   return(result);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f023 0301 	bic.w	r3, r3, #1
 8006648:	64bb      	str	r3, [r7, #72]	; 0x48
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3308      	adds	r3, #8
 8006650:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006652:	61fa      	str	r2, [r7, #28]
 8006654:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006656:	69b9      	ldr	r1, [r7, #24]
 8006658:	69fa      	ldr	r2, [r7, #28]
 800665a:	e841 2300 	strex	r3, r2, [r1]
 800665e:	617b      	str	r3, [r7, #20]
   return(result);
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1e5      	bne.n	8006632 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2220      	movs	r2, #32
 800666a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e012      	b.n	80066a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2220      	movs	r2, #32
 8006686:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3758      	adds	r7, #88	; 0x58
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	603b      	str	r3, [r7, #0]
 80066b4:	4613      	mov	r3, r2
 80066b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066b8:	e049      	b.n	800674e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c0:	d045      	beq.n	800674e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066c2:	f7fb f8bd 	bl	8001840 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d302      	bcc.n	80066d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e048      	b.n	800676e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0304 	and.w	r3, r3, #4
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d031      	beq.n	800674e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d110      	bne.n	800671a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2208      	movs	r2, #8
 80066fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 f95b 	bl	80069bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2208      	movs	r2, #8
 800670a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e029      	b.n	800676e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006728:	d111      	bne.n	800674e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006732:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f941 	bl	80069bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2220      	movs	r2, #32
 800673e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e00f      	b.n	800676e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69da      	ldr	r2, [r3, #28]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4013      	ands	r3, r2
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	429a      	cmp	r2, r3
 800675c:	bf0c      	ite	eq
 800675e:	2301      	moveq	r3, #1
 8006760:	2300      	movne	r3, #0
 8006762:	b2db      	uxtb	r3, r3
 8006764:	461a      	mov	r2, r3
 8006766:	79fb      	ldrb	r3, [r7, #7]
 8006768:	429a      	cmp	r2, r3
 800676a:	d0a6      	beq.n	80066ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006778:	b480      	push	{r7}
 800677a:	b0a3      	sub	sp, #140	; 0x8c
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	4613      	mov	r3, r2
 8006784:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	88fa      	ldrh	r2, [r7, #6]
 8006790:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	88fa      	ldrh	r2, [r7, #6]
 8006798:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067aa:	d10e      	bne.n	80067ca <UART_Start_Receive_IT+0x52>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d105      	bne.n	80067c0 <UART_Start_Receive_IT+0x48>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80067ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067be:	e02d      	b.n	800681c <UART_Start_Receive_IT+0xa4>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	22ff      	movs	r2, #255	; 0xff
 80067c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067c8:	e028      	b.n	800681c <UART_Start_Receive_IT+0xa4>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10d      	bne.n	80067ee <UART_Start_Receive_IT+0x76>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d104      	bne.n	80067e4 <UART_Start_Receive_IT+0x6c>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	22ff      	movs	r2, #255	; 0xff
 80067de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067e2:	e01b      	b.n	800681c <UART_Start_Receive_IT+0xa4>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	227f      	movs	r2, #127	; 0x7f
 80067e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067ec:	e016      	b.n	800681c <UART_Start_Receive_IT+0xa4>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067f6:	d10d      	bne.n	8006814 <UART_Start_Receive_IT+0x9c>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <UART_Start_Receive_IT+0x92>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	227f      	movs	r2, #127	; 0x7f
 8006804:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006808:	e008      	b.n	800681c <UART_Start_Receive_IT+0xa4>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	223f      	movs	r2, #63	; 0x3f
 800680e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006812:	e003      	b.n	800681c <UART_Start_Receive_IT+0xa4>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2222      	movs	r2, #34	; 0x22
 8006828:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3308      	adds	r3, #8
 8006832:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006836:	e853 3f00 	ldrex	r3, [r3]
 800683a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800683c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800683e:	f043 0301 	orr.w	r3, r3, #1
 8006842:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3308      	adds	r3, #8
 800684c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006850:	673a      	str	r2, [r7, #112]	; 0x70
 8006852:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006856:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800685e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e3      	bne.n	800682c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800686c:	d14f      	bne.n	800690e <UART_Start_Receive_IT+0x196>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006874:	88fa      	ldrh	r2, [r7, #6]
 8006876:	429a      	cmp	r2, r3
 8006878:	d349      	bcc.n	800690e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006882:	d107      	bne.n	8006894 <UART_Start_Receive_IT+0x11c>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d103      	bne.n	8006894 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4a47      	ldr	r2, [pc, #284]	; (80069ac <UART_Start_Receive_IT+0x234>)
 8006890:	675a      	str	r2, [r3, #116]	; 0x74
 8006892:	e002      	b.n	800689a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4a46      	ldr	r2, [pc, #280]	; (80069b0 <UART_Start_Receive_IT+0x238>)
 8006898:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d01a      	beq.n	80068d8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068c6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80068cc:	e841 2300 	strex	r3, r2, [r1]
 80068d0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80068d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1e4      	bne.n	80068a2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3308      	adds	r3, #8
 80068de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e2:	e853 3f00 	ldrex	r3, [r3]
 80068e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3308      	adds	r3, #8
 80068f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80068f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80068fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006900:	e841 2300 	strex	r3, r2, [r1]
 8006904:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e5      	bne.n	80068d8 <UART_Start_Receive_IT+0x160>
 800690c:	e046      	b.n	800699c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006916:	d107      	bne.n	8006928 <UART_Start_Receive_IT+0x1b0>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d103      	bne.n	8006928 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4a24      	ldr	r2, [pc, #144]	; (80069b4 <UART_Start_Receive_IT+0x23c>)
 8006924:	675a      	str	r2, [r3, #116]	; 0x74
 8006926:	e002      	b.n	800692e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4a23      	ldr	r2, [pc, #140]	; (80069b8 <UART_Start_Receive_IT+0x240>)
 800692c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d019      	beq.n	800696a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	e853 3f00 	ldrex	r3, [r3]
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800694a:	677b      	str	r3, [r7, #116]	; 0x74
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	461a      	mov	r2, r3
 8006952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006954:	637b      	str	r3, [r7, #52]	; 0x34
 8006956:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006958:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800695a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800695c:	e841 2300 	strex	r3, r2, [r1]
 8006960:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1e6      	bne.n	8006936 <UART_Start_Receive_IT+0x1be>
 8006968:	e018      	b.n	800699c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	613b      	str	r3, [r7, #16]
   return(result);
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	f043 0320 	orr.w	r3, r3, #32
 800697e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006988:	623b      	str	r3, [r7, #32]
 800698a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	69f9      	ldr	r1, [r7, #28]
 800698e:	6a3a      	ldr	r2, [r7, #32]
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	61bb      	str	r3, [r7, #24]
   return(result);
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e6      	bne.n	800696a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	378c      	adds	r7, #140	; 0x8c
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	080071dd 	.word	0x080071dd
 80069b0:	08006e7d 	.word	0x08006e7d
 80069b4:	08006cc5 	.word	0x08006cc5
 80069b8:	08006b0d 	.word	0x08006b0d

080069bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069bc:	b480      	push	{r7}
 80069be:	b095      	sub	sp, #84	; 0x54
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069cc:	e853 3f00 	ldrex	r3, [r3]
 80069d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e2:	643b      	str	r3, [r7, #64]	; 0x40
 80069e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069ea:	e841 2300 	strex	r3, r2, [r1]
 80069ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1e6      	bne.n	80069c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3308      	adds	r3, #8
 80069fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a0c:	f023 0301 	bic.w	r3, r3, #1
 8006a10:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3308      	adds	r3, #8
 8006a18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1e3      	bne.n	80069f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d118      	bne.n	8006a68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	e853 3f00 	ldrex	r3, [r3]
 8006a42:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f023 0310 	bic.w	r3, r3, #16
 8006a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	461a      	mov	r2, r3
 8006a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a54:	61bb      	str	r3, [r7, #24]
 8006a56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a58:	6979      	ldr	r1, [r7, #20]
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	e841 2300 	strex	r3, r2, [r1]
 8006a60:	613b      	str	r3, [r7, #16]
   return(result);
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e6      	bne.n	8006a36 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006a7c:	bf00      	nop
 8006a7e:	3754      	adds	r7, #84	; 0x54
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f7ff fb1e 	bl	80060e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006aac:	bf00      	nop
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b088      	sub	sp, #32
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ad0:	61fb      	str	r3, [r7, #28]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	61bb      	str	r3, [r7, #24]
 8006adc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6979      	ldr	r1, [r7, #20]
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e6      	bne.n	8006abc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7ff fae9 	bl	80060d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b02:	bf00      	nop
 8006b04:	3720      	adds	r7, #32
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b09c      	sub	sp, #112	; 0x70
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b1a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b24:	2b22      	cmp	r3, #34	; 0x22
 8006b26:	f040 80be 	bne.w	8006ca6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b34:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006b38:	b2d9      	uxtb	r1, r3
 8006b3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b44:	400a      	ands	r2, r1
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f040 80a1 	bne.w	8006cb6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b88:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b92:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b9a:	e841 2300 	strex	r3, r2, [r1]
 8006b9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1e6      	bne.n	8006b74 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3308      	adds	r3, #8
 8006bac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb0:	e853 3f00 	ldrex	r3, [r3]
 8006bb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb8:	f023 0301 	bic.w	r3, r3, #1
 8006bbc:	667b      	str	r3, [r7, #100]	; 0x64
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006bc6:	647a      	str	r2, [r7, #68]	; 0x44
 8006bc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1e5      	bne.n	8006ba6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a33      	ldr	r2, [pc, #204]	; (8006cc0 <UART_RxISR_8BIT+0x1b4>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d01f      	beq.n	8006c38 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d018      	beq.n	8006c38 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	623b      	str	r3, [r7, #32]
   return(result);
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c1a:	663b      	str	r3, [r7, #96]	; 0x60
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	461a      	mov	r2, r3
 8006c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c24:	633b      	str	r3, [r7, #48]	; 0x30
 8006c26:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c2c:	e841 2300 	strex	r3, r2, [r1]
 8006c30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e6      	bne.n	8006c06 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d12e      	bne.n	8006c9e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	e853 3f00 	ldrex	r3, [r3]
 8006c52:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f023 0310 	bic.w	r3, r3, #16
 8006c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	461a      	mov	r2, r3
 8006c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c64:	61fb      	str	r3, [r7, #28]
 8006c66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c68:	69b9      	ldr	r1, [r7, #24]
 8006c6a:	69fa      	ldr	r2, [r7, #28]
 8006c6c:	e841 2300 	strex	r3, r2, [r1]
 8006c70:	617b      	str	r3, [r7, #20]
   return(result);
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e6      	bne.n	8006c46 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	f003 0310 	and.w	r3, r3, #16
 8006c82:	2b10      	cmp	r3, #16
 8006c84:	d103      	bne.n	8006c8e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2210      	movs	r2, #16
 8006c8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c94:	4619      	mov	r1, r3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7ff fa30 	bl	80060fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c9c:	e00b      	b.n	8006cb6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7fa fcda 	bl	8001658 <HAL_UART_RxCpltCallback>
}
 8006ca4:	e007      	b.n	8006cb6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	699a      	ldr	r2, [r3, #24]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f042 0208 	orr.w	r2, r2, #8
 8006cb4:	619a      	str	r2, [r3, #24]
}
 8006cb6:	bf00      	nop
 8006cb8:	3770      	adds	r7, #112	; 0x70
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	44002400 	.word	0x44002400

08006cc4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b09c      	sub	sp, #112	; 0x70
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006cd2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cdc:	2b22      	cmp	r3, #34	; 0x22
 8006cde:	f040 80be 	bne.w	8006e5e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006cf2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006cf6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d06:	1c9a      	adds	r2, r3, #2
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	3b01      	subs	r3, #1
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f040 80a1 	bne.w	8006e6e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d34:	e853 3f00 	ldrex	r3, [r3]
 8006d38:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d40:	667b      	str	r3, [r7, #100]	; 0x64
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	461a      	mov	r2, r3
 8006d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d4a:	657b      	str	r3, [r7, #84]	; 0x54
 8006d4c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d52:	e841 2300 	strex	r3, r2, [r1]
 8006d56:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1e6      	bne.n	8006d2c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3308      	adds	r3, #8
 8006d64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d68:	e853 3f00 	ldrex	r3, [r3]
 8006d6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	f023 0301 	bic.w	r3, r3, #1
 8006d74:	663b      	str	r3, [r7, #96]	; 0x60
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3308      	adds	r3, #8
 8006d7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d7e:	643a      	str	r2, [r7, #64]	; 0x40
 8006d80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d86:	e841 2300 	strex	r3, r2, [r1]
 8006d8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1e5      	bne.n	8006d5e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2220      	movs	r2, #32
 8006d96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a33      	ldr	r2, [pc, #204]	; (8006e78 <UART_RxISR_16BIT+0x1b4>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d01f      	beq.n	8006df0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d018      	beq.n	8006df0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dde:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e6      	bne.n	8006dbe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d12e      	bne.n	8006e56 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	e853 3f00 	ldrex	r3, [r3]
 8006e0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f023 0310 	bic.w	r3, r3, #16
 8006e12:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e1c:	61bb      	str	r3, [r7, #24]
 8006e1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e20:	6979      	ldr	r1, [r7, #20]
 8006e22:	69ba      	ldr	r2, [r7, #24]
 8006e24:	e841 2300 	strex	r3, r2, [r1]
 8006e28:	613b      	str	r3, [r7, #16]
   return(result);
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1e6      	bne.n	8006dfe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	f003 0310 	and.w	r3, r3, #16
 8006e3a:	2b10      	cmp	r3, #16
 8006e3c:	d103      	bne.n	8006e46 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2210      	movs	r2, #16
 8006e44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7ff f954 	bl	80060fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e54:	e00b      	b.n	8006e6e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7fa fbfe 	bl	8001658 <HAL_UART_RxCpltCallback>
}
 8006e5c:	e007      	b.n	8006e6e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	699a      	ldr	r2, [r3, #24]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f042 0208 	orr.w	r2, r2, #8
 8006e6c:	619a      	str	r2, [r3, #24]
}
 8006e6e:	bf00      	nop
 8006e70:	3770      	adds	r7, #112	; 0x70
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	44002400 	.word	0x44002400

08006e7c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b0ac      	sub	sp, #176	; 0xb0
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e8a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eb2:	2b22      	cmp	r3, #34	; 0x22
 8006eb4:	f040 8182 	bne.w	80071bc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ebe:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ec2:	e125      	b.n	8007110 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ece:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006ed2:	b2d9      	uxtb	r1, r3
 8006ed4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ede:	400a      	ands	r2, r1
 8006ee0:	b2d2      	uxtb	r2, r2
 8006ee2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f0e:	f003 0307 	and.w	r3, r3, #7
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d053      	beq.n	8006fbe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d011      	beq.n	8006f46 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006f22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00b      	beq.n	8006f46 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2201      	movs	r2, #1
 8006f34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f3c:	f043 0201 	orr.w	r2, r3, #1
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d011      	beq.n	8006f76 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006f52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00b      	beq.n	8006f76 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2202      	movs	r2, #2
 8006f64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f6c:	f043 0204 	orr.w	r2, r3, #4
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f7a:	f003 0304 	and.w	r3, r3, #4
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d011      	beq.n	8006fa6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00b      	beq.n	8006fa6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2204      	movs	r2, #4
 8006f94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f9c:	f043 0202 	orr.w	r2, r3, #2
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d006      	beq.n	8006fbe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7ff f899 	bl	80060e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f040 80a2 	bne.w	8007110 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8006fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fe0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ff0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006ff4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1e4      	bne.n	8006fcc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3308      	adds	r3, #8
 8007008:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007012:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007018:	f023 0301 	bic.w	r3, r3, #1
 800701c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3308      	adds	r3, #8
 8007026:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800702a:	66ba      	str	r2, [r7, #104]	; 0x68
 800702c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007030:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007032:	e841 2300 	strex	r3, r2, [r1]
 8007036:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007038:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e1      	bne.n	8007002 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2220      	movs	r2, #32
 8007042:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a5f      	ldr	r2, [pc, #380]	; (80071d4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d021      	beq.n	80070a0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d01a      	beq.n	80070a0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007072:	e853 3f00 	ldrex	r3, [r3]
 8007076:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800707a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800707e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800708c:	657b      	str	r3, [r7, #84]	; 0x54
 800708e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007092:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007094:	e841 2300 	strex	r3, r2, [r1]
 8007098:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800709a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e4      	bne.n	800706a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d130      	bne.n	800710a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b6:	e853 3f00 	ldrex	r3, [r3]
 80070ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070be:	f023 0310 	bic.w	r3, r3, #16
 80070c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070d0:	643b      	str	r3, [r7, #64]	; 0x40
 80070d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070d8:	e841 2300 	strex	r3, r2, [r1]
 80070dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e4      	bne.n	80070ae <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	f003 0310 	and.w	r3, r3, #16
 80070ee:	2b10      	cmp	r3, #16
 80070f0:	d103      	bne.n	80070fa <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2210      	movs	r2, #16
 80070f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7fe fffa 	bl	80060fc <HAL_UARTEx_RxEventCallback>
 8007108:	e002      	b.n	8007110 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7fa faa4 	bl	8001658 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007110:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007114:	2b00      	cmp	r3, #0
 8007116:	d006      	beq.n	8007126 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007118:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800711c:	f003 0320 	and.w	r3, r3, #32
 8007120:	2b00      	cmp	r3, #0
 8007122:	f47f aecf 	bne.w	8006ec4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800712c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007130:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007134:	2b00      	cmp	r3, #0
 8007136:	d049      	beq.n	80071cc <UART_RxISR_8BIT_FIFOEN+0x350>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800713e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007142:	429a      	cmp	r2, r3
 8007144:	d242      	bcs.n	80071cc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3308      	adds	r3, #8
 800714c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	e853 3f00 	ldrex	r3, [r3]
 8007154:	61fb      	str	r3, [r7, #28]
   return(result);
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800715c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3308      	adds	r3, #8
 8007166:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800716a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800716c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007172:	e841 2300 	strex	r3, r2, [r1]
 8007176:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1e3      	bne.n	8007146 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a15      	ldr	r2, [pc, #84]	; (80071d8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007182:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	e853 3f00 	ldrex	r3, [r3]
 8007190:	60bb      	str	r3, [r7, #8]
   return(result);
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	f043 0320 	orr.w	r3, r3, #32
 8007198:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	461a      	mov	r2, r3
 80071a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80071a6:	61bb      	str	r3, [r7, #24]
 80071a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071aa:	6979      	ldr	r1, [r7, #20]
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	e841 2300 	strex	r3, r2, [r1]
 80071b2:	613b      	str	r3, [r7, #16]
   return(result);
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1e4      	bne.n	8007184 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071ba:	e007      	b.n	80071cc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699a      	ldr	r2, [r3, #24]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f042 0208 	orr.w	r2, r2, #8
 80071ca:	619a      	str	r2, [r3, #24]
}
 80071cc:	bf00      	nop
 80071ce:	37b0      	adds	r7, #176	; 0xb0
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	44002400 	.word	0x44002400
 80071d8:	08006b0d 	.word	0x08006b0d

080071dc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b0ae      	sub	sp, #184	; 0xb8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80071ea:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007212:	2b22      	cmp	r3, #34	; 0x22
 8007214:	f040 8186 	bne.w	8007524 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800721e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007222:	e129      	b.n	8007478 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007236:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800723a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800723e:	4013      	ands	r3, r2
 8007240:	b29a      	uxth	r2, r3
 8007242:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007246:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800724c:	1c9a      	adds	r2, r3, #2
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007258:	b29b      	uxth	r3, r3
 800725a:	3b01      	subs	r3, #1
 800725c:	b29a      	uxth	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800726e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007272:	f003 0307 	and.w	r3, r3, #7
 8007276:	2b00      	cmp	r3, #0
 8007278:	d053      	beq.n	8007322 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800727a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d011      	beq.n	80072aa <UART_RxISR_16BIT_FIFOEN+0xce>
 8007286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800728a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00b      	beq.n	80072aa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2201      	movs	r2, #1
 8007298:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a0:	f043 0201 	orr.w	r2, r3, #1
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d011      	beq.n	80072da <UART_RxISR_16BIT_FIFOEN+0xfe>
 80072b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00b      	beq.n	80072da <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2202      	movs	r2, #2
 80072c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d0:	f043 0204 	orr.w	r2, r3, #4
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80072de:	f003 0304 	and.w	r3, r3, #4
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d011      	beq.n	800730a <UART_RxISR_16BIT_FIFOEN+0x12e>
 80072e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00b      	beq.n	800730a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2204      	movs	r2, #4
 80072f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007300:	f043 0202 	orr.w	r2, r3, #2
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007310:	2b00      	cmp	r3, #0
 8007312:	d006      	beq.n	8007322 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7fe fee7 	bl	80060e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007328:	b29b      	uxth	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	f040 80a4 	bne.w	8007478 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007338:	e853 3f00 	ldrex	r3, [r3]
 800733c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800733e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007344:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	461a      	mov	r2, r3
 800734e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007352:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007356:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007358:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800735a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800735e:	e841 2300 	strex	r3, r2, [r1]
 8007362:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007364:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1e2      	bne.n	8007330 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3308      	adds	r3, #8
 8007370:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800737a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800737c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007380:	f023 0301 	bic.w	r3, r3, #1
 8007384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3308      	adds	r3, #8
 800738e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007392:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007394:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007396:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007398:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800739a:	e841 2300 	strex	r3, r2, [r1]
 800739e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1e1      	bne.n	800736a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a5f      	ldr	r2, [pc, #380]	; (800753c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d021      	beq.n	8007408 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d01a      	beq.n	8007408 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073da:	e853 3f00 	ldrex	r3, [r3]
 80073de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80073f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80073f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073fc:	e841 2300 	strex	r3, r2, [r1]
 8007400:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1e4      	bne.n	80073d2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800740c:	2b01      	cmp	r3, #1
 800740e:	d130      	bne.n	8007472 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741e:	e853 3f00 	ldrex	r3, [r3]
 8007422:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007426:	f023 0310 	bic.w	r3, r3, #16
 800742a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007438:	647b      	str	r3, [r7, #68]	; 0x44
 800743a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800743e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e4      	bne.n	8007416 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	f003 0310 	and.w	r3, r3, #16
 8007456:	2b10      	cmp	r3, #16
 8007458:	d103      	bne.n	8007462 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2210      	movs	r2, #16
 8007460:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7fe fe46 	bl	80060fc <HAL_UARTEx_RxEventCallback>
 8007470:	e002      	b.n	8007478 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7fa f8f0 	bl	8001658 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007478:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800747c:	2b00      	cmp	r3, #0
 800747e:	d006      	beq.n	800748e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007480:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007484:	f003 0320 	and.w	r3, r3, #32
 8007488:	2b00      	cmp	r3, #0
 800748a:	f47f aecb 	bne.w	8007224 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007494:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007498:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800749c:	2b00      	cmp	r3, #0
 800749e:	d049      	beq.n	8007534 <UART_RxISR_16BIT_FIFOEN+0x358>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80074a6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d242      	bcs.n	8007534 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3308      	adds	r3, #8
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	623b      	str	r3, [r7, #32]
   return(result);
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3308      	adds	r3, #8
 80074ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80074d2:	633a      	str	r2, [r7, #48]	; 0x30
 80074d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074da:	e841 2300 	strex	r3, r2, [r1]
 80074de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1e3      	bne.n	80074ae <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a15      	ldr	r2, [pc, #84]	; (8007540 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80074ea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f043 0320 	orr.w	r3, r3, #32
 8007500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	461a      	mov	r2, r3
 800750a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800750e:	61fb      	str	r3, [r7, #28]
 8007510:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	69b9      	ldr	r1, [r7, #24]
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	617b      	str	r3, [r7, #20]
   return(result);
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e4      	bne.n	80074ec <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007522:	e007      	b.n	8007534 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	699a      	ldr	r2, [r3, #24]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f042 0208 	orr.w	r2, r2, #8
 8007532:	619a      	str	r2, [r3, #24]
}
 8007534:	bf00      	nop
 8007536:	37b8      	adds	r7, #184	; 0xb8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	44002400 	.word	0x44002400
 8007540:	08006cc5 	.word	0x08006cc5

08007544 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800758e:	2b01      	cmp	r3, #1
 8007590:	d101      	bne.n	8007596 <HAL_UARTEx_DisableFifoMode+0x16>
 8007592:	2302      	movs	r3, #2
 8007594:	e027      	b.n	80075e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2224      	movs	r2, #36	; 0x24
 80075a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0201 	bic.w	r2, r2, #1
 80075bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80075c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2220      	movs	r2, #32
 80075d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b084      	sub	sp, #16
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007602:	2b01      	cmp	r3, #1
 8007604:	d101      	bne.n	800760a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007606:	2302      	movs	r3, #2
 8007608:	e02d      	b.n	8007666 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2224      	movs	r2, #36	; 0x24
 8007616:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f022 0201 	bic.w	r2, r2, #1
 8007630:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	430a      	orrs	r2, r1
 8007644:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f850 	bl	80076ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2220      	movs	r2, #32
 8007658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800767e:	2b01      	cmp	r3, #1
 8007680:	d101      	bne.n	8007686 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007682:	2302      	movs	r3, #2
 8007684:	e02d      	b.n	80076e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2224      	movs	r2, #36	; 0x24
 8007692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f022 0201 	bic.w	r2, r2, #1
 80076ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	430a      	orrs	r2, r1
 80076c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f812 	bl	80076ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2220      	movs	r2, #32
 80076d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
	...

080076ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d108      	bne.n	800770e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800770c:	e031      	b.n	8007772 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800770e:	2308      	movs	r3, #8
 8007710:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007712:	2308      	movs	r3, #8
 8007714:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	0e5b      	lsrs	r3, r3, #25
 800771e:	b2db      	uxtb	r3, r3
 8007720:	f003 0307 	and.w	r3, r3, #7
 8007724:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	0f5b      	lsrs	r3, r3, #29
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f003 0307 	and.w	r3, r3, #7
 8007734:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007736:	7bbb      	ldrb	r3, [r7, #14]
 8007738:	7b3a      	ldrb	r2, [r7, #12]
 800773a:	4911      	ldr	r1, [pc, #68]	; (8007780 <UARTEx_SetNbDataToProcess+0x94>)
 800773c:	5c8a      	ldrb	r2, [r1, r2]
 800773e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007742:	7b3a      	ldrb	r2, [r7, #12]
 8007744:	490f      	ldr	r1, [pc, #60]	; (8007784 <UARTEx_SetNbDataToProcess+0x98>)
 8007746:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007748:	fb93 f3f2 	sdiv	r3, r3, r2
 800774c:	b29a      	uxth	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007754:	7bfb      	ldrb	r3, [r7, #15]
 8007756:	7b7a      	ldrb	r2, [r7, #13]
 8007758:	4909      	ldr	r1, [pc, #36]	; (8007780 <UARTEx_SetNbDataToProcess+0x94>)
 800775a:	5c8a      	ldrb	r2, [r1, r2]
 800775c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007760:	7b7a      	ldrb	r2, [r7, #13]
 8007762:	4908      	ldr	r1, [pc, #32]	; (8007784 <UARTEx_SetNbDataToProcess+0x98>)
 8007764:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007766:	fb93 f3f2 	sdiv	r3, r3, r2
 800776a:	b29a      	uxth	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007772:	bf00      	nop
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	0800cdd8 	.word	0x0800cdd8
 8007784:	0800cde0 	.word	0x0800cde0

08007788 <std>:
 8007788:	2300      	movs	r3, #0
 800778a:	b510      	push	{r4, lr}
 800778c:	4604      	mov	r4, r0
 800778e:	6083      	str	r3, [r0, #8]
 8007790:	8181      	strh	r1, [r0, #12]
 8007792:	4619      	mov	r1, r3
 8007794:	6643      	str	r3, [r0, #100]	; 0x64
 8007796:	81c2      	strh	r2, [r0, #14]
 8007798:	2208      	movs	r2, #8
 800779a:	6183      	str	r3, [r0, #24]
 800779c:	e9c0 3300 	strd	r3, r3, [r0]
 80077a0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077a4:	305c      	adds	r0, #92	; 0x5c
 80077a6:	f000 f9ed 	bl	8007b84 <memset>
 80077aa:	4b0d      	ldr	r3, [pc, #52]	; (80077e0 <std+0x58>)
 80077ac:	6224      	str	r4, [r4, #32]
 80077ae:	6263      	str	r3, [r4, #36]	; 0x24
 80077b0:	4b0c      	ldr	r3, [pc, #48]	; (80077e4 <std+0x5c>)
 80077b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80077b4:	4b0c      	ldr	r3, [pc, #48]	; (80077e8 <std+0x60>)
 80077b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077b8:	4b0c      	ldr	r3, [pc, #48]	; (80077ec <std+0x64>)
 80077ba:	6323      	str	r3, [r4, #48]	; 0x30
 80077bc:	4b0c      	ldr	r3, [pc, #48]	; (80077f0 <std+0x68>)
 80077be:	429c      	cmp	r4, r3
 80077c0:	d006      	beq.n	80077d0 <std+0x48>
 80077c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80077c6:	4294      	cmp	r4, r2
 80077c8:	d002      	beq.n	80077d0 <std+0x48>
 80077ca:	33d0      	adds	r3, #208	; 0xd0
 80077cc:	429c      	cmp	r4, r3
 80077ce:	d105      	bne.n	80077dc <std+0x54>
 80077d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077d8:	f000 ba4c 	b.w	8007c74 <__retarget_lock_init_recursive>
 80077dc:	bd10      	pop	{r4, pc}
 80077de:	bf00      	nop
 80077e0:	080079d5 	.word	0x080079d5
 80077e4:	080079f7 	.word	0x080079f7
 80077e8:	08007a2f 	.word	0x08007a2f
 80077ec:	08007a53 	.word	0x08007a53
 80077f0:	20000704 	.word	0x20000704

080077f4 <stdio_exit_handler>:
 80077f4:	4a02      	ldr	r2, [pc, #8]	; (8007800 <stdio_exit_handler+0xc>)
 80077f6:	4903      	ldr	r1, [pc, #12]	; (8007804 <stdio_exit_handler+0x10>)
 80077f8:	4803      	ldr	r0, [pc, #12]	; (8007808 <stdio_exit_handler+0x14>)
 80077fa:	f000 b869 	b.w	80078d0 <_fwalk_sglue>
 80077fe:	bf00      	nop
 8007800:	20000010 	.word	0x20000010
 8007804:	08007f75 	.word	0x08007f75
 8007808:	2000001c 	.word	0x2000001c

0800780c <cleanup_stdio>:
 800780c:	6841      	ldr	r1, [r0, #4]
 800780e:	4b0c      	ldr	r3, [pc, #48]	; (8007840 <cleanup_stdio+0x34>)
 8007810:	4299      	cmp	r1, r3
 8007812:	b510      	push	{r4, lr}
 8007814:	4604      	mov	r4, r0
 8007816:	d001      	beq.n	800781c <cleanup_stdio+0x10>
 8007818:	f000 fbac 	bl	8007f74 <_fflush_r>
 800781c:	68a1      	ldr	r1, [r4, #8]
 800781e:	4b09      	ldr	r3, [pc, #36]	; (8007844 <cleanup_stdio+0x38>)
 8007820:	4299      	cmp	r1, r3
 8007822:	d002      	beq.n	800782a <cleanup_stdio+0x1e>
 8007824:	4620      	mov	r0, r4
 8007826:	f000 fba5 	bl	8007f74 <_fflush_r>
 800782a:	68e1      	ldr	r1, [r4, #12]
 800782c:	4b06      	ldr	r3, [pc, #24]	; (8007848 <cleanup_stdio+0x3c>)
 800782e:	4299      	cmp	r1, r3
 8007830:	d004      	beq.n	800783c <cleanup_stdio+0x30>
 8007832:	4620      	mov	r0, r4
 8007834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007838:	f000 bb9c 	b.w	8007f74 <_fflush_r>
 800783c:	bd10      	pop	{r4, pc}
 800783e:	bf00      	nop
 8007840:	20000704 	.word	0x20000704
 8007844:	2000076c 	.word	0x2000076c
 8007848:	200007d4 	.word	0x200007d4

0800784c <global_stdio_init.part.0>:
 800784c:	b510      	push	{r4, lr}
 800784e:	4b0b      	ldr	r3, [pc, #44]	; (800787c <global_stdio_init.part.0+0x30>)
 8007850:	2104      	movs	r1, #4
 8007852:	4c0b      	ldr	r4, [pc, #44]	; (8007880 <global_stdio_init.part.0+0x34>)
 8007854:	4a0b      	ldr	r2, [pc, #44]	; (8007884 <global_stdio_init.part.0+0x38>)
 8007856:	4620      	mov	r0, r4
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	2200      	movs	r2, #0
 800785c:	f7ff ff94 	bl	8007788 <std>
 8007860:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007864:	2201      	movs	r2, #1
 8007866:	2109      	movs	r1, #9
 8007868:	f7ff ff8e 	bl	8007788 <std>
 800786c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007870:	2202      	movs	r2, #2
 8007872:	2112      	movs	r1, #18
 8007874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007878:	f7ff bf86 	b.w	8007788 <std>
 800787c:	2000083c 	.word	0x2000083c
 8007880:	20000704 	.word	0x20000704
 8007884:	080077f5 	.word	0x080077f5

08007888 <__sfp_lock_acquire>:
 8007888:	4801      	ldr	r0, [pc, #4]	; (8007890 <__sfp_lock_acquire+0x8>)
 800788a:	f000 b9f4 	b.w	8007c76 <__retarget_lock_acquire_recursive>
 800788e:	bf00      	nop
 8007890:	20000845 	.word	0x20000845

08007894 <__sfp_lock_release>:
 8007894:	4801      	ldr	r0, [pc, #4]	; (800789c <__sfp_lock_release+0x8>)
 8007896:	f000 b9ef 	b.w	8007c78 <__retarget_lock_release_recursive>
 800789a:	bf00      	nop
 800789c:	20000845 	.word	0x20000845

080078a0 <__sinit>:
 80078a0:	b510      	push	{r4, lr}
 80078a2:	4604      	mov	r4, r0
 80078a4:	f7ff fff0 	bl	8007888 <__sfp_lock_acquire>
 80078a8:	6a23      	ldr	r3, [r4, #32]
 80078aa:	b11b      	cbz	r3, 80078b4 <__sinit+0x14>
 80078ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078b0:	f7ff bff0 	b.w	8007894 <__sfp_lock_release>
 80078b4:	4b04      	ldr	r3, [pc, #16]	; (80078c8 <__sinit+0x28>)
 80078b6:	6223      	str	r3, [r4, #32]
 80078b8:	4b04      	ldr	r3, [pc, #16]	; (80078cc <__sinit+0x2c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1f5      	bne.n	80078ac <__sinit+0xc>
 80078c0:	f7ff ffc4 	bl	800784c <global_stdio_init.part.0>
 80078c4:	e7f2      	b.n	80078ac <__sinit+0xc>
 80078c6:	bf00      	nop
 80078c8:	0800780d 	.word	0x0800780d
 80078cc:	2000083c 	.word	0x2000083c

080078d0 <_fwalk_sglue>:
 80078d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d4:	4607      	mov	r7, r0
 80078d6:	4688      	mov	r8, r1
 80078d8:	4614      	mov	r4, r2
 80078da:	2600      	movs	r6, #0
 80078dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078e0:	f1b9 0901 	subs.w	r9, r9, #1
 80078e4:	d505      	bpl.n	80078f2 <_fwalk_sglue+0x22>
 80078e6:	6824      	ldr	r4, [r4, #0]
 80078e8:	2c00      	cmp	r4, #0
 80078ea:	d1f7      	bne.n	80078dc <_fwalk_sglue+0xc>
 80078ec:	4630      	mov	r0, r6
 80078ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078f2:	89ab      	ldrh	r3, [r5, #12]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d907      	bls.n	8007908 <_fwalk_sglue+0x38>
 80078f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078fc:	3301      	adds	r3, #1
 80078fe:	d003      	beq.n	8007908 <_fwalk_sglue+0x38>
 8007900:	4629      	mov	r1, r5
 8007902:	4638      	mov	r0, r7
 8007904:	47c0      	blx	r8
 8007906:	4306      	orrs	r6, r0
 8007908:	3568      	adds	r5, #104	; 0x68
 800790a:	e7e9      	b.n	80078e0 <_fwalk_sglue+0x10>

0800790c <putchar>:
 800790c:	4b02      	ldr	r3, [pc, #8]	; (8007918 <putchar+0xc>)
 800790e:	4601      	mov	r1, r0
 8007910:	6818      	ldr	r0, [r3, #0]
 8007912:	6882      	ldr	r2, [r0, #8]
 8007914:	f000 bbb7 	b.w	8008086 <_putc_r>
 8007918:	20000068 	.word	0x20000068

0800791c <_puts_r>:
 800791c:	6a03      	ldr	r3, [r0, #32]
 800791e:	b570      	push	{r4, r5, r6, lr}
 8007920:	4605      	mov	r5, r0
 8007922:	460e      	mov	r6, r1
 8007924:	6884      	ldr	r4, [r0, #8]
 8007926:	b90b      	cbnz	r3, 800792c <_puts_r+0x10>
 8007928:	f7ff ffba 	bl	80078a0 <__sinit>
 800792c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800792e:	07db      	lsls	r3, r3, #31
 8007930:	d405      	bmi.n	800793e <_puts_r+0x22>
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	0598      	lsls	r0, r3, #22
 8007936:	d402      	bmi.n	800793e <_puts_r+0x22>
 8007938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800793a:	f000 f99c 	bl	8007c76 <__retarget_lock_acquire_recursive>
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	0719      	lsls	r1, r3, #28
 8007942:	d513      	bpl.n	800796c <_puts_r+0x50>
 8007944:	6923      	ldr	r3, [r4, #16]
 8007946:	b18b      	cbz	r3, 800796c <_puts_r+0x50>
 8007948:	3e01      	subs	r6, #1
 800794a:	68a3      	ldr	r3, [r4, #8]
 800794c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007950:	3b01      	subs	r3, #1
 8007952:	60a3      	str	r3, [r4, #8]
 8007954:	b9e9      	cbnz	r1, 8007992 <_puts_r+0x76>
 8007956:	2b00      	cmp	r3, #0
 8007958:	da2e      	bge.n	80079b8 <_puts_r+0x9c>
 800795a:	4622      	mov	r2, r4
 800795c:	210a      	movs	r1, #10
 800795e:	4628      	mov	r0, r5
 8007960:	f000 f87b 	bl	8007a5a <__swbuf_r>
 8007964:	3001      	adds	r0, #1
 8007966:	d007      	beq.n	8007978 <_puts_r+0x5c>
 8007968:	250a      	movs	r5, #10
 800796a:	e007      	b.n	800797c <_puts_r+0x60>
 800796c:	4621      	mov	r1, r4
 800796e:	4628      	mov	r0, r5
 8007970:	f000 f8b0 	bl	8007ad4 <__swsetup_r>
 8007974:	2800      	cmp	r0, #0
 8007976:	d0e7      	beq.n	8007948 <_puts_r+0x2c>
 8007978:	f04f 35ff 	mov.w	r5, #4294967295
 800797c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800797e:	07da      	lsls	r2, r3, #31
 8007980:	d405      	bmi.n	800798e <_puts_r+0x72>
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	059b      	lsls	r3, r3, #22
 8007986:	d402      	bmi.n	800798e <_puts_r+0x72>
 8007988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800798a:	f000 f975 	bl	8007c78 <__retarget_lock_release_recursive>
 800798e:	4628      	mov	r0, r5
 8007990:	bd70      	pop	{r4, r5, r6, pc}
 8007992:	2b00      	cmp	r3, #0
 8007994:	da04      	bge.n	80079a0 <_puts_r+0x84>
 8007996:	69a2      	ldr	r2, [r4, #24]
 8007998:	429a      	cmp	r2, r3
 800799a:	dc06      	bgt.n	80079aa <_puts_r+0x8e>
 800799c:	290a      	cmp	r1, #10
 800799e:	d004      	beq.n	80079aa <_puts_r+0x8e>
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	6022      	str	r2, [r4, #0]
 80079a6:	7019      	strb	r1, [r3, #0]
 80079a8:	e7cf      	b.n	800794a <_puts_r+0x2e>
 80079aa:	4622      	mov	r2, r4
 80079ac:	4628      	mov	r0, r5
 80079ae:	f000 f854 	bl	8007a5a <__swbuf_r>
 80079b2:	3001      	adds	r0, #1
 80079b4:	d1c9      	bne.n	800794a <_puts_r+0x2e>
 80079b6:	e7df      	b.n	8007978 <_puts_r+0x5c>
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	250a      	movs	r5, #10
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	6022      	str	r2, [r4, #0]
 80079c0:	701d      	strb	r5, [r3, #0]
 80079c2:	e7db      	b.n	800797c <_puts_r+0x60>

080079c4 <puts>:
 80079c4:	4b02      	ldr	r3, [pc, #8]	; (80079d0 <puts+0xc>)
 80079c6:	4601      	mov	r1, r0
 80079c8:	6818      	ldr	r0, [r3, #0]
 80079ca:	f7ff bfa7 	b.w	800791c <_puts_r>
 80079ce:	bf00      	nop
 80079d0:	20000068 	.word	0x20000068

080079d4 <__sread>:
 80079d4:	b510      	push	{r4, lr}
 80079d6:	460c      	mov	r4, r1
 80079d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079dc:	f000 f8fc 	bl	8007bd8 <_read_r>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	bfab      	itete	ge
 80079e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079e6:	89a3      	ldrhlt	r3, [r4, #12]
 80079e8:	181b      	addge	r3, r3, r0
 80079ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079ee:	bfac      	ite	ge
 80079f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80079f2:	81a3      	strhlt	r3, [r4, #12]
 80079f4:	bd10      	pop	{r4, pc}

080079f6 <__swrite>:
 80079f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079fa:	461f      	mov	r7, r3
 80079fc:	898b      	ldrh	r3, [r1, #12]
 80079fe:	4605      	mov	r5, r0
 8007a00:	460c      	mov	r4, r1
 8007a02:	05db      	lsls	r3, r3, #23
 8007a04:	4616      	mov	r6, r2
 8007a06:	d505      	bpl.n	8007a14 <__swrite+0x1e>
 8007a08:	2302      	movs	r3, #2
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a10:	f000 f8d0 	bl	8007bb4 <_lseek_r>
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	4632      	mov	r2, r6
 8007a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a22:	81a3      	strh	r3, [r4, #12]
 8007a24:	463b      	mov	r3, r7
 8007a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a2a:	f000 b8e7 	b.w	8007bfc <_write_r>

08007a2e <__sseek>:
 8007a2e:	b510      	push	{r4, lr}
 8007a30:	460c      	mov	r4, r1
 8007a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a36:	f000 f8bd 	bl	8007bb4 <_lseek_r>
 8007a3a:	1c43      	adds	r3, r0, #1
 8007a3c:	89a3      	ldrh	r3, [r4, #12]
 8007a3e:	bf15      	itete	ne
 8007a40:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a4a:	81a3      	strheq	r3, [r4, #12]
 8007a4c:	bf18      	it	ne
 8007a4e:	81a3      	strhne	r3, [r4, #12]
 8007a50:	bd10      	pop	{r4, pc}

08007a52 <__sclose>:
 8007a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a56:	f000 b89d 	b.w	8007b94 <_close_r>

08007a5a <__swbuf_r>:
 8007a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5c:	460e      	mov	r6, r1
 8007a5e:	4614      	mov	r4, r2
 8007a60:	4605      	mov	r5, r0
 8007a62:	b118      	cbz	r0, 8007a6c <__swbuf_r+0x12>
 8007a64:	6a03      	ldr	r3, [r0, #32]
 8007a66:	b90b      	cbnz	r3, 8007a6c <__swbuf_r+0x12>
 8007a68:	f7ff ff1a 	bl	80078a0 <__sinit>
 8007a6c:	69a3      	ldr	r3, [r4, #24]
 8007a6e:	60a3      	str	r3, [r4, #8]
 8007a70:	89a3      	ldrh	r3, [r4, #12]
 8007a72:	071a      	lsls	r2, r3, #28
 8007a74:	d525      	bpl.n	8007ac2 <__swbuf_r+0x68>
 8007a76:	6923      	ldr	r3, [r4, #16]
 8007a78:	b31b      	cbz	r3, 8007ac2 <__swbuf_r+0x68>
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	b2f6      	uxtb	r6, r6
 8007a7e:	6922      	ldr	r2, [r4, #16]
 8007a80:	4637      	mov	r7, r6
 8007a82:	1a98      	subs	r0, r3, r2
 8007a84:	6963      	ldr	r3, [r4, #20]
 8007a86:	4283      	cmp	r3, r0
 8007a88:	dc04      	bgt.n	8007a94 <__swbuf_r+0x3a>
 8007a8a:	4621      	mov	r1, r4
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	f000 fa71 	bl	8007f74 <_fflush_r>
 8007a92:	b9e0      	cbnz	r0, 8007ace <__swbuf_r+0x74>
 8007a94:	68a3      	ldr	r3, [r4, #8]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	60a3      	str	r3, [r4, #8]
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	6022      	str	r2, [r4, #0]
 8007aa0:	701e      	strb	r6, [r3, #0]
 8007aa2:	1c43      	adds	r3, r0, #1
 8007aa4:	6962      	ldr	r2, [r4, #20]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d004      	beq.n	8007ab4 <__swbuf_r+0x5a>
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	07db      	lsls	r3, r3, #31
 8007aae:	d506      	bpl.n	8007abe <__swbuf_r+0x64>
 8007ab0:	2e0a      	cmp	r6, #10
 8007ab2:	d104      	bne.n	8007abe <__swbuf_r+0x64>
 8007ab4:	4621      	mov	r1, r4
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	f000 fa5c 	bl	8007f74 <_fflush_r>
 8007abc:	b938      	cbnz	r0, 8007ace <__swbuf_r+0x74>
 8007abe:	4638      	mov	r0, r7
 8007ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	f000 f805 	bl	8007ad4 <__swsetup_r>
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d0d5      	beq.n	8007a7a <__swbuf_r+0x20>
 8007ace:	f04f 37ff 	mov.w	r7, #4294967295
 8007ad2:	e7f4      	b.n	8007abe <__swbuf_r+0x64>

08007ad4 <__swsetup_r>:
 8007ad4:	b538      	push	{r3, r4, r5, lr}
 8007ad6:	4b2a      	ldr	r3, [pc, #168]	; (8007b80 <__swsetup_r+0xac>)
 8007ad8:	4605      	mov	r5, r0
 8007ada:	460c      	mov	r4, r1
 8007adc:	6818      	ldr	r0, [r3, #0]
 8007ade:	b118      	cbz	r0, 8007ae8 <__swsetup_r+0x14>
 8007ae0:	6a03      	ldr	r3, [r0, #32]
 8007ae2:	b90b      	cbnz	r3, 8007ae8 <__swsetup_r+0x14>
 8007ae4:	f7ff fedc 	bl	80078a0 <__sinit>
 8007ae8:	89a3      	ldrh	r3, [r4, #12]
 8007aea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007aee:	0718      	lsls	r0, r3, #28
 8007af0:	d422      	bmi.n	8007b38 <__swsetup_r+0x64>
 8007af2:	06d9      	lsls	r1, r3, #27
 8007af4:	d407      	bmi.n	8007b06 <__swsetup_r+0x32>
 8007af6:	2309      	movs	r3, #9
 8007af8:	602b      	str	r3, [r5, #0]
 8007afa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007afe:	f04f 30ff 	mov.w	r0, #4294967295
 8007b02:	81a3      	strh	r3, [r4, #12]
 8007b04:	e034      	b.n	8007b70 <__swsetup_r+0x9c>
 8007b06:	0758      	lsls	r0, r3, #29
 8007b08:	d512      	bpl.n	8007b30 <__swsetup_r+0x5c>
 8007b0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b0c:	b141      	cbz	r1, 8007b20 <__swsetup_r+0x4c>
 8007b0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b12:	4299      	cmp	r1, r3
 8007b14:	d002      	beq.n	8007b1c <__swsetup_r+0x48>
 8007b16:	4628      	mov	r0, r5
 8007b18:	f000 f8b0 	bl	8007c7c <_free_r>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	6363      	str	r3, [r4, #52]	; 0x34
 8007b20:	89a3      	ldrh	r3, [r4, #12]
 8007b22:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b26:	81a3      	strh	r3, [r4, #12]
 8007b28:	2300      	movs	r3, #0
 8007b2a:	6063      	str	r3, [r4, #4]
 8007b2c:	6923      	ldr	r3, [r4, #16]
 8007b2e:	6023      	str	r3, [r4, #0]
 8007b30:	89a3      	ldrh	r3, [r4, #12]
 8007b32:	f043 0308 	orr.w	r3, r3, #8
 8007b36:	81a3      	strh	r3, [r4, #12]
 8007b38:	6923      	ldr	r3, [r4, #16]
 8007b3a:	b94b      	cbnz	r3, 8007b50 <__swsetup_r+0x7c>
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b46:	d003      	beq.n	8007b50 <__swsetup_r+0x7c>
 8007b48:	4621      	mov	r1, r4
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	f000 fa5f 	bl	800800e <__smakebuf_r>
 8007b50:	89a0      	ldrh	r0, [r4, #12]
 8007b52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b56:	f010 0301 	ands.w	r3, r0, #1
 8007b5a:	d00a      	beq.n	8007b72 <__swsetup_r+0x9e>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	60a3      	str	r3, [r4, #8]
 8007b60:	6963      	ldr	r3, [r4, #20]
 8007b62:	425b      	negs	r3, r3
 8007b64:	61a3      	str	r3, [r4, #24]
 8007b66:	6923      	ldr	r3, [r4, #16]
 8007b68:	b943      	cbnz	r3, 8007b7c <__swsetup_r+0xa8>
 8007b6a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b6e:	d1c4      	bne.n	8007afa <__swsetup_r+0x26>
 8007b70:	bd38      	pop	{r3, r4, r5, pc}
 8007b72:	0781      	lsls	r1, r0, #30
 8007b74:	bf58      	it	pl
 8007b76:	6963      	ldrpl	r3, [r4, #20]
 8007b78:	60a3      	str	r3, [r4, #8]
 8007b7a:	e7f4      	b.n	8007b66 <__swsetup_r+0x92>
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	e7f7      	b.n	8007b70 <__swsetup_r+0x9c>
 8007b80:	20000068 	.word	0x20000068

08007b84 <memset>:
 8007b84:	4402      	add	r2, r0
 8007b86:	4603      	mov	r3, r0
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d100      	bne.n	8007b8e <memset+0xa>
 8007b8c:	4770      	bx	lr
 8007b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b92:	e7f9      	b.n	8007b88 <memset+0x4>

08007b94 <_close_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	2300      	movs	r3, #0
 8007b98:	4d05      	ldr	r5, [pc, #20]	; (8007bb0 <_close_r+0x1c>)
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	4608      	mov	r0, r1
 8007b9e:	602b      	str	r3, [r5, #0]
 8007ba0:	f7f9 fb91 	bl	80012c6 <_close>
 8007ba4:	1c43      	adds	r3, r0, #1
 8007ba6:	d102      	bne.n	8007bae <_close_r+0x1a>
 8007ba8:	682b      	ldr	r3, [r5, #0]
 8007baa:	b103      	cbz	r3, 8007bae <_close_r+0x1a>
 8007bac:	6023      	str	r3, [r4, #0]
 8007bae:	bd38      	pop	{r3, r4, r5, pc}
 8007bb0:	20000840 	.word	0x20000840

08007bb4 <_lseek_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	4d06      	ldr	r5, [pc, #24]	; (8007bd4 <_lseek_r+0x20>)
 8007bba:	4608      	mov	r0, r1
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	602a      	str	r2, [r5, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f7f9 fba6 	bl	8001314 <_lseek>
 8007bc8:	1c43      	adds	r3, r0, #1
 8007bca:	d102      	bne.n	8007bd2 <_lseek_r+0x1e>
 8007bcc:	682b      	ldr	r3, [r5, #0]
 8007bce:	b103      	cbz	r3, 8007bd2 <_lseek_r+0x1e>
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	bd38      	pop	{r3, r4, r5, pc}
 8007bd4:	20000840 	.word	0x20000840

08007bd8 <_read_r>:
 8007bd8:	b538      	push	{r3, r4, r5, lr}
 8007bda:	4604      	mov	r4, r0
 8007bdc:	4d06      	ldr	r5, [pc, #24]	; (8007bf8 <_read_r+0x20>)
 8007bde:	4608      	mov	r0, r1
 8007be0:	4611      	mov	r1, r2
 8007be2:	2200      	movs	r2, #0
 8007be4:	602a      	str	r2, [r5, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	f7f9 fb34 	bl	8001254 <_read>
 8007bec:	1c43      	adds	r3, r0, #1
 8007bee:	d102      	bne.n	8007bf6 <_read_r+0x1e>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	b103      	cbz	r3, 8007bf6 <_read_r+0x1e>
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	bd38      	pop	{r3, r4, r5, pc}
 8007bf8:	20000840 	.word	0x20000840

08007bfc <_write_r>:
 8007bfc:	b538      	push	{r3, r4, r5, lr}
 8007bfe:	4604      	mov	r4, r0
 8007c00:	4d06      	ldr	r5, [pc, #24]	; (8007c1c <_write_r+0x20>)
 8007c02:	4608      	mov	r0, r1
 8007c04:	4611      	mov	r1, r2
 8007c06:	2200      	movs	r2, #0
 8007c08:	602a      	str	r2, [r5, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	f7f9 fb3f 	bl	800128e <_write>
 8007c10:	1c43      	adds	r3, r0, #1
 8007c12:	d102      	bne.n	8007c1a <_write_r+0x1e>
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	b103      	cbz	r3, 8007c1a <_write_r+0x1e>
 8007c18:	6023      	str	r3, [r4, #0]
 8007c1a:	bd38      	pop	{r3, r4, r5, pc}
 8007c1c:	20000840 	.word	0x20000840

08007c20 <__errno>:
 8007c20:	4b01      	ldr	r3, [pc, #4]	; (8007c28 <__errno+0x8>)
 8007c22:	6818      	ldr	r0, [r3, #0]
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	20000068 	.word	0x20000068

08007c2c <__libc_init_array>:
 8007c2c:	b570      	push	{r4, r5, r6, lr}
 8007c2e:	4d0d      	ldr	r5, [pc, #52]	; (8007c64 <__libc_init_array+0x38>)
 8007c30:	2600      	movs	r6, #0
 8007c32:	4c0d      	ldr	r4, [pc, #52]	; (8007c68 <__libc_init_array+0x3c>)
 8007c34:	1b64      	subs	r4, r4, r5
 8007c36:	10a4      	asrs	r4, r4, #2
 8007c38:	42a6      	cmp	r6, r4
 8007c3a:	d109      	bne.n	8007c50 <__libc_init_array+0x24>
 8007c3c:	4d0b      	ldr	r5, [pc, #44]	; (8007c6c <__libc_init_array+0x40>)
 8007c3e:	2600      	movs	r6, #0
 8007c40:	4c0b      	ldr	r4, [pc, #44]	; (8007c70 <__libc_init_array+0x44>)
 8007c42:	f000 fa87 	bl	8008154 <_init>
 8007c46:	1b64      	subs	r4, r4, r5
 8007c48:	10a4      	asrs	r4, r4, #2
 8007c4a:	42a6      	cmp	r6, r4
 8007c4c:	d105      	bne.n	8007c5a <__libc_init_array+0x2e>
 8007c4e:	bd70      	pop	{r4, r5, r6, pc}
 8007c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c54:	3601      	adds	r6, #1
 8007c56:	4798      	blx	r3
 8007c58:	e7ee      	b.n	8007c38 <__libc_init_array+0xc>
 8007c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c5e:	3601      	adds	r6, #1
 8007c60:	4798      	blx	r3
 8007c62:	e7f2      	b.n	8007c4a <__libc_init_array+0x1e>
 8007c64:	0800cdf0 	.word	0x0800cdf0
 8007c68:	0800cdf0 	.word	0x0800cdf0
 8007c6c:	0800cdf0 	.word	0x0800cdf0
 8007c70:	0800cdf4 	.word	0x0800cdf4

08007c74 <__retarget_lock_init_recursive>:
 8007c74:	4770      	bx	lr

08007c76 <__retarget_lock_acquire_recursive>:
 8007c76:	4770      	bx	lr

08007c78 <__retarget_lock_release_recursive>:
 8007c78:	4770      	bx	lr
	...

08007c7c <_free_r>:
 8007c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c7e:	2900      	cmp	r1, #0
 8007c80:	d043      	beq.n	8007d0a <_free_r+0x8e>
 8007c82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c86:	1f0c      	subs	r4, r1, #4
 8007c88:	9001      	str	r0, [sp, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	bfb8      	it	lt
 8007c8e:	18e4      	addlt	r4, r4, r3
 8007c90:	f000 f8e0 	bl	8007e54 <__malloc_lock>
 8007c94:	4a1e      	ldr	r2, [pc, #120]	; (8007d10 <_free_r+0x94>)
 8007c96:	9801      	ldr	r0, [sp, #4]
 8007c98:	6813      	ldr	r3, [r2, #0]
 8007c9a:	b933      	cbnz	r3, 8007caa <_free_r+0x2e>
 8007c9c:	6063      	str	r3, [r4, #4]
 8007c9e:	6014      	str	r4, [r2, #0]
 8007ca0:	b003      	add	sp, #12
 8007ca2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ca6:	f000 b8db 	b.w	8007e60 <__malloc_unlock>
 8007caa:	42a3      	cmp	r3, r4
 8007cac:	d908      	bls.n	8007cc0 <_free_r+0x44>
 8007cae:	6825      	ldr	r5, [r4, #0]
 8007cb0:	1961      	adds	r1, r4, r5
 8007cb2:	428b      	cmp	r3, r1
 8007cb4:	bf01      	itttt	eq
 8007cb6:	6819      	ldreq	r1, [r3, #0]
 8007cb8:	685b      	ldreq	r3, [r3, #4]
 8007cba:	1949      	addeq	r1, r1, r5
 8007cbc:	6021      	streq	r1, [r4, #0]
 8007cbe:	e7ed      	b.n	8007c9c <_free_r+0x20>
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	b10b      	cbz	r3, 8007cca <_free_r+0x4e>
 8007cc6:	42a3      	cmp	r3, r4
 8007cc8:	d9fa      	bls.n	8007cc0 <_free_r+0x44>
 8007cca:	6811      	ldr	r1, [r2, #0]
 8007ccc:	1855      	adds	r5, r2, r1
 8007cce:	42a5      	cmp	r5, r4
 8007cd0:	d10b      	bne.n	8007cea <_free_r+0x6e>
 8007cd2:	6824      	ldr	r4, [r4, #0]
 8007cd4:	4421      	add	r1, r4
 8007cd6:	1854      	adds	r4, r2, r1
 8007cd8:	6011      	str	r1, [r2, #0]
 8007cda:	42a3      	cmp	r3, r4
 8007cdc:	d1e0      	bne.n	8007ca0 <_free_r+0x24>
 8007cde:	681c      	ldr	r4, [r3, #0]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	440c      	add	r4, r1
 8007ce4:	6053      	str	r3, [r2, #4]
 8007ce6:	6014      	str	r4, [r2, #0]
 8007ce8:	e7da      	b.n	8007ca0 <_free_r+0x24>
 8007cea:	d902      	bls.n	8007cf2 <_free_r+0x76>
 8007cec:	230c      	movs	r3, #12
 8007cee:	6003      	str	r3, [r0, #0]
 8007cf0:	e7d6      	b.n	8007ca0 <_free_r+0x24>
 8007cf2:	6825      	ldr	r5, [r4, #0]
 8007cf4:	1961      	adds	r1, r4, r5
 8007cf6:	428b      	cmp	r3, r1
 8007cf8:	bf02      	ittt	eq
 8007cfa:	6819      	ldreq	r1, [r3, #0]
 8007cfc:	685b      	ldreq	r3, [r3, #4]
 8007cfe:	1949      	addeq	r1, r1, r5
 8007d00:	6063      	str	r3, [r4, #4]
 8007d02:	bf08      	it	eq
 8007d04:	6021      	streq	r1, [r4, #0]
 8007d06:	6054      	str	r4, [r2, #4]
 8007d08:	e7ca      	b.n	8007ca0 <_free_r+0x24>
 8007d0a:	b003      	add	sp, #12
 8007d0c:	bd30      	pop	{r4, r5, pc}
 8007d0e:	bf00      	nop
 8007d10:	20000848 	.word	0x20000848

08007d14 <sbrk_aligned>:
 8007d14:	b570      	push	{r4, r5, r6, lr}
 8007d16:	4e0e      	ldr	r6, [pc, #56]	; (8007d50 <sbrk_aligned+0x3c>)
 8007d18:	460c      	mov	r4, r1
 8007d1a:	4605      	mov	r5, r0
 8007d1c:	6831      	ldr	r1, [r6, #0]
 8007d1e:	b911      	cbnz	r1, 8007d26 <sbrk_aligned+0x12>
 8007d20:	f000 fa08 	bl	8008134 <_sbrk_r>
 8007d24:	6030      	str	r0, [r6, #0]
 8007d26:	4621      	mov	r1, r4
 8007d28:	4628      	mov	r0, r5
 8007d2a:	f000 fa03 	bl	8008134 <_sbrk_r>
 8007d2e:	1c43      	adds	r3, r0, #1
 8007d30:	d00a      	beq.n	8007d48 <sbrk_aligned+0x34>
 8007d32:	1cc4      	adds	r4, r0, #3
 8007d34:	f024 0403 	bic.w	r4, r4, #3
 8007d38:	42a0      	cmp	r0, r4
 8007d3a:	d007      	beq.n	8007d4c <sbrk_aligned+0x38>
 8007d3c:	1a21      	subs	r1, r4, r0
 8007d3e:	4628      	mov	r0, r5
 8007d40:	f000 f9f8 	bl	8008134 <_sbrk_r>
 8007d44:	3001      	adds	r0, #1
 8007d46:	d101      	bne.n	8007d4c <sbrk_aligned+0x38>
 8007d48:	f04f 34ff 	mov.w	r4, #4294967295
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	bd70      	pop	{r4, r5, r6, pc}
 8007d50:	2000084c 	.word	0x2000084c

08007d54 <_malloc_r>:
 8007d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d58:	1ccd      	adds	r5, r1, #3
 8007d5a:	4607      	mov	r7, r0
 8007d5c:	f025 0503 	bic.w	r5, r5, #3
 8007d60:	3508      	adds	r5, #8
 8007d62:	2d0c      	cmp	r5, #12
 8007d64:	bf38      	it	cc
 8007d66:	250c      	movcc	r5, #12
 8007d68:	2d00      	cmp	r5, #0
 8007d6a:	db01      	blt.n	8007d70 <_malloc_r+0x1c>
 8007d6c:	42a9      	cmp	r1, r5
 8007d6e:	d905      	bls.n	8007d7c <_malloc_r+0x28>
 8007d70:	230c      	movs	r3, #12
 8007d72:	2600      	movs	r6, #0
 8007d74:	603b      	str	r3, [r7, #0]
 8007d76:	4630      	mov	r0, r6
 8007d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007e50 <_malloc_r+0xfc>
 8007d80:	f000 f868 	bl	8007e54 <__malloc_lock>
 8007d84:	f8d8 3000 	ldr.w	r3, [r8]
 8007d88:	461c      	mov	r4, r3
 8007d8a:	bb5c      	cbnz	r4, 8007de4 <_malloc_r+0x90>
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	4638      	mov	r0, r7
 8007d90:	f7ff ffc0 	bl	8007d14 <sbrk_aligned>
 8007d94:	1c43      	adds	r3, r0, #1
 8007d96:	4604      	mov	r4, r0
 8007d98:	d155      	bne.n	8007e46 <_malloc_r+0xf2>
 8007d9a:	f8d8 4000 	ldr.w	r4, [r8]
 8007d9e:	4626      	mov	r6, r4
 8007da0:	2e00      	cmp	r6, #0
 8007da2:	d145      	bne.n	8007e30 <_malloc_r+0xdc>
 8007da4:	2c00      	cmp	r4, #0
 8007da6:	d048      	beq.n	8007e3a <_malloc_r+0xe6>
 8007da8:	6823      	ldr	r3, [r4, #0]
 8007daa:	4631      	mov	r1, r6
 8007dac:	4638      	mov	r0, r7
 8007dae:	eb04 0903 	add.w	r9, r4, r3
 8007db2:	f000 f9bf 	bl	8008134 <_sbrk_r>
 8007db6:	4581      	cmp	r9, r0
 8007db8:	d13f      	bne.n	8007e3a <_malloc_r+0xe6>
 8007dba:	6821      	ldr	r1, [r4, #0]
 8007dbc:	4638      	mov	r0, r7
 8007dbe:	1a6d      	subs	r5, r5, r1
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	f7ff ffa7 	bl	8007d14 <sbrk_aligned>
 8007dc6:	3001      	adds	r0, #1
 8007dc8:	d037      	beq.n	8007e3a <_malloc_r+0xe6>
 8007dca:	6823      	ldr	r3, [r4, #0]
 8007dcc:	442b      	add	r3, r5
 8007dce:	6023      	str	r3, [r4, #0]
 8007dd0:	f8d8 3000 	ldr.w	r3, [r8]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d038      	beq.n	8007e4a <_malloc_r+0xf6>
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	42a2      	cmp	r2, r4
 8007ddc:	d12b      	bne.n	8007e36 <_malloc_r+0xe2>
 8007dde:	2200      	movs	r2, #0
 8007de0:	605a      	str	r2, [r3, #4]
 8007de2:	e00f      	b.n	8007e04 <_malloc_r+0xb0>
 8007de4:	6822      	ldr	r2, [r4, #0]
 8007de6:	1b52      	subs	r2, r2, r5
 8007de8:	d41f      	bmi.n	8007e2a <_malloc_r+0xd6>
 8007dea:	2a0b      	cmp	r2, #11
 8007dec:	d917      	bls.n	8007e1e <_malloc_r+0xca>
 8007dee:	1961      	adds	r1, r4, r5
 8007df0:	42a3      	cmp	r3, r4
 8007df2:	6025      	str	r5, [r4, #0]
 8007df4:	bf18      	it	ne
 8007df6:	6059      	strne	r1, [r3, #4]
 8007df8:	6863      	ldr	r3, [r4, #4]
 8007dfa:	bf08      	it	eq
 8007dfc:	f8c8 1000 	streq.w	r1, [r8]
 8007e00:	5162      	str	r2, [r4, r5]
 8007e02:	604b      	str	r3, [r1, #4]
 8007e04:	f104 060b 	add.w	r6, r4, #11
 8007e08:	4638      	mov	r0, r7
 8007e0a:	f000 f829 	bl	8007e60 <__malloc_unlock>
 8007e0e:	1d23      	adds	r3, r4, #4
 8007e10:	f026 0607 	bic.w	r6, r6, #7
 8007e14:	1af2      	subs	r2, r6, r3
 8007e16:	d0ae      	beq.n	8007d76 <_malloc_r+0x22>
 8007e18:	1b9b      	subs	r3, r3, r6
 8007e1a:	50a3      	str	r3, [r4, r2]
 8007e1c:	e7ab      	b.n	8007d76 <_malloc_r+0x22>
 8007e1e:	42a3      	cmp	r3, r4
 8007e20:	6862      	ldr	r2, [r4, #4]
 8007e22:	d1dd      	bne.n	8007de0 <_malloc_r+0x8c>
 8007e24:	f8c8 2000 	str.w	r2, [r8]
 8007e28:	e7ec      	b.n	8007e04 <_malloc_r+0xb0>
 8007e2a:	4623      	mov	r3, r4
 8007e2c:	6864      	ldr	r4, [r4, #4]
 8007e2e:	e7ac      	b.n	8007d8a <_malloc_r+0x36>
 8007e30:	4634      	mov	r4, r6
 8007e32:	6876      	ldr	r6, [r6, #4]
 8007e34:	e7b4      	b.n	8007da0 <_malloc_r+0x4c>
 8007e36:	4613      	mov	r3, r2
 8007e38:	e7cc      	b.n	8007dd4 <_malloc_r+0x80>
 8007e3a:	230c      	movs	r3, #12
 8007e3c:	4638      	mov	r0, r7
 8007e3e:	603b      	str	r3, [r7, #0]
 8007e40:	f000 f80e 	bl	8007e60 <__malloc_unlock>
 8007e44:	e797      	b.n	8007d76 <_malloc_r+0x22>
 8007e46:	6025      	str	r5, [r4, #0]
 8007e48:	e7dc      	b.n	8007e04 <_malloc_r+0xb0>
 8007e4a:	605b      	str	r3, [r3, #4]
 8007e4c:	deff      	udf	#255	; 0xff
 8007e4e:	bf00      	nop
 8007e50:	20000848 	.word	0x20000848

08007e54 <__malloc_lock>:
 8007e54:	4801      	ldr	r0, [pc, #4]	; (8007e5c <__malloc_lock+0x8>)
 8007e56:	f7ff bf0e 	b.w	8007c76 <__retarget_lock_acquire_recursive>
 8007e5a:	bf00      	nop
 8007e5c:	20000844 	.word	0x20000844

08007e60 <__malloc_unlock>:
 8007e60:	4801      	ldr	r0, [pc, #4]	; (8007e68 <__malloc_unlock+0x8>)
 8007e62:	f7ff bf09 	b.w	8007c78 <__retarget_lock_release_recursive>
 8007e66:	bf00      	nop
 8007e68:	20000844 	.word	0x20000844

08007e6c <__sflush_r>:
 8007e6c:	898a      	ldrh	r2, [r1, #12]
 8007e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e72:	4605      	mov	r5, r0
 8007e74:	0710      	lsls	r0, r2, #28
 8007e76:	460c      	mov	r4, r1
 8007e78:	d458      	bmi.n	8007f2c <__sflush_r+0xc0>
 8007e7a:	684b      	ldr	r3, [r1, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	dc05      	bgt.n	8007e8c <__sflush_r+0x20>
 8007e80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	dc02      	bgt.n	8007e8c <__sflush_r+0x20>
 8007e86:	2000      	movs	r0, #0
 8007e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e8e:	2e00      	cmp	r6, #0
 8007e90:	d0f9      	beq.n	8007e86 <__sflush_r+0x1a>
 8007e92:	2300      	movs	r3, #0
 8007e94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e98:	682f      	ldr	r7, [r5, #0]
 8007e9a:	6a21      	ldr	r1, [r4, #32]
 8007e9c:	602b      	str	r3, [r5, #0]
 8007e9e:	d032      	beq.n	8007f06 <__sflush_r+0x9a>
 8007ea0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	075a      	lsls	r2, r3, #29
 8007ea6:	d505      	bpl.n	8007eb4 <__sflush_r+0x48>
 8007ea8:	6863      	ldr	r3, [r4, #4]
 8007eaa:	1ac0      	subs	r0, r0, r3
 8007eac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007eae:	b10b      	cbz	r3, 8007eb4 <__sflush_r+0x48>
 8007eb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007eb2:	1ac0      	subs	r0, r0, r3
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eba:	4628      	mov	r0, r5
 8007ebc:	6a21      	ldr	r1, [r4, #32]
 8007ebe:	47b0      	blx	r6
 8007ec0:	1c43      	adds	r3, r0, #1
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	d106      	bne.n	8007ed4 <__sflush_r+0x68>
 8007ec6:	6829      	ldr	r1, [r5, #0]
 8007ec8:	291d      	cmp	r1, #29
 8007eca:	d82b      	bhi.n	8007f24 <__sflush_r+0xb8>
 8007ecc:	4a28      	ldr	r2, [pc, #160]	; (8007f70 <__sflush_r+0x104>)
 8007ece:	410a      	asrs	r2, r1
 8007ed0:	07d6      	lsls	r6, r2, #31
 8007ed2:	d427      	bmi.n	8007f24 <__sflush_r+0xb8>
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	04d9      	lsls	r1, r3, #19
 8007ed8:	6062      	str	r2, [r4, #4]
 8007eda:	6922      	ldr	r2, [r4, #16]
 8007edc:	6022      	str	r2, [r4, #0]
 8007ede:	d504      	bpl.n	8007eea <__sflush_r+0x7e>
 8007ee0:	1c42      	adds	r2, r0, #1
 8007ee2:	d101      	bne.n	8007ee8 <__sflush_r+0x7c>
 8007ee4:	682b      	ldr	r3, [r5, #0]
 8007ee6:	b903      	cbnz	r3, 8007eea <__sflush_r+0x7e>
 8007ee8:	6560      	str	r0, [r4, #84]	; 0x54
 8007eea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eec:	602f      	str	r7, [r5, #0]
 8007eee:	2900      	cmp	r1, #0
 8007ef0:	d0c9      	beq.n	8007e86 <__sflush_r+0x1a>
 8007ef2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ef6:	4299      	cmp	r1, r3
 8007ef8:	d002      	beq.n	8007f00 <__sflush_r+0x94>
 8007efa:	4628      	mov	r0, r5
 8007efc:	f7ff febe 	bl	8007c7c <_free_r>
 8007f00:	2000      	movs	r0, #0
 8007f02:	6360      	str	r0, [r4, #52]	; 0x34
 8007f04:	e7c0      	b.n	8007e88 <__sflush_r+0x1c>
 8007f06:	2301      	movs	r3, #1
 8007f08:	4628      	mov	r0, r5
 8007f0a:	47b0      	blx	r6
 8007f0c:	1c41      	adds	r1, r0, #1
 8007f0e:	d1c8      	bne.n	8007ea2 <__sflush_r+0x36>
 8007f10:	682b      	ldr	r3, [r5, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d0c5      	beq.n	8007ea2 <__sflush_r+0x36>
 8007f16:	2b1d      	cmp	r3, #29
 8007f18:	d001      	beq.n	8007f1e <__sflush_r+0xb2>
 8007f1a:	2b16      	cmp	r3, #22
 8007f1c:	d101      	bne.n	8007f22 <__sflush_r+0xb6>
 8007f1e:	602f      	str	r7, [r5, #0]
 8007f20:	e7b1      	b.n	8007e86 <__sflush_r+0x1a>
 8007f22:	89a3      	ldrh	r3, [r4, #12]
 8007f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f28:	81a3      	strh	r3, [r4, #12]
 8007f2a:	e7ad      	b.n	8007e88 <__sflush_r+0x1c>
 8007f2c:	690f      	ldr	r7, [r1, #16]
 8007f2e:	2f00      	cmp	r7, #0
 8007f30:	d0a9      	beq.n	8007e86 <__sflush_r+0x1a>
 8007f32:	0793      	lsls	r3, r2, #30
 8007f34:	680e      	ldr	r6, [r1, #0]
 8007f36:	600f      	str	r7, [r1, #0]
 8007f38:	bf0c      	ite	eq
 8007f3a:	694b      	ldreq	r3, [r1, #20]
 8007f3c:	2300      	movne	r3, #0
 8007f3e:	eba6 0807 	sub.w	r8, r6, r7
 8007f42:	608b      	str	r3, [r1, #8]
 8007f44:	f1b8 0f00 	cmp.w	r8, #0
 8007f48:	dd9d      	ble.n	8007e86 <__sflush_r+0x1a>
 8007f4a:	4643      	mov	r3, r8
 8007f4c:	463a      	mov	r2, r7
 8007f4e:	6a21      	ldr	r1, [r4, #32]
 8007f50:	4628      	mov	r0, r5
 8007f52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f54:	47b0      	blx	r6
 8007f56:	2800      	cmp	r0, #0
 8007f58:	dc06      	bgt.n	8007f68 <__sflush_r+0xfc>
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f64:	81a3      	strh	r3, [r4, #12]
 8007f66:	e78f      	b.n	8007e88 <__sflush_r+0x1c>
 8007f68:	4407      	add	r7, r0
 8007f6a:	eba8 0800 	sub.w	r8, r8, r0
 8007f6e:	e7e9      	b.n	8007f44 <__sflush_r+0xd8>
 8007f70:	dfbffffe 	.word	0xdfbffffe

08007f74 <_fflush_r>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	690b      	ldr	r3, [r1, #16]
 8007f78:	4605      	mov	r5, r0
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	b913      	cbnz	r3, 8007f84 <_fflush_r+0x10>
 8007f7e:	2500      	movs	r5, #0
 8007f80:	4628      	mov	r0, r5
 8007f82:	bd38      	pop	{r3, r4, r5, pc}
 8007f84:	b118      	cbz	r0, 8007f8e <_fflush_r+0x1a>
 8007f86:	6a03      	ldr	r3, [r0, #32]
 8007f88:	b90b      	cbnz	r3, 8007f8e <_fflush_r+0x1a>
 8007f8a:	f7ff fc89 	bl	80078a0 <__sinit>
 8007f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0f3      	beq.n	8007f7e <_fflush_r+0xa>
 8007f96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f98:	07d0      	lsls	r0, r2, #31
 8007f9a:	d404      	bmi.n	8007fa6 <_fflush_r+0x32>
 8007f9c:	0599      	lsls	r1, r3, #22
 8007f9e:	d402      	bmi.n	8007fa6 <_fflush_r+0x32>
 8007fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fa2:	f7ff fe68 	bl	8007c76 <__retarget_lock_acquire_recursive>
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	4621      	mov	r1, r4
 8007faa:	f7ff ff5f 	bl	8007e6c <__sflush_r>
 8007fae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	07da      	lsls	r2, r3, #31
 8007fb4:	d4e4      	bmi.n	8007f80 <_fflush_r+0xc>
 8007fb6:	89a3      	ldrh	r3, [r4, #12]
 8007fb8:	059b      	lsls	r3, r3, #22
 8007fba:	d4e1      	bmi.n	8007f80 <_fflush_r+0xc>
 8007fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fbe:	f7ff fe5b 	bl	8007c78 <__retarget_lock_release_recursive>
 8007fc2:	e7dd      	b.n	8007f80 <_fflush_r+0xc>

08007fc4 <__swhatbuf_r>:
 8007fc4:	b570      	push	{r4, r5, r6, lr}
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fcc:	b096      	sub	sp, #88	; 0x58
 8007fce:	4615      	mov	r5, r2
 8007fd0:	2900      	cmp	r1, #0
 8007fd2:	461e      	mov	r6, r3
 8007fd4:	da0c      	bge.n	8007ff0 <__swhatbuf_r+0x2c>
 8007fd6:	89a3      	ldrh	r3, [r4, #12]
 8007fd8:	2100      	movs	r1, #0
 8007fda:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007fde:	bf0c      	ite	eq
 8007fe0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007fe4:	2340      	movne	r3, #64	; 0x40
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	6031      	str	r1, [r6, #0]
 8007fea:	602b      	str	r3, [r5, #0]
 8007fec:	b016      	add	sp, #88	; 0x58
 8007fee:	bd70      	pop	{r4, r5, r6, pc}
 8007ff0:	466a      	mov	r2, sp
 8007ff2:	f000 f87d 	bl	80080f0 <_fstat_r>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	dbed      	blt.n	8007fd6 <__swhatbuf_r+0x12>
 8007ffa:	9901      	ldr	r1, [sp, #4]
 8007ffc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008000:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008004:	4259      	negs	r1, r3
 8008006:	4159      	adcs	r1, r3
 8008008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800800c:	e7eb      	b.n	8007fe6 <__swhatbuf_r+0x22>

0800800e <__smakebuf_r>:
 800800e:	898b      	ldrh	r3, [r1, #12]
 8008010:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008012:	079d      	lsls	r5, r3, #30
 8008014:	4606      	mov	r6, r0
 8008016:	460c      	mov	r4, r1
 8008018:	d507      	bpl.n	800802a <__smakebuf_r+0x1c>
 800801a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800801e:	6023      	str	r3, [r4, #0]
 8008020:	6123      	str	r3, [r4, #16]
 8008022:	2301      	movs	r3, #1
 8008024:	6163      	str	r3, [r4, #20]
 8008026:	b002      	add	sp, #8
 8008028:	bd70      	pop	{r4, r5, r6, pc}
 800802a:	ab01      	add	r3, sp, #4
 800802c:	466a      	mov	r2, sp
 800802e:	f7ff ffc9 	bl	8007fc4 <__swhatbuf_r>
 8008032:	9900      	ldr	r1, [sp, #0]
 8008034:	4605      	mov	r5, r0
 8008036:	4630      	mov	r0, r6
 8008038:	f7ff fe8c 	bl	8007d54 <_malloc_r>
 800803c:	b948      	cbnz	r0, 8008052 <__smakebuf_r+0x44>
 800803e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008042:	059a      	lsls	r2, r3, #22
 8008044:	d4ef      	bmi.n	8008026 <__smakebuf_r+0x18>
 8008046:	f023 0303 	bic.w	r3, r3, #3
 800804a:	f043 0302 	orr.w	r3, r3, #2
 800804e:	81a3      	strh	r3, [r4, #12]
 8008050:	e7e3      	b.n	800801a <__smakebuf_r+0xc>
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	6020      	str	r0, [r4, #0]
 8008056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800805a:	6120      	str	r0, [r4, #16]
 800805c:	81a3      	strh	r3, [r4, #12]
 800805e:	9b00      	ldr	r3, [sp, #0]
 8008060:	6163      	str	r3, [r4, #20]
 8008062:	9b01      	ldr	r3, [sp, #4]
 8008064:	b15b      	cbz	r3, 800807e <__smakebuf_r+0x70>
 8008066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800806a:	4630      	mov	r0, r6
 800806c:	f000 f852 	bl	8008114 <_isatty_r>
 8008070:	b128      	cbz	r0, 800807e <__smakebuf_r+0x70>
 8008072:	89a3      	ldrh	r3, [r4, #12]
 8008074:	f023 0303 	bic.w	r3, r3, #3
 8008078:	f043 0301 	orr.w	r3, r3, #1
 800807c:	81a3      	strh	r3, [r4, #12]
 800807e:	89a3      	ldrh	r3, [r4, #12]
 8008080:	431d      	orrs	r5, r3
 8008082:	81a5      	strh	r5, [r4, #12]
 8008084:	e7cf      	b.n	8008026 <__smakebuf_r+0x18>

08008086 <_putc_r>:
 8008086:	b570      	push	{r4, r5, r6, lr}
 8008088:	460d      	mov	r5, r1
 800808a:	4614      	mov	r4, r2
 800808c:	4606      	mov	r6, r0
 800808e:	b118      	cbz	r0, 8008098 <_putc_r+0x12>
 8008090:	6a03      	ldr	r3, [r0, #32]
 8008092:	b90b      	cbnz	r3, 8008098 <_putc_r+0x12>
 8008094:	f7ff fc04 	bl	80078a0 <__sinit>
 8008098:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800809a:	07d8      	lsls	r0, r3, #31
 800809c:	d405      	bmi.n	80080aa <_putc_r+0x24>
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	0599      	lsls	r1, r3, #22
 80080a2:	d402      	bmi.n	80080aa <_putc_r+0x24>
 80080a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080a6:	f7ff fde6 	bl	8007c76 <__retarget_lock_acquire_recursive>
 80080aa:	68a3      	ldr	r3, [r4, #8]
 80080ac:	3b01      	subs	r3, #1
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	60a3      	str	r3, [r4, #8]
 80080b2:	da05      	bge.n	80080c0 <_putc_r+0x3a>
 80080b4:	69a2      	ldr	r2, [r4, #24]
 80080b6:	4293      	cmp	r3, r2
 80080b8:	db12      	blt.n	80080e0 <_putc_r+0x5a>
 80080ba:	b2eb      	uxtb	r3, r5
 80080bc:	2b0a      	cmp	r3, #10
 80080be:	d00f      	beq.n	80080e0 <_putc_r+0x5a>
 80080c0:	6823      	ldr	r3, [r4, #0]
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	6022      	str	r2, [r4, #0]
 80080c6:	701d      	strb	r5, [r3, #0]
 80080c8:	b2ed      	uxtb	r5, r5
 80080ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080cc:	07da      	lsls	r2, r3, #31
 80080ce:	d405      	bmi.n	80080dc <_putc_r+0x56>
 80080d0:	89a3      	ldrh	r3, [r4, #12]
 80080d2:	059b      	lsls	r3, r3, #22
 80080d4:	d402      	bmi.n	80080dc <_putc_r+0x56>
 80080d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080d8:	f7ff fdce 	bl	8007c78 <__retarget_lock_release_recursive>
 80080dc:	4628      	mov	r0, r5
 80080de:	bd70      	pop	{r4, r5, r6, pc}
 80080e0:	4629      	mov	r1, r5
 80080e2:	4622      	mov	r2, r4
 80080e4:	4630      	mov	r0, r6
 80080e6:	f7ff fcb8 	bl	8007a5a <__swbuf_r>
 80080ea:	4605      	mov	r5, r0
 80080ec:	e7ed      	b.n	80080ca <_putc_r+0x44>
	...

080080f0 <_fstat_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	2300      	movs	r3, #0
 80080f4:	4d06      	ldr	r5, [pc, #24]	; (8008110 <_fstat_r+0x20>)
 80080f6:	4604      	mov	r4, r0
 80080f8:	4608      	mov	r0, r1
 80080fa:	4611      	mov	r1, r2
 80080fc:	602b      	str	r3, [r5, #0]
 80080fe:	f7f9 f8ee 	bl	80012de <_fstat>
 8008102:	1c43      	adds	r3, r0, #1
 8008104:	d102      	bne.n	800810c <_fstat_r+0x1c>
 8008106:	682b      	ldr	r3, [r5, #0]
 8008108:	b103      	cbz	r3, 800810c <_fstat_r+0x1c>
 800810a:	6023      	str	r3, [r4, #0]
 800810c:	bd38      	pop	{r3, r4, r5, pc}
 800810e:	bf00      	nop
 8008110:	20000840 	.word	0x20000840

08008114 <_isatty_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	2300      	movs	r3, #0
 8008118:	4d05      	ldr	r5, [pc, #20]	; (8008130 <_isatty_r+0x1c>)
 800811a:	4604      	mov	r4, r0
 800811c:	4608      	mov	r0, r1
 800811e:	602b      	str	r3, [r5, #0]
 8008120:	f7f9 f8ed 	bl	80012fe <_isatty>
 8008124:	1c43      	adds	r3, r0, #1
 8008126:	d102      	bne.n	800812e <_isatty_r+0x1a>
 8008128:	682b      	ldr	r3, [r5, #0]
 800812a:	b103      	cbz	r3, 800812e <_isatty_r+0x1a>
 800812c:	6023      	str	r3, [r4, #0]
 800812e:	bd38      	pop	{r3, r4, r5, pc}
 8008130:	20000840 	.word	0x20000840

08008134 <_sbrk_r>:
 8008134:	b538      	push	{r3, r4, r5, lr}
 8008136:	2300      	movs	r3, #0
 8008138:	4d05      	ldr	r5, [pc, #20]	; (8008150 <_sbrk_r+0x1c>)
 800813a:	4604      	mov	r4, r0
 800813c:	4608      	mov	r0, r1
 800813e:	602b      	str	r3, [r5, #0]
 8008140:	f7f9 f8f6 	bl	8001330 <_sbrk>
 8008144:	1c43      	adds	r3, r0, #1
 8008146:	d102      	bne.n	800814e <_sbrk_r+0x1a>
 8008148:	682b      	ldr	r3, [r5, #0]
 800814a:	b103      	cbz	r3, 800814e <_sbrk_r+0x1a>
 800814c:	6023      	str	r3, [r4, #0]
 800814e:	bd38      	pop	{r3, r4, r5, pc}
 8008150:	20000840 	.word	0x20000840

08008154 <_init>:
 8008154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008156:	bf00      	nop
 8008158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800815a:	bc08      	pop	{r3}
 800815c:	469e      	mov	lr, r3
 800815e:	4770      	bx	lr

08008160 <_fini>:
 8008160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008162:	bf00      	nop
 8008164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008166:	bc08      	pop	{r3}
 8008168:	469e      	mov	lr, r3
 800816a:	4770      	bx	lr
